#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0206, AA0218, AA0228, AL0254, AL0424, AW0006 // ForNAV settings
Codeunit 70000 "Procurement Processing"
{

    trigger OnRun()
    begin
        //FnNotifyContractorInsuranceExpiry('WINS016','VEND0077');
    end;

    var
        EmailMsg: Codeunit "Email message";
        emailobj: codeunit "Mail";
        Text000: label 'Purchases Setup doesn''''nt exist';
        PrequalificationEntry: Record "Vendor Prequalification Entry";
        ProcurementCat: Record "Procurement Category";
        IFP: Record "Request For Information";
        IFPResponseL: Record "IFP Response Line";
        ConfirmManagement: Codeunit "Confirm Management";
        ProctSetup: Record "Procurement Setup";
        Text001: label 'Are you sure you want to Post?';
        FeedbackValue: Boolean;
        conftxt: Boolean;
        optionselected: Integer;
        Text002: label 'Record No  %1 has been Created';
        Bids: Record "Purchase Header";
        ifscode: Code[30];
        tendername: Text;
        ifs: Record "Standard Purchase Code";
        RankingNo: Integer;
        Bids2: Record "Purchase Header";
        FinanceEvaluationLine1: Record "Finance Evaluation Line";
        RankingNo2: Integer;
        IndividualEvaluationMatrix: Record "Individual Evaluation Matrix";
        objNoSeriesManagement: Codeunit NoSeriesManagement;
        ProcurementSetup: Record "Procurement Setup";
        NoMgt: Codeunit NoSeriesManagement;
        RFICategory: Record "RFI Prequalification Category";
        RFIRequiredDoc: Record "RFI Required Document";
        RFICategoryRequirement: Record "RFI Category Requirement";
        Employee: Record Employee;
        ResponsibilityCenter: Record "Responsibility Center";
        ObjJob: Record Job;
        ProjectVendors: Record "Project Vendors";
        Vendor: Record Vendor;
        InsuranceGuaranteeHeader: Record "Insurance/Guarantee Header";
        PurchNo: Code[40];
        GLBudgetEntry: Record "G/L Budget Entry";
        CSSetup: Record "Cash Management Setup";
        IFS2: Record "Standard Purchase Code";


    procedure LPOCommittment(var PurchHeader: Record "Purchase Header")
    var
        PurchaseLines: Record "Purchase Line";
        Committments: Record "Commitment Entries1";
        Item: Record Item;
        GLAccount: Record "G/L Account";
        FixedAsset: Record "Fixed Asset";
        EntryNo: Integer;
        InventoryPostingSetup: Record "Inventory Posting Setup";
        FixedAssetPG: Record "FA Posting Group";
        GenLedSetup: Record "General Ledger Setup";
        InventoryAccount: Code[20];
        AcquisitionAccount: Code[20];
        BudgetAmount: Decimal;
        Expenses: Decimal;
        BudgetAvailable: Decimal;
        CommitmentEntries: Record "Commitment Entries1";
        CommittedAmount: Decimal;
        Vendor: Record Vendor;
        Procurementplan: Record "Procurement Plan1";
    begin


        PurchaseLines.Reset;
        PurchaseLines.SetRange(PurchaseLines."Document No.", PurchHeader."No.");
        //PurchaseLines.SETRANGE(PurchaseLines."Document Type",PurchaseLines."Document Type"::Order);
        if PurchaseLines.FindFirst then begin
            if Committments.FindLast then
                EntryNo := Committments."Entry No";
            repeat
                Committments.Init;
                Committments."Commitment No" := PurchHeader."No.";
                Committments.Type := Committments.Type::Committed;
                // PurchHeader.VALIDATE("Order Date");
                if PurchHeader."Order Date" = 0D then
                    Error('Please enter the order date');
                Committments."Commitment Date" := PurchHeader."Order Date";
                Committments."Global Dimension 1 Code" := PurchaseLines."Shortcut Dimension 1 Code";
                Committments."Global Dimension 2 Code" := PurchaseLines."Shortcut Dimension 2 Code";
                //Case of G/L Account,Item,Fixed Asset
                case PurchaseLines.Type of
                    PurchaseLines.Type::Item:
                        begin
                            Item.Reset;
                            if Item.Get(PurchaseLines."No.") then
                                if Item."Inventory Posting Group" = '' then
                                    Error('Assign Posting Group to Item No %1', Item."No.");
                            InventoryPostingSetup.Get(PurchaseLines."Location Code", Item."Inventory Posting Group");
                            InventoryAccount := InventoryPostingSetup."Inventory Account";
                            Committments.GLAccount := InventoryAccount;
                        end;
                    PurchaseLines.Type::"G/L Account":
                        begin
                            Committments.GLAccount := PurchaseLines."No.";
                        end;
                    PurchaseLines.Type::"Fixed Asset":
                        begin
                            if FixedAssetPG.Get(PurchaseLines."Posting Group") then begin
                                FixedAssetPG.TestField("Acquisition Cost Account");
                                AcquisitionAccount := FixedAssetPG."Acquisition Cost Account";
                                Committments.GLAccount := AcquisitionAccount;
                            end;
                        end;
                end;
                Committments.Amount := PurchaseLines."Line Amount";
                // Committments."Procurement Plan" := PurchaseLines."Procurement Plan";
                //Committments."Vote Item":=PurchaseLines."Procurement Plan Item";

                //Confirm the Amount to be issued does not exceed the budget and amount Committed
                //Get Budget for the G/L
                /*GenLedSetup.GET;
                GLAccount.SETFILTER(GLAccount."Budget Filter",GenLedSetup."Current Budget");
                CASE PurchaseLines.Type OF
                PurchaseLines.Type::Item:
                BEGIN
                     GLAccount.SETRANGE(GLAccount."No.",InventoryAccount);
                END;
                PurchaseLines.Type::"G/L Account":
                BEGIN
                  GLAccount.SETRANGE(GLAccount."No.",PurchaseLines."No.");
                END;
                PurchaseLines.Type::"Fixed Asset":
                  GLAccount.SETRANGE(GLAccount."No.",AcquisitionAccount);
                END;
        
                GLAccount.CALCFIELDS(GLAccount."Budgeted Amount",GLAccount."Net Change");
        
        
                //Get budget amount avaliable
              // GLAccount.SETRANGE(GLAccount."Date Filter",GenLedSetup."Current Budget Start Date",PurchHeader."Order Date");
                IF GLAccount.FIND('-') THEN BEGIN
                 GLAccount.CALCFIELDS(GLAccount."Budgeted Amount",GLAccount."Net Change");
                 BudgetAmount:=GLAccount."Budgeted Amount";
                 Expenses:=GLAccount."Net Change";
                 BudgetAvailable:=GLAccount."Budgeted Amount"-GLAccount."Net Change";
                END;*/
                //Get Budget for the G/L
                // MESSAGE('Hie');
                Procurementplan.Reset;
                //Procurementplan.SetRange("Plan Year", PurchaseLines."Procurement Plan");
                //  Procurementplan.SetRange("Plan Item No", PurchaseLines."Procurement Plan Item");
                if Procurementplan.FindSet then begin
                    Procurementplan.CalcFields(Actual, Commitment);
                    BudgetAmount := Procurementplan."Estimated Cost";
                    Expenses := Procurementplan.Actual;
                    BudgetAvailable := Procurementplan."Estimated Cost" - Procurementplan.Actual;
                    CommittedAmount := Procurementplan.Commitment;
                end;

                /*//Get committed Amount
                CommittedAmount:=0;
                CommitmentEntries.RESET;
                CommitmentEntries.SETCURRENTKEY(CommitmentEntries.GLAccount);
                IF PurchaseLines.Type=PurchaseLines.Type::Item THEN
                 CommitmentEntries.SETRANGE(CommitmentEntries.GLAccount,InventoryAccount);
                IF PurchaseLines.Type=PurchaseLines.Type::"G/L Account" THEN
                 CommitmentEntries.SETRANGE(CommitmentEntries.GLAccount,PurchaseLines."No.");
                IF PurchaseLines.Type=PurchaseLines.Type::"Fixed Asset" THEN
                 CommitmentEntries.SETRANGE(CommitmentEntries.GLAccount,AcquisitionAccount);
                {CommitmentEntries.SETRANGE(CommitmentEntries."Commitment Date",GenLedSetup."Current Budget Start Date",
                                           PurchHeader."Order Date");}
                CommitmentEntries.CALCSUMS(CommitmentEntries.Amount);
                CommittedAmount:=CommitmentEntries.Amount;*/

                if LineCommitted(PurchHeader."No.", PurchaseLines."No.", PurchaseLines."Line No.") then
                    Message('Line No %1 has been commited', PurchaseLines."Line No.")
                else

                    if CommittedAmount + PurchaseLines."Line Amount" > BudgetAvailable then
                        Error('You have Exceeded Budget for G/L Account No %1 By %2 Budget Available %3 CommittedAmount %4'
                        , Committments.GLAccount,
                        Abs(BudgetAvailable - (CommittedAmount + PurchaseLines."Line Amount")), BudgetAvailable, CommittedAmount);

                Committments."User ID" := UserId;
                Committments."Document No." := PurchHeader."No.";
                Committments.No := PurchaseLines."No.";
                Committments."Line No." := PurchaseLines."Line No.";
                Committments."Account Type" := Committments."account type"::Vendor;
                Committments."Commitment Type" := Committments."commitment type"::LPO;
                Committments."Account No." := PurchaseLines."Buy-from Vendor No.";
                if Vendor.Get(PurchaseLines."Buy-from Vendor No.") then
                    Committments."Account Name" := Vendor.Name;
                Committments.Description := PurchaseLines.Description;

                //Check whether line is committed.
                if not LineCommitted(PurchHeader."No.", PurchaseLines."No.", PurchaseLines."Line No.") then begin
                    EntryNo := EntryNo + 1;
                    Committments."Entry No" := EntryNo;
                    Committments.Insert;
                    //   PurchaseLines.Committed := true;
                    PurchaseLines.Modify;
                end;
            until PurchaseLines.Next = 0;
        end;
        Message('Items Committed Successfully and the balance is %1',
        Abs(BudgetAvailable - (CommittedAmount + PurchaseLines."Line Amount")));

    end;


    procedure LineCommitted(var CommittmentNo: Code[20]; var No: Code[20]; var LineNo: Integer) Exists: Boolean
    var
        Committed: Record "Commitment Entries1";
    begin

        Exists := false;
        Committed.Reset;
        Committed.SetRange(Committed."Commitment No", CommittmentNo);
        Committed.SetRange(Committed.No, No);
        Committed.SetRange(Committed."Line No.", LineNo);
        if Committed.Find('-') then
            Exists := true;
    end;


    procedure ReverseLPOCommittment(var PurchHeader: Record "Purchase Header")
    var
        Committment: Record "Commitment Entries1";
        PurchLine: Record "Purchase Line";
        EntryNo: Integer;
        Item: Record Item;
        InventoryPostingSetup: Record "Inventory Posting Setup";
        FixedAssetPG: Record "FA Posting Group";
        GenLedSetup: Record "General Ledger Setup";
        InventoryAccount: Code[20];
        AcquisitionAccount: Code[20];
        Vendor: Record Vendor;
        FixedAsset: Record "Fixed Asset";
    begin

        if Confirm('Are you sure you want to reverse the committed entries for Document no ' + PurchHeader."No." + '?', false) = true then begin
            Committment.Reset;
            Committment.SetRange(Committment."Commitment No", PurchHeader."No.");
            if Committment.Find('-') then begin
                Committment.DeleteAll;
            end;
            PurchLine.Reset;
            //PurchLine.SETRANGE(PurchLine."Document Type",PurchLine."Document Type"::Order);
            PurchLine.SetRange(PurchLine."Document No.", PurchHeader."No.");
            if PurchLine.FindFirst then begin
                repeat

                    //Insert Reversal entries in the committment entries table
                    if Committment.Find('+') then
                        EntryNo := Committment."Entry No";
                    EntryNo := EntryNo + 1;
                    if LineCommitted(PurchHeader."No.", PurchLine."No.", PurchLine."Line No.") then begin
                        Committment.Init;
                        Committment."Entry No" := EntryNo;
                        Committment."Commitment No" := PurchHeader."No.";
                        Committment.Type := Committment.Type::Reversal;
                        Committment."Commitment Date" := PurchLine."Order Date";
                        //Dimensions
                        Committment."Global Dimension 1 Code" := PurchLine."Shortcut Dimension 1 Code";
                        Committment."Global Dimension 2 Code" := PurchLine."Shortcut Dimension 2 Code";
                        //Dimensions
                        //Case of G/L Account,Item,Fixed Asset
                        case PurchLine.Type of
                            PurchLine.Type::Item:
                                begin
                                    Item.Reset;
                                    if Item.Get(PurchLine."No.") then
                                        if Item."Inventory Posting Group" = '' then
                                            Error('Assign Posting Group to Item No %1', Item."No.");
                                    InventoryPostingSetup.Get(PurchLine."Location Code", Item."Inventory Posting Group");
                                    InventoryAccount := InventoryPostingSetup."Inventory Account";
                                    Committment.GLAccount := InventoryAccount;
                                end;
                            PurchLine.Type::"G/L Account":
                                begin
                                    Committment.GLAccount := PurchLine."No.";
                                end;
                            PurchLine.Type::"Fixed Asset":
                                begin
                                    FixedAsset.Reset;
                                    FixedAsset.Get(PurchLine."No.");
                                    FixedAssetPG.Get(FixedAsset."FA Posting Group");
                                    AcquisitionAccount := FixedAssetPG."Acquisition Cost Account";
                                    Committment.GLAccount := AcquisitionAccount;
                                end;
                        end;
                        Committment.Amount := -PurchLine."Line Amount";

                        Committment."User ID" := UserId;
                        Committment."Document No." := PurchHeader."No.";
                        Committment.No := PurchLine."No.";
                        Committment."Account Type" := Committment."account type"::Vendor;
                        Committment."Account No." := PurchLine."Buy-from Vendor No.";
                        if Vendor.Get(PurchLine."Buy-from Vendor No.") then
                            Committment."Account Name" := Vendor.Name;
                        Committment.Description := PurchLine.Description;

                        Committment.Insert;

                        //Mark entries as uncommited
                        // PurchLine.Committed := false;
                        PurchLine.Modify;
                    end;

                until PurchLine.Next = 0;
            end;
            Message('Committed entries for Order No %1 Have been reversed Successfully', PurchHeader."No.");
        end;
    end;


    procedure UncommitLPO(var PurchHeader: Record "Purchase Header")
    var
        Committment: Record "Commitment Entries1";
        PurchLine: Record "Purchase Line";
        EntryNo: Integer;
        Item: Record Item;
        InventoryPostingSetup: Record "Inventory Posting Setup";
        FixedAssetPG: Record "FA Posting Group";
        GenLedSetup: Record "General Ledger Setup";
        InventoryAccount: Code[20];
        AcquisitionAccount: Code[20];
        Vendor: Record Vendor;
        FixedAsset: Record "Fixed Asset";
    begin
        /*//Post Reversals to committment entries
           PurchLine.RESET;
           PurchLine.SETRANGE(PurchLine."Document Type",PurchLine."Document Type"::Order);
           PurchLine.SETRANGE(PurchLine."Document No.",PurchHeader."No.");
           IF PurchLine.FIND('-') THEN BEGIN
            IF Committment.FIND('+') THEN
               EntryNo:=Committment."Time Stamp";
               EntryNo:=EntryNo+1;
              REPEAT
              IF LineCommitted(PurchHeader."No.",PurchLine."No.",PurchLine."Line No.") THEN BEGIN
                Committment.INIT;
                Committment."Time Stamp":=EntryNo;
                Committment."Entry No":=PurchHeader."No.";
                Committment."Document No.":=Committment."Document No."::"1";
                Committment."Commitment Date":=PurchLine."Order Date";
                //Dimensions
                Committment.Description:=PurchLine."Shortcut Dimension 1 Code";
                Committment."Global Dimension 2":=PurchLine."Shortcut Dimension 2 Code";
                //Dimensions
                //Case of G/L Account,Item,Fixed Asset
                CASE PurchLine.Type OF
                PurchLine.Type::Item:
                BEGIN
                Item.RESET;
                 IF Item.GET(PurchLine."No.") THEN
                   IF Item."Inventory Posting Group"='' THEN
                       ERROR('Assign Posting Group to Item No %1',Item."No.");
                      InventoryPostingSetup.GET(PurchLine."Location Code",Item."Inventory Posting Group");
                      InventoryAccount:=InventoryPostingSetup."Inventory Account";
                      Committment.Amount:=InventoryAccount;
                END;
                PurchLine.Type::"G/L Account":
                BEGIN
                 Committment.Amount:=PurchLine."No.";
                END;
                PurchLine.Type::"Fixed Asset":
                BEGIN
                  FixedAsset.RESET;
                  FixedAsset.GET(PurchLine."No.");
                  FixedAssetPG.GET(FixedAsset."FA Posting Group");
                  AcquisitionAccount:=FixedAssetPG."Acquisition Cost Account";
                  Committment.Amount:=AcquisitionAccount;
                END;
                END;
               Committment."Budget Line":=-PurchLine."Line Amount";
        
               Committment."Global Dimension 1 Code":=USERID;
               Committment."Commitment Type":=PurchHeader."No.";
               Committment."User ID":=PurchLine."No.";
               Committment."Line No.":=PurchLine."Line No.";
               Committment."Account Type":=Committment."Account Type"::"2";
               Committment."Account No.":=PurchLine."Buy-from Vendor No.";
               IF Vendor.GET(PurchLine."Buy-from Vendor No.") THEN
               Committment."Account Name":=Vendor.Name;
               Committment.Description:=PurchLine.Description;
        
               Committment.INSERT;
            END;
            UNTIL PurchLine.NEXT=0;
          END;
          //End Post Reversal to Committment entries
        */

    end;


    procedure LastCommittment(var CommittmentNo: Code[20]; var No: Code[20]; var LineNo: Integer) CommittmentAmt: Decimal
    var
        Committed: Record "Commitment Entries1";
    begin

        Committed.Reset;
        Committed.SetRange(Committed."Commitment No", CommittmentNo);
        Committed.SetRange(Committed.No, No);
        Committed.SetRange(Committed."Line No.", LineNo);
        if Committed.Find('-') then
            exit(Committed.Amount);
    end;


    procedure ImprestCommittment(var ImprestHeader: Record payments)
    var
        ImprestLines: Record "Imprest Lines";
        Committments: Record "Commitment Entries1";
        EntryNo: Integer;
        BudgetAmount: Decimal;
        Expenses: Decimal;
        BudgetAvailable: Decimal;
        CommittedAmount: Decimal;
        CommitmentEntries: Record "Commitment Entries1";
        GenLedSetup: Record "General Ledger Setup";
        GLAccount: Record "G/L Account";
        Customer: Record Customer;
        BudgetBal: Decimal;
        CommittedAmntSoFar: Decimal;
        WorkCode: Code[30];
        comm: Record "Commitment Entries1";
        EntryN: Integer;
    begin
        ImprestLines.Reset;
        ImprestLines.SetRange(ImprestLines.No, ImprestHeader."No.");
        if ImprestLines.FindSet then
            repeat
                comm.Reset;
                if comm.FindLast then begin
                    if comm."Entry No" = 0 then
                        EntryNo := 1
                    else
                        EntryNo := comm."Entry No" + 1;
                end else
                    EntryNo := 1;

                Committments.Init;
                Committments."Entry No" := EntryNo;
                Committments."Commitment No" := ImprestHeader."No.";
                Committments.Type := Committments.Type::Committed;
                Committments."Commitment Type" := Committments."commitment type"::IMPREST;
                Committments."Commitment Date" := ImprestHeader.Date;
                Committments."Global Dimension 1 Code" := ImprestHeader."Shortcut Dimension 1 Code";
                Committments."Global Dimension 2 Code" := ImprestHeader."Shortcut Dimension 2 Code";
                Committments."User ID" := UserId;
                Committments."Document No." := ImprestHeader."No.";
                Committments."Account Type" := ImprestLines."Account Type";
                Committments.Job := ImprestLines."Job No.";
                Committments.Amount := ImprestLines.Amount;
                Committments."Job Task No" := ImprestLines."Job Task No.";
                Committments."Account No." := ImprestLines."Account No.";
                Committments."Account Name" := ImprestLines."Account Name";
                //  Committments."Budget Year" := ImprestHeader.Job;
                Committments."Budget Line" := ImprestHeader."Job Task No.";
                if ImprestLines.Description <> '' then
                    Committments.Description := ImprestLines.Description
                else
                    Committments.Description := ImprestHeader."Payment Narration";
                Committments.Insert;
            until ImprestLines.Next = 0;
    end;


    procedure ImprestUnCommittment(var ImprestHeader: Record payments)
    var
        ImprestLines: Record "Imprest Lines";
        Committments: Record "Commitment Entries1";
        EntryNo: Integer;
        BudgetAmount: Decimal;
        Expenses: Decimal;
        BudgetAvailable: Decimal;
        CommittedAmount: Decimal;
        CommitmentEntries: Record "Commitment Entries1";
        GenLedSetup: Record "General Ledger Setup";
        GLAccount: Record "G/L Account";
        Customer: Record Customer;
        CashMngt: Record "Cash Management  SetupS";
        UncommittmentDate: Date;
    begin

        ImprestLines.Reset;
        if ImprestLines.FindFirst then begin
            if Committments.FindLast then
                EntryNo := Committments."Entry No";

            Committments.Reset;
            Committments.SetRange(Committments."Commitment No", ImprestHeader."Imprest Issue Doc. No");
            Committments.SetRange(Committments.Type, Committments.Type::Committed);
            if Committments.Find('-') then
                Committments.Type := Committments.Type::Reversal;
            Committments."Uncommittment Date" := Today;
            Committments.Modify;

        end;
    end;


    procedure CheckLPOCommittment(var PurchHeader: Record "Purchase Header")
    var
        PurchaseLines: Record "Purchase Line";
        Committments: Record "Commitment Entries1";
        Item: Record Item;
        GLAccount: Record "G/L Account";
        FixedAsset: Record "Fixed Asset";
        EntryNo: Integer;
        InventoryPostingSetup: Record "Inventory Posting Setup";
        FixedAssetPG: Record "FA Posting Group";
        GenLedSetup: Record "General Ledger Setup";
        InventoryAccount: Code[20];
        AcquisitionAccount: Code[20];
        BudgetAmount: Decimal;
        Expenses: Decimal;
        BudgetAvailable: Decimal;
        CommitmentEntries: Record "Commitment Entries1";
        CommittedAmount: Decimal;
        Vendor: Record Vendor;
        Procurementplan: Record "Procurement Plan1";
    begin


        PurchaseLines.Reset;
        PurchaseLines.SetRange(PurchaseLines."Document No.", PurchHeader."No.");
        //PurchaseLines.SETRANGE(PurchaseLines."Document Type",PurchaseLines."Document Type"::Order);
        if PurchaseLines.FindFirst then begin
            repeat

                Procurementplan.Reset;
                //  Procurementplan.SetRange("Plan Year", PurchaseLines."Procurement Plan");
                //  Procurementplan.SetRange("Plan Item No", PurchaseLines."Procurement Plan Item");
                if Procurementplan.FindSet then begin
                    Procurementplan.CalcFields(Actual, Commitment);
                    BudgetAmount := Procurementplan."Estimated Cost";
                    Expenses := Procurementplan.Actual;
                    BudgetAvailable := Procurementplan."Estimated Cost" - Procurementplan.Actual;
                    CommittedAmount := Procurementplan.Commitment;
                end;
                if LineCommitted(PurchHeader."No.", PurchaseLines."No.", PurchaseLines."Line No.") then
                    Message('Line No %1 has been commited', PurchaseLines."Line No.")
                else

                    if CommittedAmount + PurchaseLines."Line Amount" > BudgetAvailable then
                        Error('You have Exceeded Budget for G/L Account No %1 By %2 Budget Available %3 CommittedAmount %4'
                        , Committments.GLAccount,
                        Abs(BudgetAvailable - (CommittedAmount + PurchaseLines."Line Amount")), BudgetAvailable, CommittedAmount);

            until PurchaseLines.Next = 0;
        end;
        Message('Budget is available for the item and the balance is %1',
        Abs(BudgetAvailable - (CommittedAmount + PurchaseLines."Line Amount")));
    end;


    procedure FnPRNCommittment(PurchHd: Record "Purchase Header")
    var
        CommitmentEntry: Record "Commitment Entries1";
        PurchHd1: Record "Purchase Header";
        PurchaseL1: Record "Purchase Line";
        Commitments: Record "Commitment Entries1";
        Purchas: Record "Purchase Header";
    begin
        PurchaseL1.Reset;
        PurchaseL1.SetRange("Document No.", PurchHd."No.");
        PurchaseL1.SetRange("Document Type", PurchaseL1."document type"::"Purchase Requisition");
        if PurchaseL1.FindSet then begin
            repeat
                CommitmentEntry.Init;
                Commitments.Reset;
                Commitments.SetFilter("Entry No", '<>%1', 0);
                if Commitments.FindLast then
                    CommitmentEntry."Entry No" := Commitments."Entry No" + 1;
                CommitmentEntry."Document No." := PurchHd."No.";
                CommitmentEntry."Source Type" := CommitmentEntry."Source Type"::PRN;
                CommitmentEntry.Description := PurchaseL1.Description;
                CommitmentEntry.No := PurchaseL1."No.";
                // CommitmentEntry.Quantity:=PurchaseL1.Quantity;
                CommitmentEntry.Description := PurchaseL1.Description;
                CommitmentEntry."Unit Cost" := PurchaseL1."Direct Unit Cost";
                CommitmentEntry.Amount := PurchaseL1.Quantity * PurchaseL1."Direct Unit Cost";
                CommitmentEntry."Procurement Plan" := PurchHd."Procurement Plan ID";
                //CommitmentEntry.Amount:=PurchaseL1."Amount Including VAT";
                //MESSAGE('This is the amount %1',CommitmentEntry.Amount);
                CommitmentEntry."Vote Item" := PurchHd."Procurement Plan Entry No";
                CommitmentEntry."Global Dimension 1 Code" := PurchHd."Shortcut Dimension 1 Code";
                CommitmentEntry."Global Dimension 2 Code" := PurchHd."Shortcut Dimension 2 Code";
                CommitmentEntry."Commitment Type" := CommitmentEntry."commitment type"::PRN;
                CommitmentEntry."Commitment No" := PurchHd."No.";
                CommitmentEntry.Type := CommitmentEntry.Type::Committed;
                CommitmentEntry."Line No." := PurchaseL1."Line No.";
                CommitmentEntry.Job := PurchHd.Job;
                CommitmentEntry."Job Task No" := PurchHd."Job Task No.";
                CommitmentEntry."User ID" := UserId;
                CommitmentEntry."Commitment Date" := Today;
                CommitmentEntry."Time Stamp" := Time;
                // MESSAGE('%1',PurchaseL1."No.");
                if not CommitmentEntry.Insert(true) then
                    CommitmentEntry.Modify(true);
            until PurchaseL1.Next = 0;
        end;
        // MESSAGE('Committed');
    end;


    procedure FnUncommitPRN(PurchHd: Record "Purchase Header")
    var
        CommitmentEntry: Record "Commitment Entries1";
        PurchHd1: Record "Purchase Header";
        PurchaseL1: Record "Purchase Line";
        Commitments: Record "Commitment Entries1";
    begin

        PurchaseL1.Reset;
        PurchaseL1.SetRange("Document No.", PurchHd."No.");
        if PurchaseL1.FindSet then begin
            repeat
                CommitmentEntry.Init;
                Commitments.Reset;
                Commitments.SetFilter("Entry No", '<>%1', 0);
                if Commitments.FindLast then
                    CommitmentEntry."Entry No" := Commitments."Entry No" + 1;
                CommitmentEntry."Document No." := PurchHd."No.";
                //CommitmentEntry."Entry No":=CommitmentEntry."Entry No"+100;
                CommitmentEntry."Source Type" := CommitmentEntry."Source Type"::PRN;
                CommitmentEntry.Description := PurchaseL1.Description;
                CommitmentEntry.No := PurchaseL1."No.";
                //CommitmentEntry.Quantity:=PurchaseL1.Quantity;
                CommitmentEntry.Description := PurchaseL1.Description;
                CommitmentEntry."Unit Cost" := PurchaseL1."Direct Unit Cost";
                CommitmentEntry.Amount := -(PurchaseL1.Quantity * PurchaseL1."Direct Unit Cost");
                CommitmentEntry."Procurement Plan" := PurchHd."Procurement Plan ID";
                CommitmentEntry."Vote Item" := PurchHd."Procurement Plan Entry No";
                CommitmentEntry."Global Dimension 1 Code" := PurchHd."Shortcut Dimension 1 Code";
                CommitmentEntry."Global Dimension 2 Code" := PurchHd."Shortcut Dimension 2 Code";
                CommitmentEntry."Commitment Type" := CommitmentEntry."commitment type"::PRN;
                CommitmentEntry."Commitment No" := PurchHd."No.";
                CommitmentEntry.Type := CommitmentEntry.Type::Reversal;
                CommitmentEntry."Line No." := PurchaseL1."Line No.";
                CommitmentEntry.Job := PurchHd.Job;
                CommitmentEntry."Job Task No" := PurchHd."Job Task No.";
                CommitmentEntry."User ID" := UserId;
                CommitmentEntry."Uncommittment Date" := Today;
                CommitmentEntry."Time Stamp" := Time;
            //CommitmentEntry .Insert(true);
            until PurchaseL1.Next = 0;

        end;
    end;


    procedure FnLPOCommittment(PurchHd: Record "Purchase Header")
    var
        CommitmentEntry: Record "Commitment Entries1";
        PurchHd1: Record "Purchase Header";
        PurchaseL1: Record "Purchase Line";
        Commitments: Record "Commitment Entries1";
    begin

        PurchaseL1.Reset;
        PurchaseL1.SetRange("Document No.", PurchHd."No.");
        if PurchaseL1.FindSet then begin
            repeat
                CommitmentEntry.Init;
                Commitments.Reset;
                Commitments.SetFilter("Entry No", '<>%1', 0);
                if Commitments.FindLast then
                    CommitmentEntry."Entry No" := Commitments."Entry No" + 1;
                CommitmentEntry."Document No." := PurchHd."No.";
                //CommitmentEntry."Entry No":=CommitmentEntry."Entry No"+100;
                CommitmentEntry."Source Type" := CommitmentEntry."Source Type"::LPO;
                CommitmentEntry.Description := PurchaseL1.Description;
                CommitmentEntry.No := PurchaseL1."No.";
                //CommitmentEntry.Quantity:=PurchaseL1.Quantity;
                CommitmentEntry.Description := PurchaseL1.Description;
                CommitmentEntry."Unit Cost" := PurchaseL1."Direct Unit Cost";
                CommitmentEntry.Amount := PurchaseL1.Amount;
                CommitmentEntry."Procurement Plan" := PurchHd."Procurement Plan ID";
                CommitmentEntry."Vote Item" := PurchHd."Procurement Plan Entry No";
                CommitmentEntry."Global Dimension 1 Code" := PurchHd."Shortcut Dimension 1 Code";
                CommitmentEntry."Global Dimension 2 Code" := PurchHd."Shortcut Dimension 2 Code";
                CommitmentEntry."Commitment Type" := CommitmentEntry."commitment type"::LPO;
                CommitmentEntry."Commitment No" := PurchHd."No.";
                CommitmentEntry.Type := CommitmentEntry.Type::Committed;
                CommitmentEntry."Line No." := PurchaseL1."Line No.";
                CommitmentEntry.Job := PurchHd.Job;
                CommitmentEntry."Job Task No" := PurchHd."Job Task No.";
                CommitmentEntry."User ID" := UserId;
                CommitmentEntry."Commitment Date" := Today;
                CommitmentEntry."Time Stamp" := Time;
            //   CommitmentEntry .Insert(true);
            until PurchaseL1.Next = 0;

        end;
    end;


    procedure FnUncommitLPO(PurchHd: Record "Purchase Header")
    var
        CommitmentEntry: Record "Commitment Entries1";
        PurchHd1: Record "Purchase Header";
        PurchaseL1: Record "Purchase Line";
        Commitments: Record "Commitment Entries1";
    begin
        PurchaseL1.Reset;
        PurchaseL1.SetRange("Document No.", PurchHd."No.");
        if PurchaseL1.FindSet then begin
            repeat
                CommitmentEntry.Init;
                Commitments.Reset;
                Commitments.SetFilter("Entry No", '<>%1', 0);
                if Commitments.FindLast then
                    CommitmentEntry."Entry No" := Commitments."Entry No" + 1;
                //CommitmentEntry."Entry No":=CommitmentEntry."Entry No"+100;
                CommitmentEntry."Source Type" := CommitmentEntry."Source Type"::LPO;
                CommitmentEntry.Description := PurchaseL1.Description;
                CommitmentEntry.No := PurchaseL1."No.";
                CommitmentEntry.Quantity := PurchaseL1."Qty. to Invoice";
                CommitmentEntry.Description := PurchaseL1.Description;
                CommitmentEntry."Unit Cost" := PurchaseL1."Direct Unit Cost";
                CommitmentEntry.Amount := -(PurchaseL1."Qty. to Invoice" * PurchaseL1."Direct Unit Cost");
                CommitmentEntry."Procurement Plan" := PurchHd."Procurement Plan ID";
                CommitmentEntry."Vote Item" := PurchHd."Procurement Plan Entry No";
                CommitmentEntry."Global Dimension 1 Code" := PurchHd."Shortcut Dimension 1 Code";
                CommitmentEntry."Global Dimension 2 Code" := PurchHd."Shortcut Dimension 2 Code";
                CommitmentEntry."Commitment Type" := CommitmentEntry."commitment type"::LPO;
                CommitmentEntry."Commitment No" := PurchHd."No.";
                CommitmentEntry.Type := CommitmentEntry.Type::Reversal;
                CommitmentEntry."Line No." := PurchaseL1."Line No.";
                CommitmentEntry.Job := PurchHd.Job;
                CommitmentEntry."Job Task No" := PurchHd."Job Task No.";
                CommitmentEntry."User ID" := UserId;
                CommitmentEntry."Uncommittment Date" := Today;
                CommitmentEntry."Document No." := PurchHd."No.";
                CommitmentEntry."Time Stamp" := Time;
            //CommitmentEntry .Insert(true);
            until PurchaseL1.Next = 0;

        end;
    end;


    procedure GenerateRFQ(PurchLines: Record "Purchase Line")
    var
        RequestRec: Record "Procurement Request";
        RequestLine: Record "Procurement Request Lines";
        RequestLines: Record "Purchase Line";
        RequisitionHeader: Record "Purchase Header";
        ProcurementRequest: Record "Procurement Request";
        ProcurementRequestLine: Record "Procurement Request Lines";
        LineNo: Integer;
        NoSeriesMgt: Codeunit NoSeriesManagement;
        PPSetup: Record "Purchases & Payables Setup";
    begin
        //WITH PurchLines DO BEGIN
        PurchLines.Reset;
        //PurchLines.SETRANGE(PurchLines.Select2,TRUE);
        //PurchLines.SETRANGE(PurchLines."Request Generated",FALSE);
        PurchLines.SetRange("Document No.", PurchLines."Document No.");
        if PurchLines.Find('-') then begin
            RequisitionHeader.Reset;
            RequisitionHeader.SetRange("No.", PurchLines."Document No.");
            if RequisitionHeader.FindSet then begin
                // PurchLines.CalcFields(PurchLines."Process Type");
                ProcurementRequest.Init;
                //  if PurchLines."Process Type" = 'RFP' then
                //    ProcurementRequest."Process Type" := ProcurementRequest."process type"::RFP
                //  else
                //  ProcurementRequest."Process Type" := ProcurementRequest."process type"::RFQ;
                if not PPSetup.Get then
                    Error(Text000);
                case ProcurementRequest."Process Type" of
                    ProcurementRequest."process type"::RFQ:
                        begin
                            PPSetup.TestField("Request for Quotation Nos.");
                            ProcurementRequest.No := NoSeriesMgt.GetNextNo(PPSetup."Request for Quotation Nos.", Today, true);
                        end;
                    ProcurementRequest."process type"::RFP:
                        begin
                            PPSetup.TestField("Request for Proposals Nos.");
                            ProcurementRequest.No := NoSeriesMgt.GetNextNo(PPSetup."Request for Proposals Nos.", Today, true);
                        end;
                    ProcurementRequest."process type"::Tender:
                        begin
                            PPSetup.TestField("Tenders Nos");

                            ProcurementRequest.No := NoSeriesMgt.GetNextNo(PPSetup."Tenders Nos", Today, true);
                        end;
                end;
                RequisitionHeader.Reset;
                RequisitionHeader.SetRange("No.", PurchLines."Document No.");
                if RequisitionHeader.FindSet then
                    ProcurementRequest.Title := RequisitionHeader.Description;
                ProcurementRequest."Requisition No" := PurchLines."Document No.";
                ProcurementRequest."Issued Date" := Today;
                ProcurementRequest."Creation Date" := Today;
                // ProcurementRequest."Procurement Plan No" := PurchLines."Procurement Plan";
                //ProcurementRequest."Procurement Plan Item":=PurchLines."Procurement Plan Item";
                ProcurementRequest."User ID" := UserId;
                ProcurementRequest.Insert(true);
            end;
            repeat
                LineNo := LineNo + 10000;
                ProcurementRequestLine.Init;
                // ProcurementRequestLine.TRANSFERFIELDS(PurchLines);
                ProcurementRequestLine."Requisition No" := ProcurementRequest.No;
                ProcurementRequestLine."Line No" := LineNo;
                ProcurementRequestLine.Type := PurchLines.Type;
                ProcurementRequestLine.No := PurchLines."No.";
                ProcurementRequestLine.Description := PurchLines.Description;
                ProcurementRequestLine.Quantity := PurchLines.Quantity;
                ProcurementRequestLine."Unit of Measure" := PurchLines."Unit of Measure";
                ProcurementRequestLine."Unit Price" := PurchLines."Unit Price (LCY)";
                //ProcurementRequestLine.Amount:=PurchLines."Line Amount";
                // ProcurementRequestLine."Procurement Plan" := PurchLines."Procurement Plan";
                // ProcurementRequestLine."Procurement Plan Item" := PurchLines."Procurement Plan Item";
                // ProcurementRequestLine."Budget Line" := PurchLines."Procurement Plan";
                // ProcurementRequestLine."Global Dimension 1 Code" := PurchLines."Shortcut Dimension 1 Code";
                // //ProcurementRequestLine."Amount LCY":=PurchLines.Amount;
                // ProcurementRequestLine.Select := PurchLines.Select2;
                // ProcurementRequestLine."Request Generated" := PurchLines."Request Generated";
                // //ProcurementRequestLine."Supplier Category":=PurchLines.Subtyp
                // //ProcurementRequestLine."Vendor No":=PurchLines.ve
                // ProcurementRequestLine.Ordered := PurchLines.Ordered;
                // ProcurementRequestLine."Order Date" := PurchLines."Order Creation date";
                // ProcurementRequestLine."Current Budget" := PurchLines."Procurement Plan";
                // ProcurementRequestLine.Specifications := PurchLines.Specifications;
                //ProcurementRequestLine.TRANSFERFIELDS(PurchLines);
                if not ProcurementRequestLine.Get(ProcurementRequest.No, LineNo) then
                    ProcurementRequestLine.Insert;
                // PurchLines."Request Generated" := true;
                PurchLines.Modify;
            until PurchLines.Next = 0;
        end;

        Message('Document %1 Created successfully, Kindly Proceed to Quotations List', ProcurementRequest.No);
        Page.Run(70026, ProcurementRequest);
        // END;
    end;


    procedure GenerateDirect(PurchLines: Record "Purchase Line")
    var
        RequestRec: Record "Procurement Request";
        RequestLine: Record "Procurement Request Lines";
        RequestLines: Record "Purchase Line";
        RequisitionHeader: Record "Purchase Header";
        ProcurementRequest: Record "Procurement Request";
        ProcurementRequestLine: Record "Procurement Request Lines";
        LineNo: Integer;
        NoSeriesMgt: Codeunit NoSeriesManagement;
        PPSetup: Record "Purchases & Payables Setup";
    begin
        //WITH PurchLines DO BEGIN
        PurchLines.Reset;
        //PurchLines.SETRANGE(PurchLines.Select2,TRUE);
        //PurchLines.SETRANGE(PurchLines."Request Generated",FALSE);
        PurchLines.SetRange("Document No.", PurchLines."Document No.");
        if PurchLines.Find('-') then begin
            RequisitionHeader.Reset;
            RequisitionHeader.SetRange("No.", PurchLines."Document No.");
            if RequisitionHeader.FindSet then begin
                //  PurchLines.CalcFields(PurchLines."Process Type");
                ProcurementRequest.Init;

                ProcurementRequest."Process Type" := ProcurementRequest."process type"::Direct;
                if not PPSetup.Get then
                    Error(Text000);


                PPSetup.TestField("Direct Prcmnt Nos");
                ProcurementRequest.No := NoSeriesMgt.GetNextNo(PPSetup."Direct Prcmnt Nos", Today, true);
                //END;
            end;
            ProcurementRequest.Title := PurchLines.Description;
            ProcurementRequest."Requisition No" := PurchLines."Document No.";
            ProcurementRequest."Issued Date" := Today;
            ProcurementRequest."Creation Date" := Today;
            //  ProcurementRequest."Procurement Plan No" := PurchLines."Procurement Plan";
            //ProcurementRequest."Procurement Plan Item":=PurchLines."Procurement Plan Item";
            ProcurementRequest."User ID" := UserId;
            ProcurementRequest.Insert(true);
            //END;
            repeat
                LineNo := LineNo + 10000;
                ProcurementRequestLine.Init;
                // ProcurementRequestLine.TRANSFERFIELDS(PurchLines);
                ProcurementRequestLine."Requisition No" := ProcurementRequest.No;
                ProcurementRequestLine."Line No" := LineNo;
                ProcurementRequestLine.Type := PurchLines.Type;
                ProcurementRequestLine.No := PurchLines."No.";
                ProcurementRequestLine.Description := PurchLines.Description;
                ProcurementRequestLine.Quantity := PurchLines.Quantity;
                ProcurementRequestLine."Unit of Measure" := PurchLines."Unit of Measure";
                ProcurementRequestLine."Unit Price" := PurchLines."Unit Price (LCY)";
                ProcurementRequestLine.Amount := PurchLines."Line Amount";
                // ProcurementRequestLine."Procurement Plan" := PurchLines."Procurement Plan";
                // ProcurementRequestLine."Procurement Plan Item" := PurchLines."Procurement Plan Item";
                // ProcurementRequestLine."Budget Line" := PurchLines."Procurement Plan";
                // ProcurementRequestLine."Global Dimension 1 Code" := PurchLines."Shortcut Dimension 1 Code";
                // ProcurementRequestLine."Amount LCY" := PurchLines.Amount;
                // ProcurementRequestLine.Select := PurchLines.Select2;
                // ProcurementRequestLine."Request Generated" := PurchLines."Request Generated";
                // //ProcurementRequestLine."Supplier Category":=PurchLines.Subtyp
                // //ProcurementRequestLine."Vendor No":=PurchLines.ve
                // ProcurementRequestLine.Ordered := PurchLines.Ordered;
                // ProcurementRequestLine."Order Date" := PurchLines."Order Creation date";
                // ProcurementRequestLine."Current Budget" := PurchLines."Procurement Plan";
                // ProcurementRequestLine.Specifications := PurchLines.Specifications;
                //ProcurementRequestLine.TRANSFERFIELDS(PurchLines);
                if not ProcurementRequestLine.Get(ProcurementRequest.No, LineNo) then
                    ProcurementRequestLine.Insert;
                // PurchLines."Request Generated" := true;
                PurchLines.Modify;
            until PurchLines.Next = 0;
        end;

        Message('Direct Procurement Document %1 Created successfully, Kindly Proceed to Document no. List', ProcurementRequest.No);
        // END;
    end;


    procedure GenerateRFQDoc(PurchHeader: Record "Purchase Header")
    var
        RequestRec: Record "Procurement Request";
        RequestLine: Record "Procurement Request Lines";
        RequestLines: Record "Purchase Line";
        RequisitionHeader: Record "Purchase Header";
        ProcurementRequest: Record "Procurement Request";
        ProcurementRequestLine: Record "Procurement Request Lines";
        LineNo: Integer;
        NoSeriesMgt: Codeunit NoSeriesManagement;
        PPSetup: Record "Purchases & Payables Setup";
        PurchLines: Record "Purchase Line";
    begin
        //WITH PurchLines DO BEGIN
        PurchHeader.Reset;
        //PurchLines.SETRANGE(PurchLines.Select2,TRUE);
        //PurchLines.SETRANGE(PurchLines."Request Generated",FALSE);
        PurchHeader.SetRange("No.", PurchHeader."No.");
        if PurchHeader.Find('-') then begin
            RequisitionHeader.Reset;
            RequisitionHeader.SetRange("No.", PurchHeader."No.");
            if RequisitionHeader.FindSet then begin
                //PurchLines.CALCFIELDS(PurchLines."Process Type");
                ProcurementRequest.Init;
                if PurchHeader."Process Type" = 'RFP' then
                    ProcurementRequest."Process Type" := ProcurementRequest."process type"::RFP
                else
                    ProcurementRequest."Process Type" := ProcurementRequest."process type"::RFQ;
                if not PPSetup.Get then
                    Error(Text000);
                case ProcurementRequest."Process Type" of
                    ProcurementRequest."process type"::RFQ:
                        begin
                            PPSetup.TestField("Request for Quotation Nos.");
                            ProcurementRequest.No := NoSeriesMgt.GetNextNo(PPSetup."Request for Quotation Nos.", Today, true);
                        end;
                    ProcurementRequest."process type"::RFP:
                        begin
                            PPSetup.TestField("Request for Proposals Nos.");
                            ProcurementRequest.No := NoSeriesMgt.GetNextNo(PPSetup."Request for Proposals Nos.", Today, true);
                        end;
                    ProcurementRequest."process type"::Tender:
                        begin
                            PPSetup.TestField("Tenders Nos");
                            ProcurementRequest.No := NoSeriesMgt.GetNextNo(PPSetup."Tenders Nos", Today, true);
                        end;
                end;
                ProcurementRequest.Title := PurchHeader.Description;
                ProcurementRequest."Requisition No" := PurchHeader."No.";
                ProcurementRequest."Issued Date" := Today;
                ProcurementRequest."Creation Date" := Today;
                //  ProcurementRequest."Procurement Plan No" := PurchLines."Procurement Plan";


                ProcurementRequest.Status := ProcurementRequest.Status::Open;
                //ProcurementRequest."Procurement Plan Item":=PurchLines."Procurement Plan Item";
                ProcurementRequest."User ID" := UserId;
                ProcurementRequest.Insert(true);
            end;
            //PurchLines.SETRANGE(PurchLines.Select2,TRUE);
            //PurchLines.SETRANGE(PurchLines."Request Generated",FALSE);
            PurchLines.Reset;
            PurchLines.SetRange("Document No.", PurchHeader."No.");
            if PurchLines.Find('-') then begin
                repeat
                    LineNo := LineNo + 10000;
                    ProcurementRequestLine.Init;
                    // ProcurementRequestLine.TRANSFERFIELDS(PurchLines);
                    ProcurementRequestLine."Requisition No" := ProcurementRequest.No;
                    //ProcurementRequestLine."Line No":=LineNo;
                    ProcurementRequestLine."Line No" := PurchLines."Line No.";
                    ProcurementRequestLine.Type := PurchLines.Type;
                    ProcurementRequestLine.No := PurchLines."No.";
                    ProcurementRequestLine.Description := PurchLines.Description;
                    ProcurementRequestLine.Quantity := PurchLines.Quantity;
                    ProcurementRequestLine."Unit of Measure" := PurchLines."Unit of Measure";
                    //ProcurementRequestLine."Unit Price":=PurchLines."Unit Price (LCY)";//commented by Morris
                    ProcurementRequestLine."Unit Price" := PurchLines."Direct Unit Cost";
                    ProcurementRequestLine.Amount := PurchLines."Line Amount";
                    // ProcurementRequestLine."Procurement Plan" := PurchLines."Procurement Plan";
                    // ProcurementRequestLine."Procurement Plan Item" := PurchLines."Procurement Plan Item";
                    // ProcurementRequestLine."Budget Line" := PurchLines."Procurement Plan";
                    // ProcurementRequestLine."Global Dimension 1 Code" := PurchLines."Shortcut Dimension 1 Code";
                    // ProcurementRequestLine."Amount LCY" := PurchLines.Amount;
                    // ProcurementRequestLine.Select := PurchLines.Select2;
                    // ProcurementRequestLine."Request Generated" := PurchLines."Request Generated";
                    // //ProcurementRequestLine."Supplier Category":=PurchLines.Subtyp
                    // //ProcurementRequestLine."Vendor No":=PurchLines.ve
                    // ProcurementRequestLine.Ordered := PurchLines.Ordered;
                    // ProcurementRequestLine."Order Date" := PurchLines."Order Creation date";
                    // ProcurementRequestLine."Current Budget" := PurchLines."Procurement Plan";
                    // ProcurementRequestLine.Specifications := PurchLines.Specifications;
                    ProcurementRequestLine."Job No." := PurchLines."Job No."; //*****Hunaina 28.11.2019 Job No. from PRN to RFQ
                    ProcurementRequestLine."Job Task No." := PurchLines."Job Task No."; //*****Hunaina 28.11.2019 Job Task No. from PRN to RFQ
                                                                                        //ProcurementRequestLine.TRANSFERFIELDS(PurchLines);
                    if not ProcurementRequestLine.Get(ProcurementRequest.No, LineNo) then
                        ProcurementRequestLine.Insert;
                    //  PurchLines."Request Generated" := true;
                    PurchLines.Modify;
                until PurchLines.Next = 0;
            end;
        end;

        Message('Document %1 Created successfully', ProcurementRequest.No);
        Page.Run(70026, ProcurementRequest);
        //END;
    end;


    procedure GenerateDirectDOC(PurchHeader: Record "Purchase Header")
    var
        RequestRec: Record "Procurement Request";
        RequestLine: Record "Procurement Request Lines";
        RequestLines: Record "Purchase Line";
        RequisitionHeader: Record "Purchase Header";
        ProcurementRequest: Record "Procurement Request";
        ProcurementRequestLine: Record "Procurement Request Lines";
        LineNo: Integer;
        NoSeriesMgt: Codeunit NoSeriesManagement;
        PPSetup: Record "Purchases & Payables Setup";
        PurchLines: Record "Purchase Line";
    begin
        //WITH PurchLines DO BEGIN
        PurchHeader.Reset;
        //PurchLines.SETRANGE(PurchLines.Select2,TRUE);
        //PurchLines.SETRANGE(PurchLines."Request Generated",FALSE);
        PurchHeader.SetRange("No.", PurchHeader."No.");
        if PurchHeader.Find('-') then begin

            RequisitionHeader.Reset;
            RequisitionHeader.SetRange("No.", PurchHeader."No.");
            if RequisitionHeader.FindSet then begin
                //PurchLines.CALCFIELDS(PurchLines."Process Type");
                ProcurementRequest.Init;

                ProcurementRequest."Process Type" := ProcurementRequest."process type"::Direct;
                if not PPSetup.Get then
                    Error(Text000);


                PPSetup.TestField("Direct Prcmnt Nos");
                ProcurementRequest.No := NoSeriesMgt.GetNextNo(PPSetup."Direct Prcmnt Nos", Today, true);
                //END;
            end;
            ProcurementRequest.Title := PurchHeader.Description;

            ProcurementRequest."Requisition No" := PurchHeader."No.";
            ProcurementRequest."Issued Date" := Today;
            ProcurementRequest."Creation Date" := Today;
            ProcurementRequest."Procurement Plan No" := PurchHeader."Procurement Plan";
            ProcurementRequest."Procurement Plan Item" := PurchHeader."Procurement Plan Item";
            ProcurementRequest."User ID" := UserId;
            ProcurementRequest.Insert(true);
            //END;
            PurchLines.Reset;
            PurchLines.SetRange("Document No.", PurchHeader."No.");
            if PurchLines.Find('-') then begin

                repeat
                    LineNo := LineNo + 10000;
                    ProcurementRequestLine.Init;
                    // ProcurementRequestLine.TRANSFERFIELDS(PurchLines);
                    ProcurementRequestLine."Requisition No" := ProcurementRequest.No;
                    ProcurementRequestLine."Line No" := LineNo;
                    ProcurementRequestLine.Type := PurchLines.Type;
                    ProcurementRequestLine.No := PurchLines."No.";
                    ProcurementRequestLine.Description := PurchLines.Description;
                    // ProcurementRequestLine.Specifications := PurchLines.Specifications;
                    // ProcurementRequestLine.Quantity := PurchLines.Quantity;
                    // ProcurementRequestLine."Unit of Measure" := PurchLines."Unit of Measure";
                    // ProcurementRequestLine."Unit Price" := PurchLines."Unit Price (LCY)";
                    // ProcurementRequestLine.Amount := PurchLines."Line Amount";
                    // ProcurementRequestLine."Procurement Plan" := PurchLines."Procurement Plan";
                    // ProcurementRequestLine."Procurement Plan Item" := PurchLines."Procurement Plan Item";
                    // ProcurementRequestLine."Budget Line" := PurchLines."Procurement Plan";
                    // ProcurementRequestLine."Global Dimension 1 Code" := PurchLines."Shortcut Dimension 1 Code";
                    // ProcurementRequestLine."Amount LCY" := PurchLines.Amount;
                    // ProcurementRequestLine.Select := PurchLines.Select2;
                    // ProcurementRequestLine."Request Generated" := PurchLines."Request Generated";
                    // //ProcurementRequestLine."Supplier Category":=PurchLines.Subtyp
                    // //ProcurementRequestLine."Vendor No":=PurchLines.ve
                    // ProcurementRequestLine.Ordered := PurchLines.Ordered;
                    // ProcurementRequestLine."Order Date" := PurchLines."Order Creation date";
                    // ProcurementRequestLine."Current Budget" := PurchLines."Procurement Plan";
                    ProcurementRequestLine."Job No." := PurchLines."Job No."; //*****Hunaina 28.11.2019 Job No. from PRN to RFQ
                    ProcurementRequestLine."Job Task No." := PurchLines."Job Task No."; //*****Hunaina 28.11.2019 Job Task No. from PRN to RFQ
                                                                                        //ProcurementRequestLine.Specifications:=PurchLines.Specifications;
                                                                                        //ProcurementRequestLine.TRANSFERFIELDS(PurchLines);
                    if not ProcurementRequestLine.Get(ProcurementRequest.No, LineNo) then
                        ProcurementRequestLine.Insert;
                    //  PurchLines."Request Generated" := true;
                    PurchLines.Modify;
                until PurchLines.Next = 0;
            end;
        end;
        Message('Direct Procurement Document %1 Created successfully, Kindly Proceed to Document no List', ProcurementRequest.No);
        Page.Run(70038, ProcurementRequest);
        // END;
    end;


    procedure StaffUnCommittment(var ImprestHeader: Record payments)
    var
        ImprestLines: Record "Imprest Lines";
        Committments: Record "Commitment Entries1";
        EntryNo: Integer;
        BudgetAmount: Decimal;
        Expenses: Decimal;
        BudgetAvailable: Decimal;
        CommittedAmount: Decimal;
        CommitmentEntries: Record "Commitment Entries1";
        GenLedSetup: Record "General Ledger Setup";
        GLAccount: Record "G/L Account";
        Customer: Record Customer;
        CashMngt: Record "Cash Management  SetupS";
        UncommittmentDate: Date;
    begin

        ImprestLines.Reset;
        if ImprestLines.FindFirst then begin
            if Committments.FindLast then
                EntryNo := Committments."Entry No";

            Committments.Reset;
            Committments.SetRange(Committments."Commitment No", ImprestHeader."No.");
            Committments.SetRange(Committments.Type, Committments.Type::Committed);
            if Committments.Find('-') then
                Committments.Type := Committments.Type::Reversal;
            Committments."Uncommittment Date" := Today;
            Committments.Modify;

        end;
    end;


    procedure ImprestmemoCommittment(var ImprestHeader: Record "Imprest Memo")
    var
        ImprestLines: Record "Imprest Lines";
        Committments: Record "Commitment Entries1";
        EntryNo: Integer;
        BudgetAmount: Decimal;
        Expenses: Decimal;
        BudgetAvailable: Decimal;
        CommittedAmount: Decimal;
        CommitmentEntries: Record "Commitment Entries1";
        GenLedSetup: Record "General Ledger Setup";
        GLAccount: Record "G/L Account";
        Customer: Record Customer;
        BudgetBal: Decimal;
        CommittedAmntSoFar: Decimal;
        WorkCode: Code[30];
        comm: Record "Commitment Entries1";
        EntryN: Integer;
    begin
        comm.Reset;
        if comm.FindLast then begin
            if comm."Entry No" = 0 then
                EntryNo := 1
            else
                EntryNo := comm."Entry No" + 1;
        end else
            EntryNo := 1;
        ImprestHeader.CalcFields(ImprestHeader."Total Subsistence Allowance");
        //ImprestHeader.CALCFIELDS  (ImprestHeader.("Total Subsistence Allowance")+("Total Casuals Cost"+"Total Fuel Costs")+("Total Maintenance Costs")+("Total Other Costs")+("Total Transport Costs"));
        BudgetAmount := ImprestHeader."Total Subsistence Allowance";
        Committments.Init;
        Committments."Commitment No" := ImprestHeader."No.";
        Committments.Type := Committments.Type::Committed;
        Committments."Commitment Type" := Committments."commitment type"::IMPREST;
        Committments."Commitment Date" := ImprestHeader.Date;
        Committments."Global Dimension 1 Code" := ImprestHeader."Shortcut Dimension 1 Code";
        Committments."Global Dimension 2 Code" := ImprestHeader."Shortcut Dimension 2 Code";
        Committments."User ID" := UserId;
        Committments."Document No." := ImprestHeader."No.";
        Committments."Account Type" := Committments."account type"::"G/L Account";
        Committments.Job := ImprestHeader.Job;
        //ImprestHeader.CALCFIELDS(ImprestHeader."Imprest Amount");
        Committments.Amount := BudgetAmount;
        Committments."Job Task No" := ImprestHeader."Job  Task";
        Committments."Account No." := ImprestHeader.Requestor;
        Committments."Account Name" := ImprestHeader."Requestor Name";
        Committments.Description := ImprestHeader.Subject;
        //Check whether line is committed.
        //IF NOT LineCommitted(PurchHeader."No.",PurchaseLines."No.",PurchaseLines."Line No.")THEN BEGIN
        Committments."Entry No" := EntryNo;
        Committments.Insert;
    end;


    procedure ImprestMemoUnCommittment(var ImprestHeader: Record "Imprest Memo")
    var
        ImprestLines: Record "Imprest Lines";
        Committments: Record "Commitment Entries1";
        EntryNo: Integer;
        BudgetAmount: Decimal;
        Expenses: Decimal;
        BudgetAvailable: Decimal;
        CommittedAmount: Decimal;
        CommitmentEntries: Record "Commitment Entries1";
        GenLedSetup: Record "General Ledger Setup";
        GLAccount: Record "G/L Account";
        Customer: Record Customer;
        CashMngt: Record "Cash Management  SetupS";
        UncommittmentDate: Date;
    begin

        /*ImprestHeader.RESET;
          IF ImprestHeader.FINDFIRST THEN BEGIN
            IF Committments.FINDLAST THEN
              EntryNo:=Committments."Entry No";*/

        Committments.Reset;
        Committments.SetRange(Committments."Document No.", ImprestHeader."No.");
        Committments.SetRange(Committments.Type, Committments.Type::Committed);
        if Committments.Find('-') then begin
            repeat
                //MESSAGE('hie');
                Committments.Type := Committments.Type::Reversal;
                Committments."Uncommittment Date" := Today;
                Committments.Modify;
            until Committments.Next = 0;
        end;

        //END;

    end;


    procedure GenerateOpenTenderDOC(PurchHeader: Record "Purchase Header")
    var
        RequestRec: Record "Procurement Request";
        RequestLine: Record "Procurement Request Lines";
        RequestLines: Record "Purchase Line";
        RequisitionHeader: Record "Purchase Header";
        ProcurementRequest: Record "Procurement Request";
        ProcurementRequestLine: Record "Procurement Request Lines";
        LineNo: Integer;
        NoSeriesMgt: Codeunit NoSeriesManagement;
        PPSetup: Record "Purchases & Payables Setup";
        PurchLines: Record "Purchase Line";
    begin
        //WITH PurchLines DO BEGIN
        PurchHeader.Reset;
        //PurchLines.SETRANGE(PurchLines.Select2,TRUE);
        //PurchLines.SETRANGE(PurchLines."Request Generated",FALSE);
        PurchHeader.SetRange("No.", PurchHeader."No.");
        if PurchHeader.Find('-') then begin

            RequisitionHeader.Reset;
            RequisitionHeader.SetRange("No.", PurchHeader."No.");
            if RequisitionHeader.FindSet then begin
                //PurchLines.CALCFIELDS(PurchLines."Process Type");
                ProcurementRequest.Init;

                ProcurementRequest."Process Type" := ProcurementRequest."process type"::Tender;
                if not PPSetup.Get then
                    Error(Text000);


                PPSetup.TestField("Tenders Nos");
                ProcurementRequest.No := NoSeriesMgt.GetNextNo(PPSetup."Tenders Nos", Today, true);
                //END;
            end;
            ProcurementRequest.Title := PurchHeader.Description;

            ProcurementRequest."Requisition No" := PurchHeader."No.";
            ProcurementRequest."Issued Date" := Today;
            ProcurementRequest."Creation Date" := Today;
            ProcurementRequest."Procurement Plan No" := PurchHeader."Procurement Plan";
            ProcurementRequest."Procurement Plan Item" := PurchHeader."Procurement Plan Item";
            ProcurementRequest."User ID" := UserId;
            ProcurementRequest.Insert(true);
            //END;
            PurchLines.Reset;
            PurchLines.SetRange("Document No.", PurchHeader."No.");
            if PurchLines.Find('-') then begin

                repeat
                    LineNo := LineNo + 10000;
                    ProcurementRequestLine.Init;
                    // ProcurementRequestLine.TRANSFERFIELDS(PurchLines);
                    ProcurementRequestLine."Requisition No" := ProcurementRequest.No;
                    ProcurementRequestLine."Line No" := LineNo;
                    ProcurementRequestLine.Type := PurchLines.Type;
                    ProcurementRequestLine.No := PurchLines."No.";
                    ProcurementRequestLine.Description := PurchLines.Description;
                    // ProcurementRequestLine.Specifications := PurchLines.Specifications;
                    // ProcurementRequestLine.Quantity := PurchLines.Quantity;
                    // ProcurementRequestLine."Unit of Measure" := PurchLines."Unit of Measure";
                    // ProcurementRequestLine."Unit Price" := PurchLines."Unit Price (LCY)";
                    // ProcurementRequestLine.Amount := PurchLines."Line Amount";
                    // ProcurementRequestLine."Procurement Plan" := PurchLines."Procurement Plan";
                    // ProcurementRequestLine."Procurement Plan Item" := PurchLines."Procurement Plan Item";
                    // ProcurementRequestLine."Budget Line" := PurchLines."Procurement Plan";
                    // ProcurementRequestLine."Global Dimension 1 Code" := PurchLines."Shortcut Dimension 1 Code";
                    // ProcurementRequestLine."Amount LCY" := PurchLines.Amount;
                    // ProcurementRequestLine.Select := PurchLines.Select2;
                    // ProcurementRequestLine."Request Generated" := PurchLines."Request Generated";
                    // //ProcurementRequestLine."Supplier Category":=PurchLines.Subtyp
                    // //ProcurementRequestLine."Vendor No":=PurchLines.ve
                    // ProcurementRequestLine.Ordered := PurchLines.Ordered;
                    // ProcurementRequestLine."Order Date" := PurchLines."Order Creation date";
                    // ProcurementRequestLine."Current Budget" := PurchLines."Procurement Plan";
                    ProcurementRequestLine."Job No." := PurchLines."Job No."; //*****Hunaina 28.11.2019 Job No. from PRN to RFQ
                    ProcurementRequestLine."Job Task No." := PurchLines."Job Task No."; //*****Hunaina 28.11.2019 Job Task No. from PRN to RFQ
                                                                                        //ProcurementRequestLine.Specifications:=PurchLines.Specifications;
                                                                                        //ProcurementRequestLine.TRANSFERFIELDS(PurchLines);
                    if not ProcurementRequestLine.Get(ProcurementRequest.No, LineNo) then
                        ProcurementRequestLine.Insert;
                    // PurchLines."Request Generated" := true;
                    PurchLines.Modify;
                until PurchLines.Next = 0;
            end;
        end;
        Message('Open Tender Document %1 Created successfully, Kindly Proceed to Document no List', ProcurementRequest.No);
        Page.Run(70036, ProcurementRequest);
        // END;
    end;


    procedure FnSendEmaiNotificationOnSupplierRegRequest(SupplierRequest: Record Contact)
    var
        SupplierReq: Record Contact;
        LastFieldNo: Integer;
        FooterPrinted: Boolean;
        FileDirectory: Text[100];
        FileName: Text[100];
        ReportID: Integer;
        ////"Object": Record "Object";
        Window: Dialog;
        RunOnceFile: Text[1000];
        TimeOut: Integer;
        Customer2: Record Customer;
        Cust: Record Customer;
        cr: Integer;
        lf: Integer;
        EmailBody: array[2] of Text[30];
        BodyText: Text[250];
        mymail: Codeunit Mail;
        DefaultPrinter: Text[200];
        WindowisOpen: Boolean;
        // FileDialog: Codeunit Mail;
        SendingDate: Date;
        SendingTime: Time;
        Counter: Integer;
        cu400: Codeunit Mail;
        DocLog: Record "Document E-mail Log";
        BranchName: Code[80];
        DimValue: Record "Dimension Value";
        SenderAddress: Text[100];
        CustEmail: Text[100];
        UserSetup: Record "User Setup";
        HRSetup: Record "Company Information";
        Emp: Record Vendor;
        PayrollMonth: Date;
        PayrollMonthText: Text[30];
        PayPeriodtext: Text;
        PayPeriod: Record "Payroll PeriodX";
        CompInfo: Record "Company Information";
        DateFilter: Text;
        FromDate: Date;
        ToDate: Date;
        FromDateS: Text;
        ToDateS: Text;
        vend: Record Vendor;
        StartDate: Date;
        EndDAte: Date;
        EmailVerifier: Codeunit Payroll3;
        IsEmailValid: Boolean;
        PPayableSetup: Record "Procurement Setup";
        RequesterName: Text[100];
        RequesterEmail: Text[100];
        emailhdr: Text[100];
        CompanyDetails: Text[250];
        SupplierDetails: Text[250];
        SenderMessage: Text[250];
    begin
        ///Notifying Procurement Team on supplier Request


        CompInfo.Get;
        HRSetup.Get;
        PPayableSetup.Get;



        RequesterEmail := SupplierRequest."E-Mail";
        RequesterName := SupplierRequest.Name;

        Window.Open('Notifying the Procurement Department...');

        WindowisOpen := true;


        Counter := Counter + 1;

        //Create message
        if HRSetup."E-Mail" = '' then
            Error('Please Contact the IT Admin to specify the E-mail address under Company Information Setup page!!');
        SenderAddress := HRSetup."E-Mail";

        if PPayableSetup."Default Proc Email Contact" = '' then
            Error('Please Contact the IT Admin to specify the Procurement Manager E-mail address under Purchases&Payable Setup page!!');
        CustEmail := PPayableSetup."Default Proc Email Contact";

        CompanyDetails := 'Dear Procurement Officer,' + '<BR></BR>' + CompInfo.Name + '<BR></BR>' + CompInfo.Address + '<BR></BR>' + CompInfo."Address 2" + '<BR></BR>' + CompInfo.City;
        SenderMessage := '<BR>This is to notify you that there has been a request for Registration via e-procurement for your action</BR>';
        SupplierDetails := 'Registration Request Reference No:' + SupplierRequest."No." + '<BR></BR>' + 'Company Name:' + SupplierRequest.Name + '<BR></BR>' +
        'Tax Registration (PIN) No:' + SupplierRequest."VAT Registration No." + '<BR></BR>' + 'Primary Email:' + SupplierRequest."E-Mail" + '<BR></BR>' +
        'Mobile Phone No:' + SupplierRequest."Phone No." + '<BR></BR>';
        if CustEmail = '' then
            exit;

        //MESSAGE:='This is to notify you that there has been a request for Registration ' +  SupplierRequest."No." + ' From Supplier'+ SupplierRequest.Name;
        emailhdr := 'Vendor e-Registration Request Reference No:' + SupplierRequest."No.";

        // //cu400.CreateMessage(CompInfo.Name, SenderAddress, CustEmail, emailhdr,
        // 'Procurement Officer,' + '<BR></BR>' + SenderMessage + SupplierDetails, true);

        // ////cu400.AddCC(RequesterEmail);

        // //cu400.AddBodyline(CompanyDetails);


        // //cu400.Send;
        SendingDate := Today;
        SendingTime := Time;

        Sleep(1000);
        Window.Close;
    end;


    procedure FnSendEmaiNotificationOnSupplierRegRequestAcknowledge(SupplierRequest: Record Contact)
    var
        SupplierReq: Record Contact;
        LastFieldNo: Integer;
        FooterPrinted: Boolean;
        FileDirectory: Text[100];
        FileName: Text[100];
        ReportID: Integer;
        // //"Object": Record "Object";
        Window: Dialog;
        RunOnceFile: Text[1000];
        TimeOut: Integer;
        Customer2: Record Customer;
        Cust: Record Customer;
        cr: Integer;
        lf: Integer;
        EmailBody: array[2] of Text[30];
        BodyText: Text[250];
        mymail: Codeunit Mail;
        DefaultPrinter: Text[200];
        WindowisOpen: Boolean;
        FileDialog: Codeunit Mail;
        SendingDate: Date;
        SendingTime: Time;
        Counter: Integer;
        cu400: Codeunit Mail;
        DocLog: Record "Document E-mail Log";
        BranchName: Code[80];
        DimValue: Record "Dimension Value";
        SenderAddress: Text[100];
        CustEmail: Text[100];
        UserSetup: Record "User Setup";
        HRSetup: Record "Company Information";
        Emp: Record Vendor;
        PayrollMonth: Date;
        PayrollMonthText: Text[30];
        PayPeriodtext: Text;
        PayPeriod: Record "Payroll PeriodX";
        CompInfo: Record "Company Information";
        DateFilter: Text;
        FromDate: Date;
        ToDate: Date;
        FromDateS: Text;
        ToDateS: Text;
        vend: Record Vendor;
        StartDate: Date;
        EndDAte: Date;
        EmailVerifier: Codeunit Payroll3;
        IsEmailValid: Boolean;
        PPayableSetup: Record "Procurement Setup";
        RequesterName: Text[100];
        RequesterEmail: Text[100];
        emailhdr: Text[100];
        CompanyDetails: Text[250];
        SupplierDetails: Text[250];
        SenderMessage: Text[1000];
        ProcNote: Text[1000];
        LoginDetails: Text[250];
        PortalUser: Record "Dynasoft Portal User";
        Password: Text[50];
        ActivationDetails: Text[1000];
    begin
        ///Notifying Procurement Team on supplier Request


        CompInfo.Get;
        HRSetup.Get;
        PPayableSetup.Get;



        RequesterEmail := SupplierRequest."E-Mail";
        RequesterName := SupplierRequest.Name;

        Window.Open('Notifying the Sender...');

        WindowisOpen := true;


        Counter := Counter + 1;


        //Create message
        if HRSetup."E-Mail" = '' then
            Error('Please Contact the IT Admin to specify the E-mail address under Company Information Setup page!!');
        SenderAddress := HRSetup."E-Mail";

        if PPayableSetup."Default Proc Email Contact" = '' then
            Error('Please Contact the IT Admin to specify the Procurement Manager E-mail address under Purchases&Payable Setup page!!');
        CustEmail := PPayableSetup."Default Proc Email Contact";

        CompanyDetails := 'Dear Sir/Madam,';
        SenderMessage := '<BR>Thank you for using our e-Procurement Portal which has been established to provide you with easy access to our online business services such as supplier registration, Prequalification and Tendering.' +
        'This email is to acknowledge that your Request for registration as a supplier, done on:' + Format(SupplierRequest."Last Date Modified") +
        ' has been received.' + '<BR><BR>' + 'Find below your registration details:' + '<BR></BR>';

        SupplierDetails := 'Registration Request Reference No: ' + SupplierRequest."No." + '<BR></BR>' + 'Company Name: ' + SupplierRequest.Name + '<BR></BR>' +
        'Tax Registration No: ' + SupplierRequest."VAT Registration No." + '<BR></BR>' + 'Primary Email: ' + SupplierRequest."E-Mail" + '<BR></BR>' +
        'Mobile Phone No:' + SupplierRequest."Phone No." + '<BR></BR>';


        /*ProcNote:='Please note that the Procurement Office shall review your request and once approved, you shall receive an account activation email and a link to the Confidential Business Questionnaire for you to complete your registration.'+
        '<BR></BR>'+'If you require any assistance, please contact our Procurement team by Phone'+ HRSetup."Phone No."+'or vendor support team via Email:'+PPayableSetup."Default Proc Email Contact";*/
        ProcNote := 'If you require any assistance, please contact our Procurement team by Phone ' + HRSetup."Phone No." + ' or vendor support team via Email :' + PPayableSetup."Default Proc Email Contact" +
        '<BR><BR>Regards,' +
        '<BR>Supply management' +
        '<BR>Kenya Rural Roads Authority' +
        '<BR><BR>Note: This is a system generated mail. Please DO NOT reply to it.';


        if CustEmail = '' then
            exit;

        //MESSAGE:='This is to notify you that there has been a request for Registration ' +  SupplierRequest."No." + ' From Supplier'+ SupplierRequest.Name;
        emailhdr := 'Vendor e-Registration acknowledgment (Reference No:' + SupplierRequest."No." + ')';

        // //cu400.CreateMessage(CompInfo.Name, SenderAddress, CustEmail, emailhdr,
        // //CompanyDetails + '<BR></BR>' + SenderMessage + SupplierDetails + LoginDetails + ActivationDetails, true);

        // //cu400.AddCC(RequesterEmail);

        // //cu400.AddBodyline(ProcNote);


        // //cu400.Send;
        SendingDate := Today;
        SendingTime := Time;

        Sleep(1000);
        Window.Close;

    end;


    procedure FnSendEmaiNotificationOnSupplierAccountActivation(Vendor: Record Contact)
    var
        SupplierReq: Record Contact;
        LastFieldNo: Integer;
        FooterPrinted: Boolean;
        FileDirectory: Text[100];
        FileName: Text[100];
        ReportID: Integer;
        // //"Object": Record "Object";
        Window: Dialog;
        RunOnceFile: Text[1000];
        TimeOut: Integer;
        Customer2: Record Customer;
        Cust: Record Customer;
        cr: Integer;
        lf: Integer;
        EmailBody: array[2] of Text[30];
        BodyText: Text[250];
        mymail: Codeunit Mail;
        DefaultPrinter: Text[200];
        WindowisOpen: Boolean;
        FileDialog: Codeunit Mail;
        SendingDate: Date;
        SendingTime: Time;
        Counter: Integer;
        cu400: Codeunit Mail;
        DocLog: Record "Document E-mail Log";
        BranchName: Code[80];
        DimValue: Record "Dimension Value";
        SenderAddress: Text[100];
        CustEmail: Text[100];
        UserSetup: Record "User Setup";
        HRSetup: Record "Company Information";
        Emp: Record Vendor;
        PayrollMonth: Date;
        PayrollMonthText: Text[30];
        PayPeriodtext: Text;
        PayPeriod: Record "Payroll PeriodX";
        CompInfo: Record "Company Information";
        DateFilter: Text;
        FromDate: Date;
        ToDate: Date;
        FromDateS: Text;
        ToDateS: Text;
        vend: Record Vendor;
        StartDate: Date;
        EndDAte: Date;
        EmailVerifier: Codeunit Payroll3;
        IsEmailValid: Boolean;
        PPayableSetup: Record "Procurement Setup";
        RequesterName: Text[100];
        RequesterEmail: Text[100];
        emailhdr: Text[100];
        CompanyDetails: Text[250];
        SupplierDetails: Text[1000];
        SenderMessage: Text[1000];
        ProcNote: Text[1000];
        LoginDetails: Text[1000];
        PortalUser: Record "Dynasoft Portal User";
        Password: Text[50];
        ActivationDetails: Text[1000];
    begin
        ///Notifying Procurement Team on supplier Request


        CompInfo.Get;
        HRSetup.Get;
        PPayableSetup.Get;



        RequesterEmail := Vendor."E-Mail";
        RequesterName := Vendor.Name;

        Window.Open('Notifying the Sender...');

        WindowisOpen := true;


        Counter := Counter + 1;
        PortalUser.Reset;
        PortalUser.SetRange("User Name", Vendor."E-Mail");
        if PortalUser.FindSet then
            Password := PortalUser."Password Value";

        //Create message
        if HRSetup."E-Mail" = '' then
            Error('Please Contact the IT Admin to specify the E-mail address under Company Information Setup page!!');
        SenderAddress := HRSetup."E-Mail";

        if PPayableSetup."Default Proc Email Contact" = '' then
            Error('Please Contact the IT Admin to specify the Procurement Manager E-mail address under Purchases&Payable Setup page!!');
        CustEmail := PPayableSetup."Default Proc Email Contact";

        CompanyDetails := 'Dear ,' + Vendor.Name + '<BR></BR>';
        SenderMessage := '<BR>Please note that your Vendor account has been created on our System, with the following key registration details:</BR>' + '<BR></BR>';
        SupplierDetails := '<BR>Registration Request Reference No:' + Vendor."No." + '</BR>' + '<BR> Name:' + Vendor.Name + '</BR>' +
        '<BR>Tax Registration (PIN) No:' + Vendor."VAT Registration No." + '</BR>' +
        '<BR>Mobile Phone No:' + Vendor."Phone No." + '</BR>';
        LoginDetails := 'We have also created your portal access account with the following login credentials:' + '<BR></BR>' +
        'User Name:' + Vendor."E-Mail" + '<BR></BR>' + 'Password:' + Password + '<BR>To access our portal and complete your registration click on the link below, using your email address: </BR>' + Vendor."E-Mail";
        ActivationDetails := '<BR>Once you access our portal, you shall be required to complete your supplier profile.';


        ProcNote := '<BR></BR>' + 'If you require any assistance, please contact our Supply chain management team by Phone' + HRSetup."Phone No." + 'or vendor support team via Email:' + PPayableSetup."Default Proc Email Contact";

        if CustEmail = '' then
            exit;

        //MESSAGE:='This is to notify you that there has been a request for Registration ' +  SupplierRequest."No." + ' From Supplier'+ SupplierRequest.Name;
        emailhdr := 'e-Procurement Account Activation (Vendor Account No:' + vend."No." + ')';

        // //cu400.CreateMessage(CompInfo.Name, SenderAddress, CustEmail, emailhdr,
        // //CompanyDetails + '<BR></BR>' + SenderMessage + SupplierDetails + LoginDetails + ActivationDetails, true);

        // //cu400.AddCC(RequesterEmail);

        // //cu400.AddBodyline(ProcNote);


        // //cu400.Send;
        SendingDate := Today;
        SendingTime := Time;

        Sleep(1000);
        Window.Close;
    end;


    procedure "...................Invitation For Prequalification......................."()
    begin
    end;


    procedure SuggestProcurementCategories(IFP: Record "Request For Information")
    var
        ProcCategories: Record "Procurement Category";
        IFPProcCategory: Record "RFI Prequalification Category";
    begin
        IFPProcCategory.Reset;
        IFPProcCategory.SetRange("Document No", IFP.Code);
        if not IFPProcCategory.FindSet then begin
            ProcCategories.Reset;
            if IFP."Procurement Type" <> '' then
                ProcCategories.SetRange("Procurement Type", IFP."Procurement Type");
            ProcCategories.SetRange(Blocked, false);
            if ProcCategories.FindSet then begin
                repeat
                    IFPProcCategory."Document Type" := IFP."Document Type";
                    IFPProcCategory."Document No" := IFP.Code;
                    IFPProcCategory."Prequalification Category ID" := ProcCategories.Code;
                    IFPProcCategory.Validate("Prequalification Category ID");
                    if ProcCategories."Preferred Vendor Cluster" = ProcCategories."preferred vendor cluster"::Special then
                        IFPProcCategory."Special Group Reservation" := true;
                    IFPProcCategory."Restricted RC Code" := ProcCategories."Responsibility Center Code";
                    IFPProcCategory."Applicable Location" := ProcCategories."Applicable Location";
                    IFPProcCategory."Period End Date" := IFP."Period End Date";
                    IFPProcCategory."Period Start Date" := IFP."Period Start Date";
                    IFPProcCategory.Insert(true);
                until ProcCategories.Next = 0;
            end;
        end;
    end;


    procedure SuggestRequiredDoc(IFP: Record "Request For Information")
    var
        ProcSetup: Record "Procurement Setup";
        ProccDocumentTempLine: Record "Procurement Doc Template Line";
        RFIRequiredDoc: Record "RFI Required Document";
    begin
        ProcSetup.Get;
        ProcSetup.TestField("Default Procurement Template");
        RFIRequiredDoc.Reset;
        RFIRequiredDoc.SetRange("Document No", IFP.Code);
        if not RFIRequiredDoc.FindSet then begin
            ProccDocumentTempLine.Reset;
            ProccDocumentTempLine.SetRange("Template ID", ProcSetup."Default Procurement Template");
            ProccDocumentTempLine.SetRange("Procurement Process", ProccDocumentTempLine."procurement process"::Prequalification);
            if ProccDocumentTempLine.FindSet then begin
                repeat
                    RFIRequiredDoc.Init;
                    RFIRequiredDoc."Document No" := IFP.Code;
                    RFIRequiredDoc."Document Type" := IFP."Document Type";
                    RFIRequiredDoc."Procurement Document Type ID" := ProccDocumentTempLine."Procurement Document Type";
                    RFIRequiredDoc.Description := ProccDocumentTempLine.Description;
                    RFIRequiredDoc."Requirement Type" := ProccDocumentTempLine."Requirement Type";
                    RFIRequiredDoc.Insert(true);
                until ProccDocumentTempLine.Next = 0;
            end;

        end;

        RFICategory.Reset;
        RFICategory.SetRange("Document No", IFP.Code);
        if RFICategory.FindSet then begin
            repeat
                RFICategoryRequirement.Reset;
                RFICategoryRequirement.SetRange("Category ID", RFICategory."Prequalification Category ID");
                if RFICategoryRequirement.FindSet then begin
                    RFIRequiredDoc.Init;
                    RFIRequiredDoc."Document Type" := IFP."Document Type";
                    RFIRequiredDoc."Document No" := IFP.Code;
                    RFIRequiredDoc."Procurement Document Type ID" := RFICategoryRequirement."Requirement Code";
                    RFIRequiredDoc.Description := RFICategoryRequirement.Description;
                    RFIRequiredDoc."Requirement Type" := RFICategoryRequirement."Requirement Type";
                    RFIRequiredDoc."Specialized Provider Req" := true;
                    RFIRequiredDoc."Linked To category No" := RFICategory."Prequalification Category ID";
                    // RFIRequiredDoc .Insert(true);
                end;

            until RFICategory.Next = 0;
        end;
    end;


    procedure SuggestRequiredDocIFR(IFP: Record "Request For Information")
    var
        ProcSetup: Record "Procurement Setup";
        ProccDocumentTempLine: Record "Procurement Doc Template Line";
        RFIRequiredDoc: Record "RFI Required Document";
    begin
        ProcSetup.Get;
        ProcSetup.TestField("Default Procurement Template");
        RFIRequiredDoc.Reset;
        RFIRequiredDoc.SetRange("Document No", IFP.Code);
        if not RFIRequiredDoc.FindSet then begin
            ProccDocumentTempLine.Reset;
            ProccDocumentTempLine.SetRange("Template ID", ProcSetup."Default Procurement Template");
            ProccDocumentTempLine.SetRange("Procurement Process", ProccDocumentTempLine."procurement process"::Registration);
            if ProccDocumentTempLine.FindSet then begin
                repeat
                    RFIRequiredDoc.Init;
                    RFIRequiredDoc."Document No" := IFP.Code;
                    RFIRequiredDoc."Document Type" := IFP."Document Type";
                    RFIRequiredDoc."Procurement Document Type ID" := ProccDocumentTempLine."Procurement Document Type";
                    RFIRequiredDoc.Description := ProccDocumentTempLine.Description;
                    RFIRequiredDoc."Requirement Type" := ProccDocumentTempLine."Requirement Type";
                    RFIRequiredDoc.Insert(true);
                until ProccDocumentTempLine.Next = 0;
            end;

        end;

        RFICategory.Reset;
        RFICategory.SetRange("Document No", IFP.Code);
        if RFICategory.FindSet then begin
            repeat
                RFICategoryRequirement.Reset;
                RFICategoryRequirement.SetRange("Category ID", RFICategory."Prequalification Category ID");
                if RFICategoryRequirement.FindSet then begin
                    RFIRequiredDoc.Init;
                    RFIRequiredDoc."Document Type" := IFP."Document Type";
                    RFIRequiredDoc."Document No" := IFP.Code;
                    RFIRequiredDoc."Procurement Document Type ID" := RFICategoryRequirement."Requirement Code";
                    RFIRequiredDoc.Description := RFICategoryRequirement.Description;
                    RFIRequiredDoc."Requirement Type" := RFICategoryRequirement."Requirement Type";
                    RFIRequiredDoc."Specialized Provider Req" := true;
                    RFIRequiredDoc."Linked To category No" := RFICategory."Prequalification Category ID";
                    // RFIRequiredDoc .Insert(true);
                end;

            until RFICategory.Next = 0;
        end;
    end;


    procedure PublishIFP(IFP: Record "Request For Information")
    var
        Text0001: label 'The Invitation for Prequalification Voucher %1 should be fully approved';
        RFI2: Record "Request For Information";
        RFILines2: Record "RFI Prequalification Category";
        RFIDocs2: Record "RFI Required Document";
        RFIReqDocument: Record "RFI Required Document";
        RFIAllocation: Record "RFI Responsibility Center";
        RFI3: Record "Request For Information";
        ProcurementCat: Record "Procurement Category";
        RFIPlines: Record "RFI Prequalification Category";
    begin
        if IFP.Status <> IFP.Status::Released then
            Error(Text0001, IFP.Code);

        //Publish
        RFIAllocation.Reset;
        RFIAllocation.SetRange("Document No", IFP.Code);
        if RFIAllocation.FindSet then begin
            repeat
                RFI2.Reset;
                RFI2.SetRange(Type, RFI2.Type::"Sub IFP");
                RFI2.SetRange("Linked to IFP No.", IFP.Code);
                RFI2.SetRange("Responsibility Centre", RFIAllocation."Responsibility Center ID");
                RFI2.SetRange(Constituency, RFIAllocation."Constituency Code");
                if not RFI2.FindSet then begin
                    ProcurementSetup.Get;
                    RFI3.Init;
                    RFI3.Code := objNoSeriesManagement.GetNextNo(ProcurementSetup."IFP Nos.", Today, true);
                    RFI3.Description := RFIAllocation.Description + ' Region ' + RFIAllocation.Constituency + ''// ' Constituency '
                     + IFP.Description;
                    RFI3."Document Type" := IFP."Document Type";
                    RFI3.Type := RFI3.Type::"Sub IFP";
                    RFI3.Status := RFI3.Status::Released;
                    RFI3.Published := true;
                    RFI3."Date/Time Published" := CurrentDatetime;
                    RFI3."RFI Document Status" := RFI3."rfi document status"::Published;
                    RFI3."Document Date" := Today;
                    RFI3."External Document No" := IFP."External Document No";
                    RFI3."Tender Summary" := IFP."Tender Summary";
                    RFI3."Primary Target Vendor Cluster" := IFP."Primary Target Vendor Cluster";
                    RFI3."Period End Date" := IFP."Period End Date";
                    RFI3."Responsibility Centre" := RFIAllocation."Responsibility Center ID";
                    RFI3.Validate("Responsibility Centre");
                    RFI3.Constituency := RFIAllocation."Constituency Code";
                    RFI3.Validate(Constituency);
                    RFI3."Period Start Date" := IFP."Period Start Date";
                    RFI3."Evaluation Committee" := IFP."Evaluation Committee";
                    RFI3."Procurement Document Template" := IFP."Procurement Document Template";
                    RFI3."Submission End Date" := IFP."Submission End Date";
                    RFI3."Submission End Time" := IFP."Submission End Time";
                    RFI3."Submission Start Date" := IFP."Submission Start Date";
                    RFI3."Submission Start Time" := IFP."Submission Start Time";
                    RFI3."Tender Box Location Code" := IFP."Tender Box Location Code";
                    RFI3."Prequalification Charge Code" := IFP."Prequalification Charge Code";
                    RFI3."RFI Scoring Template" := IFP."RFI Scoring Template";
                    RFI3."Charge Amount (LCY)" := IFP."Charge Amount (LCY)";
                    RFI3."Charge Bank A/C No" := IFP."Charge Bank A/C No";
                    RFI3."Charge Bank Branch" := IFP."Charge Bank Branch";
                    RFI3."Charge Bank Code" := IFP."Charge Bank Code";
                    RFI3."Linked to IFP No." := IFP.Code;
                    RFI3."Document Status" := RFI3."document status"::Submitted;
                    RFI3.Insert(true);
                    RFILines2.Init;
                    RFILines2."Document Type" := RFI3."Document Type";
                    RFILines2."Document No" := RFI3.Code;
                    RFILines2."Prequalification Category ID" := RFIAllocation."Procurement Category";
                    RFILines2."Period Start Date" := IFP."Period Start Date";
                    RFILines2."Period End Date" := IFP."Period End Date";
                    RFILines2."Submission End Date" := IFP."Submission End Date";
                    RFILines2."Submission End Time" := IFP."Submission End Time";
                    RFILines2."Submission Start Date" := IFP."Submission Start Date";
                    RFILines2."Submission Start Time" := IFP."Submission Start Time";
                    ProcurementCat.Reset;
                    ProcurementCat.SetRange(Code, RFIAllocation."Procurement Category");
                    if ProcurementCat.FindSet then
                        RFILines2.Description := ProcurementCat.Description;
                    RFILines2."Procurement Type" := ProcurementCat."Procurement Type";
                    //RFILines2 .Insert(true);
                    RFIReqDocument.Reset;
                    RFIReqDocument.SetRange("Document No", IFP.Code);
                    RFIReqDocument.SetRange("Document Type", IFP."Document Type");
                    if RFIReqDocument.FindSet then begin
                        repeat
                            RFIDocs2.Init;
                            RFIDocs2."Document No" := RFI3.Code;
                            RFIDocs2."Document Type" := RFI3."Document Type";
                            RFIDocs2."Procurement Document Type ID" := RFIReqDocument."Procurement Document Type ID";
                            RFIDocs2.Description := RFIReqDocument.Description;
                            RFIDocs2."Requirement Type" := RFIReqDocument."Requirement Type";
                            RFIDocs2."Special Group Requirement" := RFIReqDocument."Special Group Requirement";
                            RFIDocs2."Specialized Provider Req" := RFIReqDocument."Specialized Provider Req";
                            RFIDocs2."Track Certificate Expiry" := RFIReqDocument."Track Certificate Expiry";
                            RFIDocs2."Linked To category No" := RFIReqDocument."Linked To category No";
                            RFIDocs2.Insert(true);

                        until RFIReqDocument.Next = 0;
                    end;

                end else begin
                    //  IF RFI2.FINDSET THEN BEGIN
                    // ERROR('There already existing Publication of the IFP');
                    //      RFILines2.RESET;
                    //      RFILines2.SETRANGE("Document Type",IFP."Document Type");
                    //      RFILines2.SETRANGE("Document No",)
                    RFIPlines.Reset;
                    RFIPlines.SetRange("Document Type", RFI2."Document Type");
                    RFIPlines.SetRange("Document No", RFI2.Code);
                    RFIPlines.SetRange("Prequalification Category ID", RFIAllocation."Procurement Category");
                    //RFIPlines.SETRANGE()
                    if not RFIPlines.FindSet then begin
                        RFILines2.Init;
                        RFILines2."Document Type" := RFI2."Document Type";
                        RFILines2."Document No" := RFI2.Code;
                        RFILines2."Prequalification Category ID" := RFIAllocation."Procurement Category";
                        RFILines2."Period Start Date" := IFP."Period Start Date";
                        RFILines2."Period End Date" := IFP."Period End Date";
                        RFILines2."Submission End Date" := IFP."Submission End Date";
                        RFILines2."Submission End Time" := IFP."Submission End Time";
                        RFILines2."Submission Start Date" := IFP."Submission Start Date";
                        RFILines2."Submission Start Time" := IFP."Submission Start Time";
                        ProcurementCat.Reset;
                        ProcurementCat.SetRange(Code, RFIAllocation."Procurement Category");
                        if ProcurementCat.FindSet then
                            RFILines2.Description := ProcurementCat.Description;
                        RFILines2."Procurement Type" := ProcurementCat."Procurement Type";
                        RFILines2.Insert(true);
                    end;
                    ///
                end;
            until RFIAllocation.Next = 0;

        end;




        // objProcsetup.GET;
        // Contact.INIT;
        // Contact."No.":=objNoSeriesManagement.GetNextNo(objProcsetup."Request For Registration Nos",TODAY,TRUE);
        IFP.Published := true;
        IFP."Date/Time Published" := CurrentDatetime;
        IFP."RFI Document Status" := IFP."rfi document status"::Published;
        IFP."Document Status" := IFP."document status"::Submitted;
        IFP.Modify;
        Message('Published Successfully');
    end;


    procedure CloseIFP(IFP: Record "Request For Information")
    var
        Text0001: label 'The IFP voucher is still Active for submission';
        IFPResponse: Record "RFI Response";
        IFPResponseLine: Record "IFP Response Line";
        VendPrequalificationEntry: Record "Vendor Prequalification Entry";
    begin
        if IFP."Submission End Date" > Today then
            Error(Text0001);

        IFPResponse.Reset;
        IFPResponse.SetRange("RFI Document No.", IFP.Code);
        if IFPResponse.FindSet then begin
            repeat
                IFPResponseLine.Reset;
                IFPResponseLine.SetRange("Document No.", IFPResponse."Document No.");
                if IFPResponseLine.FindSet then begin
                    repeat
                        //all lines should be assigned final score
                        IFPResponseLine.TestField("Evaluation Score %");
                        if IFPResponseLine."Evaluation Decision" = IFPResponseLine."evaluation decision"::Pass then begin
                            VendPrequalificationEntry.Reset;
                            VendPrequalificationEntry.SetRange("Vendor No.", IFPResponseLine."Vendor No.");
                            VendPrequalificationEntry.SetRange("Procurement Category Code", IFPResponseLine."Procurement Category");
                            if not VendPrequalificationEntry.FindSet then begin
                                VendPrequalificationEntry.Init;
                                VendPrequalificationEntry."IFP No." := IFPResponseLine."RFI Document No.";
                                VendPrequalificationEntry."Vendor No." := IFPResponseLine."Vendor No.";
                                //VendPrequalificationEntry."Procurement Type":=IFPResponseLine.p
                                VendPrequalificationEntry."Procurement Category Code" := IFPResponseLine."Procurement Category";
                                VendPrequalificationEntry.Description := IFPResponseLine."Category Description";
                                VendPrequalificationEntry."Start Date" := IFPResponseLine."Prequalification Start Date";
                                VendPrequalificationEntry."End Date" := IFPResponseLine."Prequalification End Date";
                                VendPrequalificationEntry.Insert(true)
                            end;
                        end;

                    until IFPResponseLine.Next = 0;
                end;
                IFPResponse."Document Status" := IFPResponse."document status"::Closed;
                IFPResponse.Modify(true);
            until IFPResponse.Next = 0;
        end;

        //IFP."RFI Document Status":=IFP."RFI Document Status"::"Submissions Closed";
        IFP."RFI Document Status" := IFP."rfi document status"::Closed;
        IFP.Modify(true);
        Message('Invitation for Prequalification %1 has been closed successfuly', IFP.Code);
    end;


    procedure ActivateEvaluationsIFP(IFP: Record "Request For Information")
    var
        Text0001: label 'The IFP voucher is still Active for submission';
        IFPResponse: Record "RFI Response";
    begin
        if IFP."Submission End Date" > Today then
            Error(Text0001);

        //IFP."RFI Document Status":=IFP."RFI Document Status"::"Submissions Closed";


        //Activate Evaluations
        IFPResponse.Reset;
        IFPResponse.SetRange("RFI Document No.", IFP.Code);
        if IFPResponse.FindSet then begin
            repeat
                IFPResponse."Document Status" := IFPResponse."document status"::Evaluation;
                IFPResponse.Modify(true);
            until IFPResponse.Next = 0;
        end;
        IFP."RFI Document Status" := IFP."rfi document status"::"Evaluation Stage";
        IFP.Modify;
        Message('Evaluations for Prequalification %1 has been actviated Successfully Proceed to List of IFP Response evaluation', IFP.Code);
    end;


    procedure CancelIFP(IFP: Record "Request For Information")
    var
        Text0001: label 'The IFP voucher is still Active for submission';
        IFPResponse: Record "RFI Response";
        IFPResponseLine: Record "IFP Response Line";
        VendPrequalificationEntry: Record "Vendor Prequalification Entry";
    begin
        if IFP."Submission End Date" > Today then
            Error(Text0001);
        IFPResponse.Reset;
        IFPResponse.SetRange("RFI Document No.", IFP.Code);
        if IFPResponse.FindSet then begin
            repeat
                IFPResponseLine.Reset;
                IFPResponseLine.SetRange("Document No.", IFPResponse."Document No.");
                if IFPResponseLine.FindSet then begin
                    repeat
                        //all lines should be assigned final score
                        IFPResponseLine.TestField("Evaluation Score %");
                        if IFPResponseLine."Evaluation Decision" = IFPResponseLine."evaluation decision"::Pass then begin
                            VendPrequalificationEntry.Reset;
                            VendPrequalificationEntry.SetRange("Vendor No.", IFPResponseLine."Vendor No.");
                            VendPrequalificationEntry.SetRange("Procurement Category Code", IFPResponseLine."Procurement Category");
                            if VendPrequalificationEntry.FindSet then begin
                                VendPrequalificationEntry.Blocked := true;
                                VendPrequalificationEntry.Modify(true)
                            end;
                        end;

                    until IFPResponseLine.Next = 0;
                end;
                IFPResponse."Document Status" := IFPResponse."document status"::Cancelled;
                IFPResponse.Modify(true);
            until IFPResponse.Next = 0;
        end;

        //IFP."RFI Document Status":=IFP."RFI Document Status"::"Submissions Closed";
        IFP."RFI Document Status" := IFP."rfi document status"::Canceled;
        IFP.Modify(true);
        Message('Invitation for Prequalification %1 has been closed successfuly', IFP.Code);
    end;

    local procedure ".......Vendor Debarment....................."()
    begin
    end;


    procedure PostVendDebarment(VendDebarment: Record "Vendor Debarment Voucher")
    var
        VendDebarmentLines: Record "Vendor Debarment Voucher Line";
        Vendor: Record Vendor;
        VendDebarmentEntries: Record "Vendor Debarment Entry";
    begin
        VendDebarmentLines.Reset;
        VendDebarmentLines.SetRange("Document No", VendDebarment."Document No");
        if VendDebarmentLines.FindSet then begin
            repeat
                //all lines must have debarment reason code
                VendDebarmentLines.TestField("Debarment Reason Code");
                //if source type is internal all lines should have vendor no.
                // if VendDebarment."Source Type" = VendDebarment."source type"::"Internal(Procuring Entity)" then
                //     VendDebarmentLines.TestField("Vendor No.");

                Vendor.Reset;
                Vendor.SetRange("No.", VendDebarmentLines."Vendor No.");
                if Vendor.FindSet then begin
                    Vendor.Debarred := true;
                    Vendor."Debarment Voucher No" := VendDebarment."Document No";
                    Vendor."Debarment Expiry Date" := VendDebarmentLines."Ineligibility End Date";
                    Vendor.Blocked := Vendor.Blocked::All;
                    Vendor.Modify;
                end;

                VendDebarmentEntries.Reset;
                VendDebarmentEntries.SetRange("Source Voucher No.", VendDebarment."Document No");
                VendDebarmentEntries.SetRange("Vendor No.", VendDebarmentLines."Vendor No.");
                if not VendDebarmentEntries.FindSet then begin
                    VendDebarmentEntries.Init;
                    VendDebarmentEntries."Document Type" := VendDebarmentLines."Document Type";
                    VendDebarmentEntries."Source Voucher No." := VendDebarmentLines."Document No";
                    VendDebarmentEntries."Entry no" := VendDebarmentLines."Line No.";
                    VendDebarmentEntries."Firm Name" := VendDebarmentLines."Firm Name";
                    VendDebarmentEntries."Reason Code" := VendDebarmentLines."Debarment Reason Code";
                    VendDebarmentEntries."Ineligibility Start Date" := VendDebarmentLines."Ineligibility Start Date";
                    VendDebarmentEntries."Ineligibility End Date" := VendDebarmentLines."Ineligibility End Date";
                    VendDebarmentEntries."Reinstatement Date" := VendDebarmentLines."Reinstatement Date";
                    VendDebarmentEntries."Vendor No." := VendDebarmentLines."Vendor No.";
                    VendDebarmentEntries."Tax Registration (PIN) No." := VendDebarmentLines."Tax Registration (PIN) No.";
                    VendDebarmentEntries.Blocked := false;
                    VendDebarmentEntries.Insert(true);

                end;


            until VendDebarmentLines.Next = 0;

        end;
        // VendDebarment.Posted := true;
        VendDebarment.Modify;
        Message('Vendor Debarment Voucher %1 has been posted succesfuly', VendDebarment."Document No");
    end;


    procedure PostVendReinstatement(VendDebarment: Record "Vendor Debarment Voucher")
    var
        VendDebarmentLines: Record "Vendor Debarment Voucher Line";
        Vendor: Record Vendor;
        VendDebarmentEntries: Record "Vendor Debarment Entry";
    begin
        VendDebarmentLines.Reset;
        VendDebarmentLines.SetRange("Document No", VendDebarment."Document No");
        if VendDebarmentLines.FindSet then begin
            repeat
                //all lines must have Reinstatement reason code
                VendDebarmentLines.TestField("Debarment Reason Code");
                //if source type is internal all lines should have vendor no.
                //  if VendDebarment."Source Type" = VendDebarment."source type"::"Internal(Procuring Entity)" then
                VendDebarmentLines.TestField("Vendor No.");

                Vendor.Reset;
                Vendor.SetRange("No.", VendDebarmentLines."Vendor No.");
                if Vendor.FindSet then begin
                    Vendor.Debarred := false;
                    Vendor."Debarment Voucher No" := VendDebarment."Document No";
                    Vendor."Debarment Expiry Date" := VendDebarmentLines."Ineligibility End Date";
                    Vendor.Blocked := Vendor.Blocked::" ";
                    Vendor.Modify;
                end;

                VendDebarmentEntries.Reset;
                VendDebarmentEntries.SetRange("Source Voucher No.", VendDebarment."Document No");
                VendDebarmentEntries.SetRange("Vendor No.", VendDebarmentLines."Vendor No.");
                if not VendDebarmentEntries.FindSet then begin
                    VendDebarmentEntries.Init;
                    VendDebarmentEntries."Document Type" := VendDebarmentLines."Document Type";
                    VendDebarmentEntries."Source Voucher No." := VendDebarmentLines."Document No";
                    VendDebarmentEntries."Entry no" := VendDebarmentLines."Line No.";
                    VendDebarmentEntries."Firm Name" := VendDebarmentLines."Firm Name";
                    VendDebarmentEntries."Reason Code" := VendDebarmentLines."Debarment Reason Code";
                    VendDebarmentEntries."Ineligibility Start Date" := VendDebarmentLines."Ineligibility Start Date";
                    VendDebarmentEntries."Ineligibility End Date" := VendDebarmentLines."Ineligibility End Date";
                    VendDebarmentEntries."Reinstatement Date" := VendDebarmentLines."Reinstatement Date";
                    VendDebarmentEntries."Vendor No." := VendDebarmentLines."Vendor No.";
                    VendDebarmentEntries."Tax Registration (PIN) No." := VendDebarmentLines."Tax Registration (PIN) No.";
                    VendDebarmentEntries.Blocked := false;
                    VendDebarmentEntries.Insert(true);

                end;


            until VendDebarmentLines.Next = 0;

        end;
        // VendDebarment.Posted := true;
        VendDebarment.Modify;
        Message('Vendor Reinstatement Voucher %1 has been posted succesfuly', VendDebarment."Document No");
    end;

    local procedure "................."()
    begin
    end;


    procedure ReleaseSupplierRatingTemplate(SupplierRatingTemp: Record "Supplier Rating Template")
    var
        EvaluationCriteria: Record "Supplier Rating Requirement";
        ScoreGuide: Record "Supplier Rating Score Guide";
    begin
        if SupplierRatingTemp.Released = true then
            Error('Document has already been Released');


        //check to ensure every evaluation critera has associated score guide entries

        EvaluationCriteria.Reset;
        EvaluationCriteria.SetRange("Appraisal Template ID", SupplierRatingTemp.Code);
        if EvaluationCriteria.FindSet then begin
            repeat
                ScoreGuide.Reset;
                ScoreGuide.SetRange("Appraisal Template ID", EvaluationCriteria."Appraisal Template ID");
                ScoreGuide.SetRange("Criteria Group", EvaluationCriteria."Criteria Group");
                ScoreGuide.SetRange("Checklist ID", EvaluationCriteria."Checklist ID");
                if not ScoreGuide.FindSet then
                    Error('Evaluation Criteria %1 should have a score Guide ', EvaluationCriteria."Evaluation Requirement");
            until EvaluationCriteria.Next = 0;
        end;

        SupplierRatingTemp.Released := true;
        SupplierRatingTemp.Modify(true);

        Message('Supplier Rating Template %1 has been released successfuly', SupplierRatingTemp.Code);
    end;


    procedure SuggestScoreGuide(SupplierRatingTemp: Record "Supplier Rating Template")
    var
        EvaluationCriteria: Record "Supplier Rating Requirement";
        ScoreGuide: Record "Supplier Rating Score Guide";
        i: Integer;
    begin
        if SupplierRatingTemp.Released = true then
            Error('The Supplier Rating Template is already Released, it cannot be modified unless Reopened');

        //Suggest every evaluation critera with associated score guide entries

        EvaluationCriteria.Reset;
        EvaluationCriteria.SetRange("Appraisal Template ID", SupplierRatingTemp.Code);
        if EvaluationCriteria.FindSet then begin
            repeat
                ScoreGuide.Reset;
                ScoreGuide.SetRange("Appraisal Template ID", EvaluationCriteria."Appraisal Template ID");
                ScoreGuide.SetRange("Criteria Group", EvaluationCriteria."Criteria Group");
                ScoreGuide.SetRange("Checklist ID", EvaluationCriteria."Checklist ID");
                if not ScoreGuide.FindSet then begin

                    if EvaluationCriteria."Rating Type" = EvaluationCriteria."rating type"::"Yes/No" then begin
                        i := 1;
                        repeat
                            ScoreGuide.Init;
                            ScoreGuide."Appraisal Template ID" := SupplierRatingTemp.Code;
                            ScoreGuide."Template Type" := SupplierRatingTemp."Template Type";
                            ScoreGuide."Criteria Group" := EvaluationCriteria."Criteria Group";
                            ScoreGuide."Checklist ID" := EvaluationCriteria."Checklist ID";
                            ScoreGuide."Min Bid Value" := 0;
                            ScoreGuide."Min Date Value" := 0D;
                            ScoreGuide."Max Bid Value" := 0;
                            ScoreGuide."Max Date Value" := 0D;
                            if i = 1 then begin
                                ScoreGuide."Response Value" := SupplierRatingTemp."YES Bid Rating Response Value";
                                ScoreGuide."Score %" := SupplierRatingTemp."Default YES Bid Rating Score %";
                            end else begin
                                ScoreGuide."Response Value" := SupplierRatingTemp."NO Bid Rating Response Value";
                                ScoreGuide."Score %" := SupplierRatingTemp."Default NO Bid Rating Score %";
                            end;
                            i += 1;
                            ScoreGuide.Init;
                        until i = 2;
                    end;
                    if EvaluationCriteria."Rating Type" = EvaluationCriteria."rating type"::Number then begin
                        if EvaluationCriteria."Desired Perfomance Direction" = EvaluationCriteria."desired perfomance direction"::"Increasing KPI" then begin
                            i := 1;
                            repeat
                                ScoreGuide.Init;
                                ScoreGuide."Appraisal Template ID" := SupplierRatingTemp.Code;
                                ScoreGuide."Template Type" := SupplierRatingTemp."Template Type";
                                ScoreGuide."Criteria Group" := EvaluationCriteria."Criteria Group";
                                ScoreGuide."Checklist ID" := EvaluationCriteria."Checklist ID";
                                if i = 1 then begin
                                    ScoreGuide."Min Bid Value" := 0;
                                    ScoreGuide."Min Date Value" := 0D;
                                    ScoreGuide."Max Bid Value" := EvaluationCriteria."Target Qty" - 1;
                                    ScoreGuide."Max Date Value" := 0D;
                                    //ScoreGuide."Response Value":=SupplierRatingTemp."YES Bid Rating Response Value";
                                    ScoreGuide."Score %" := 0;
                                end else begin
                                    ScoreGuide."Min Bid Value" := EvaluationCriteria."Target Qty";
                                    ScoreGuide."Min Date Value" := 0D;
                                    ScoreGuide."Max Bid Value" := SupplierRatingTemp."Max Bid Value Limit";
                                    ScoreGuide."Max Date Value" := 0D;
                                    // ScoreGuide."Response Value":=SupplierRatingTemp."NO Bid Rating Response Value";
                                    ScoreGuide."Score %" := 100;
                                end;
                                i += 1;
                                ScoreGuide.Init;
                            until i = 2;
                        end;
                        if EvaluationCriteria."Target Qty" <> 0 then begin
                            if EvaluationCriteria."Desired Perfomance Direction" = EvaluationCriteria."desired perfomance direction"::"Decreasing KPI" then begin
                                i := 1;
                                repeat
                                    ScoreGuide.Init;
                                    ScoreGuide."Appraisal Template ID" := SupplierRatingTemp.Code;
                                    ScoreGuide."Template Type" := SupplierRatingTemp."Template Type";
                                    ScoreGuide."Criteria Group" := EvaluationCriteria."Criteria Group";
                                    ScoreGuide."Checklist ID" := EvaluationCriteria."Checklist ID";
                                    if i = 1 then begin
                                        ScoreGuide."Min Bid Value" := 0;
                                        ScoreGuide."Min Date Value" := 0D;
                                        ScoreGuide."Max Bid Value" := EvaluationCriteria."Target Qty" - 1;
                                        ScoreGuide."Max Date Value" := 0D;
                                        //ScoreGuide."Response Value":=SupplierRatingTemp."YES Bid Rating Response Value";
                                        ScoreGuide."Score %" := 100;
                                    end else begin
                                        ScoreGuide."Min Bid Value" := EvaluationCriteria."Target Qty";
                                        ScoreGuide."Min Date Value" := 0D;
                                        ScoreGuide."Max Bid Value" := SupplierRatingTemp."Max Bid Value Limit";
                                        ScoreGuide."Max Date Value" := 0D;
                                        //ScoreGuide."Response Value":=SupplierRatingTemp."NO Bid Rating Response Value";
                                        ScoreGuide."Score %" := 0;
                                    end;
                                    i += 1;
                                    ScoreGuide.Init;
                                until i = 2;
                            end;
                        end else begin
                            if EvaluationCriteria."Desired Perfomance Direction" = EvaluationCriteria."desired perfomance direction"::"Decreasing KPI" then begin
                                i := 1;
                                repeat
                                    ScoreGuide.Init;
                                    ScoreGuide."Appraisal Template ID" := SupplierRatingTemp.Code;
                                    ScoreGuide."Template Type" := SupplierRatingTemp."Template Type";
                                    ScoreGuide."Criteria Group" := EvaluationCriteria."Criteria Group";
                                    ScoreGuide."Checklist ID" := EvaluationCriteria."Checklist ID";
                                    if i = 1 then begin
                                        ScoreGuide."Min Bid Value" := 0;
                                        ScoreGuide."Min Date Value" := 0D;
                                        ScoreGuide."Max Bid Value" := EvaluationCriteria."Target Qty" - 1;
                                        ScoreGuide."Max Date Value" := 0D;
                                        //ScoreGuide."Response Value":=SupplierRatingTemp."YES Bid Rating Response Value";
                                        ScoreGuide."Score %" := 100;
                                    end else begin
                                        ScoreGuide."Min Bid Value" := EvaluationCriteria."Target Qty" + 1;
                                        ScoreGuide."Min Date Value" := 0D;
                                        ScoreGuide."Max Bid Value" := SupplierRatingTemp."Max Bid Value Limit";
                                        ScoreGuide."Max Date Value" := 0D;
                                        //ScoreGuide."Response Value":=SupplierRatingTemp."NO Bid Rating Response Value";
                                        ScoreGuide."Score %" := 0;
                                    end;
                                    i += 1;
                                    ScoreGuide.Init;
                                until i = 2;
                            end;
                        end;
                    end;
                    if EvaluationCriteria."Rating Type" = EvaluationCriteria."rating type"::"Options Text" then begin
                        i := 5;
                        repeat
                            ScoreGuide.Init;
                            ScoreGuide."Appraisal Template ID" := SupplierRatingTemp.Code;
                            ScoreGuide."Template Type" := SupplierRatingTemp."Template Type";
                            ScoreGuide."Criteria Group" := EvaluationCriteria."Criteria Group";
                            ScoreGuide."Checklist ID" := EvaluationCriteria."Checklist ID";
                            ScoreGuide."Min Bid Value" := 0;
                            ScoreGuide."Min Date Value" := 0D;
                            ScoreGuide."Max Bid Value" := 0;
                            ScoreGuide."Max Date Value" := 0D;
                            if i = 1 then begin
                                ScoreGuide."Response Value" := '1-POOR';
                                ScoreGuide."Score %" := SupplierRatingTemp."1-POOR Option Text Bid Score %";
                            end else
                                if i = 2 then begin
                                    ScoreGuide."Response Value" := '2-FAIR';
                                    ScoreGuide."Score %" := SupplierRatingTemp."2-FAIR Option Text Bid Score %";
                                end else
                                    if i = 3 then begin
                                        ScoreGuide."Response Value" := '3-GOOD';
                                        ScoreGuide."Score %" := SupplierRatingTemp."3-GOOD Option Text Bid Score %";
                                    end else
                                        if i = 4 then begin
                                            ScoreGuide."Response Value" := '4-VERY GOOD';
                                            ScoreGuide."Score %" := SupplierRatingTemp."4-VERY GOOD  Text Bid Score %";
                                        end else
                                            if i = 5 then begin
                                                ScoreGuide."Response Value" := '5-EXCELLENT';
                                                ScoreGuide."Score %" := SupplierRatingTemp."5-EXCELLENT Text Bid Score %";
                                            end;
                            i += 1;
                            ScoreGuide.Init;
                        until i = 5;
                    end;
                end;
            until EvaluationCriteria.Next = 0;
        end;



        Message('Supplier Score Guide has been Suggested successfuly');
    end;


    procedure SuggestEvaluationCriteria(EvaluationHeader: Record "Prequalification Score Header")
    var
        Scoresheet: Record "Prequalification Score Line";
        SupplierRatingReq: Record "Bid Score Requirement";
        LineNo: Integer;
    begin

        EvaluationHeader.TestField("Prequalification Evaluation Te");

        Scoresheet.Reset;
        if Scoresheet.FindLast then
            LineNo := Scoresheet."Line No";

        Scoresheet.Reset;
        Scoresheet.SetRange("Rating Template ID", EvaluationHeader."Prequalification Evaluation Te");
        Scoresheet.SetRange("Evaluation Voucher ID", EvaluationHeader.Code);
        if Scoresheet.FindSet then begin
            Scoresheet.DeleteAll;

        end;

        SupplierRatingReq.Reset;
        SupplierRatingReq.SetRange("Template ID", EvaluationHeader."Prequalification Evaluation Te");
        if SupplierRatingReq.FindSet then begin
            repeat
                Scoresheet.Init;
                Scoresheet."Evaluation Voucher ID" := EvaluationHeader.Code;
                Scoresheet."Line No" := LineNo + 1;
                Scoresheet."Rating Template ID" := SupplierRatingReq."Template ID";
                Scoresheet."Template Type" := SupplierRatingReq."Rating Type";
                Scoresheet."Criteria Group" := SupplierRatingReq."Criteria Group ID";
                Scoresheet."Checklist ID" := SupplierRatingReq."Requirement ID";
                Scoresheet."Evaluation Requirement" := SupplierRatingReq."Evaluation Requirement";
                Scoresheet."Rating Type" := SupplierRatingReq."Rating Type";
                Scoresheet."Assigned Weight %" := SupplierRatingReq."Assigned Weight %";
                Scoresheet."Weighted Line Score" := Scoresheet."Score %" * Scoresheet."Assigned Weight %" / 100;
                Scoresheet."Target Qty" := SupplierRatingReq."Target Qty";
                Scoresheet."Desired Perfomance Direction" := SupplierRatingReq."Desired Perfomance Direction";
                //Scoresheet."Target Value":=SupplierRatingReq."Target Value";
                Scoresheet.Insert(true);
                LineNo += 1;
            until SupplierRatingReq.Next = 0;
        end;
    end;


    procedure PostEvaluationVouchers(EvaluationHeader: Record "Prequalification Score Header")
    var
        Scoresheet: Record "Prequalification Score Line";
        SupplierRatingReq: Record "Supplier Rating Requirement";
        IFPResponseLine: Record "IFP Response Line";
    begin
        EvaluationHeader.TestField(Posted, false);
        EvaluationHeader.TestField("Prequalification Evaluation Te");
        EvaluationHeader.TestField("Evaluation Committee Remarks");
        IFPResponseLine.Reset;
        IFPResponseLine.SetRange("RFI Document No.", EvaluationHeader."IFP No.");
        IFPResponseLine.SetRange("Procurement Category", EvaluationHeader."Procurement Category");
        if IFPResponseLine.FindSet then begin
            repeat
                IFPResponseLine."Response Stage" := IFPResponseLine."response stage"::"Evaluation Stage";
                IFPResponseLine."Evaluation Voucher No" := EvaluationHeader.Code;
                IFPResponseLine.Modify(true);
            until IFPResponseLine.Next = 0;
        end;
        EvaluationHeader.Posted := true;
        EvaluationHeader."Posting date" := Today;
        EvaluationHeader."Posted By" := UserId;
        EvaluationHeader.Modify(true);
        Message('Successfully Submitted');
        // PrequalificationEntry.RESET;
        // PrequalificationEntry.SETRANGE("Vendor No.", EvaluationHeader."Vendor No.");
        // PrequalificationEntry.SETRANGE("Document Type",PrequalificationEntry."Document Type"::"IFP Response");
        // PrequalificationEntry.SETRANGE("Document No.",EvaluationHeader.Code);
        // IF PrequalificationEntry.FINDSET THEN BEGIN
        //  PrequalificationEntry."IFP No.":=EvaluationHeader."IFP No.";
        //  PrequalificationEntry."Vendor No.":=EvaluationHeader."Vendor No.";
        //  PrequalificationEntry."Procurement Category Code":=EvaluationHeader."Procurement Category";
        //  PrequalificationEntry.Description:=EvaluationHeader."Category Name";
        //  PrequalificationEntry."Document No.":=EvaluationHeader.Code;
        // ProcurementCat.RESET;
        // ProcurementCat.SETRANGE(Code,EvaluationHeader."Procurement Category");
        // IF ProcurementCat.FINDSET THEN BEGIN
        //   PrequalificationEntry."Procurement Type":=ProcurementCat."Procurement Type";
        //   END;
        //   IFP.RESET;
        //   IFP.SETRANGE(Code,EvaluationHeader."IFP No.");
        //   IF IFP.FINDSET THEN BEGIN
        //     PrequalificationEntry."Start Date":=IFP."Submission Start Date";
        //     PrequalificationEntry."End Date":=IFP."Submission End Date";
        //     END;
        //    IFPResponseL.RESET;
        //    IFPResponseL.SETRANGE("Document No.",EvaluationHeader."Prequalification Response No.");
        //    IFPResponseL.SETRANGE("RFI Document No.",EvaluationHeader."IFP No.");
        //    IFPResponseL.SETRANGE("Procurement Category",EvaluationHeader."Procurement Category");
        //    IF IFPResponseL.FINDSET THEN BEGIN
        //      IFPResponseL."Evaluation Decision":=EvaluationHeader."Final Evaluation Decision";
        //      IFPResponseL."Evaluation Score %":=EvaluationHeader."System Evaluation Score %";
        //      END;
        //  PrequalificationEntry.MODIFY(TRUE);
        //  MESSAGE('Successfully Modified');
        //  END ELSE BEGIN
        //  PrequalificationEntry.INIT;
        //  PrequalificationEntry."IFP No.":=EvaluationHeader."IFP No.";
        //  PrequalificationEntry."Vendor No.":=EvaluationHeader."Vendor No.";
        //  PrequalificationEntry."Procurement Category Code":=EvaluationHeader."Procurement Category";
        //  PrequalificationEntry.Description:=EvaluationHeader."Category Name";
        // PrequalificationEntry."Document No.":=EvaluationHeader.Code;
        //  IF ProcurementCat.FINDSET THEN BEGIN
        //   PrequalificationEntry."Procurement Type":=ProcurementCat."Procurement Type";
        //   END;
        //   IF IFP.FINDSET THEN BEGIN
        //     PrequalificationEntry."Start Date":=IFP."Period Start Date";
        //     PrequalificationEntry."End Date":=IFP."Period End Date";
        //     END;
        //    IFPResponseL.RESET;
        //    IFPResponseL.SETRANGE("Document No.",EvaluationHeader."Prequalification Response No.");
        //    IFPResponseL.SETRANGE("RFI Document No.",EvaluationHeader."IFP No.");
        //    IFPResponseL.SETRANGE("Procurement Category",EvaluationHeader."Procurement Category");
        //    IF IFPResponseL.FINDSET THEN BEGIN
        //      IFPResponseL."Evaluation Decision":=EvaluationHeader."Final Evaluation Decision";
        //      IFPResponseL."Evaluation Score %":=EvaluationHeader."System Evaluation Score %";
        //      END;
        // PrequalificationEntry.INSERT(TRUE);
        //  MESSAGE('Successfully Posted');
        //  END;
        /*Scoresheet.RESET;
        Scoresheet.SETRANGE("Rating Template ID",EvaluationHeader."Prequalification Evaluation Te");
        Scoresheet.SETRANGE("Evaluation Voucher ID",EvaluationHeader.Code);
        IF Scoresheet.FINDSET THEN BEGIN
          Scoresheet.DELETEALL(TRUE);
          END;
        SupplierRatingReq.RESET;
        SupplierRatingReq.SETRANGE("Appraisal Template ID",EvaluationHeader."Prequalification Evaluation Te");
        IF SupplierRatingReq.FINDSET THEN BEGIN
          REPEAT
          Scoresheet.INIT;
          Scoresheet."Evaluation Voucher ID":=EvaluationHeader.Code;
          Scoresheet."Rating Template ID":=SupplierRatingReq."Appraisal Template ID";
          Scoresheet."Template Type":=SupplierRatingReq."Template Type";
          Scoresheet."Criteria Group":=SupplierRatingReq."Criteria Group";
          Scoresheet."Checklist ID":=SupplierRatingReq."Checklist ID";
          Scoresheet."Evaluation Requirement":=SupplierRatingReq."Evaluation Requirement";
          Scoresheet."Rating Type":=SupplierRatingReq."Rating Type";
          Scoresheet."Assigned Weight %":=SupplierRatingReq."Assigned Weight %";
          Scoresheet."Weighted Line Score":=Scoresheet."Score %"*Scoresheet."Assigned Weight %"/100;
          Scoresheet."Target Qty":=SupplierRatingReq."Target Qty";
          Scoresheet."Desired Perfomance Direction":=SupplierRatingReq."Desired Perfomance Direction";
          Scoresheet."Target Value":=SupplierRatingReq."Target Value";
          Scoresheet.INSERT(TRUE);
          UNTIL SupplierRatingReq.NEXT=0;
          END;
          */

    end;


    procedure PostEvaluation(EvaluationHeader: Record "Prequalification Score Header")
    var
        Scoresheet: Record "Prequalification Score Line";
        SupplierRatingReq: Record "Supplier Rating Requirement";
        IFPResponseLine: Record "IFP Response Line";
    begin

        EvaluationHeader.TestField("Prequalification Evaluation Te");
        EvaluationHeader.TestField("Evaluation Committee Remarks");
        PrequalificationEntry.Reset;
        PrequalificationEntry.SetRange("Vendor No.", EvaluationHeader."Vendor No.");
        PrequalificationEntry.SetRange("Document Type", PrequalificationEntry."document type"::"IFP Response");
        PrequalificationEntry.SetRange("Document No.", EvaluationHeader.Code);
        if PrequalificationEntry.FindSet then begin
            PrequalificationEntry."IFP No." := EvaluationHeader."IFP No.";
            PrequalificationEntry."Vendor No." := EvaluationHeader."Vendor No.";
            PrequalificationEntry."Procurement Category Code" := EvaluationHeader."Procurement Category";
            PrequalificationEntry.Description := EvaluationHeader."Category Name";
            PrequalificationEntry."Document No." := EvaluationHeader.Code;
            //  PrequalificationEntry.Region:=EvaluationHeader."Primary Responsibility Center";
            //  PrequalificationEntry.Constituency:=EvaluationHeader."Constituency Code";
            ProcurementCat.Reset;
            ProcurementCat.SetRange(Code, EvaluationHeader."Procurement Category");
            if ProcurementCat.FindSet then begin
                PrequalificationEntry."Procurement Type" := ProcurementCat."Procurement Type";
            end;
            IFP.Reset;
            IFP.SetRange(Code, EvaluationHeader."IFP No.");
            if IFP.FindSet then begin
                PrequalificationEntry."Start Date" := IFP."Submission Start Date";
                PrequalificationEntry."End Date" := IFP."Submission End Date";
            end;
            IFPResponseL.Reset;
            IFPResponseL.SetRange("Document No.", EvaluationHeader."Prequalification Response No.");
            IFPResponseL.SetRange("RFI Document No.", EvaluationHeader."IFP No.");
            IFPResponseL.SetRange("Procurement Category", EvaluationHeader."Procurement Category");
            if IFPResponseL.FindSet then begin
                IFPResponseL."Evaluation Decision" := EvaluationHeader."Final Evaluation Decision";
                IFPResponseL."Evaluation Score %" := EvaluationHeader."System Evaluation Score %";
            end;
            PrequalificationEntry.Modify(true);
            Message('Successfully Modified');
        end else begin
            PrequalificationEntry.Init;
            PrequalificationEntry."IFP No." := EvaluationHeader."IFP No.";
            PrequalificationEntry."Vendor No." := EvaluationHeader."Vendor No.";
            PrequalificationEntry."Procurement Category Code" := EvaluationHeader."Procurement Category";
            PrequalificationEntry.Description := EvaluationHeader."Category Name";
            PrequalificationEntry."Document No." := EvaluationHeader.Code;
            // //  PrequalificationEntry.Region:=EvaluationHeader."Responsibility Center ID";
            // //  PrequalificationEntry.Constituency:=EvaluationHeader."Constituency Code";
            if ProcurementCat.FindSet then begin
                PrequalificationEntry."Procurement Type" := ProcurementCat."Procurement Type";
            end;
            if IFP.FindSet then begin
                PrequalificationEntry."Start Date" := IFP."Period Start Date";
                PrequalificationEntry."End Date" := IFP."Period End Date";
            end;
            IFPResponseL.Reset;
            IFPResponseL.SetRange("Document No.", EvaluationHeader."Prequalification Response No.");
            IFPResponseL.SetRange("RFI Document No.", EvaluationHeader."IFP No.");
            IFPResponseL.SetRange("Procurement Category", EvaluationHeader."Procurement Category");
            if IFPResponseL.FindSet then begin
                IFPResponseL."Evaluation Decision" := EvaluationHeader."Final Evaluation Decision";
                IFPResponseL."Evaluation Score %" := EvaluationHeader."System Evaluation Score %";
            end;
            PrequalificationEntry.Insert(true);
            Message('Successfully Posted');
        end;
        Scoresheet.RESET;
        Scoresheet.SETRANGE("Rating Template ID", EvaluationHeader."Prequalification Evaluation Te");
        Scoresheet.SETRANGE("Evaluation Voucher ID", EvaluationHeader.Code);
        IF Scoresheet.FINDSET THEN BEGIN
            Scoresheet.DELETEALL(TRUE);
        END;
        SupplierRatingReq.RESET;
        SupplierRatingReq.SETRANGE("Appraisal Template ID", EvaluationHeader."Prequalification Evaluation Te");
        IF SupplierRatingReq.FINDSET THEN BEGIN
            REPEAT
                Scoresheet.INIT;
                Scoresheet."Evaluation Voucher ID" := EvaluationHeader.Code;
                Scoresheet."Rating Template ID" := SupplierRatingReq."Appraisal Template ID";
                Scoresheet."Template Type" := SupplierRatingReq."Template Type";
                Scoresheet."Criteria Group" := SupplierRatingReq."Criteria Group";
                Scoresheet."Checklist ID" := SupplierRatingReq."Checklist ID";
                Scoresheet."Evaluation Requirement" := SupplierRatingReq."Evaluation Requirement";
                Scoresheet."Rating Type" := SupplierRatingReq."Rating Type";
                Scoresheet."Assigned Weight %" := SupplierRatingReq."Assigned Weight %";
                Scoresheet."Weighted Line Score" := Scoresheet."Score %" * Scoresheet."Assigned Weight %" / 100;
                Scoresheet."Target Qty" := SupplierRatingReq."Target Qty";
                Scoresheet."Desired Perfomance Direction" := SupplierRatingReq."Desired Perfomance Direction";
                Scoresheet."Target Value" := SupplierRatingReq."Target Value";
                Scoresheet.INSERT(TRUE);
            UNTIL SupplierRatingReq.NEXT = 0;
        END;


    end;


    procedure PostNoaIFREvaluation(EvaluationHeader: Record "IFP Response Line"; IFPTabulation: Record "Bid Tabulation Header")
    var
        Scoresheet: Record "Prequalification Score Line";
        SupplierRatingReq: Record "Supplier Rating Requirement";
        IFPResponseLine: Record "IFP Response Line";
        RegistrationEntry: Record "Vendor Registration Entry";
    begin

        //EvaluationHeader.TESTFIELD("Prequalification Evaluation Te");
        IFPTabulation.TestField("Financial Year Code");
        EvaluationHeader.Reset;
        EvaluationHeader.SetRange("RFI Document No.", IFPTabulation."IFP Code");
        EvaluationHeader.SetRange("Response Stage", EvaluationHeader."response stage"::"Opinion Stage");
        //EvaluationHeader.SETFILTER(FORMAT(EvaluationHeader."Evaluation Decision"(,'%1<>',' ');
        if EvaluationHeader.FindSet then begin
            repeat
                RegistrationEntry.Reset;
                RegistrationEntry.SetRange("Vendor No.", EvaluationHeader."Vendor No.");
                RegistrationEntry.SetRange("Document Type", RegistrationEntry."document type"::"IFP Response");
                RegistrationEntry.SetRange("Document No.", IFPTabulation.Code);
                if RegistrationEntry.FindSet then begin
                    RegistrationEntry."IFP No." := IFPTabulation."IFP Code";
                    RegistrationEntry."Vendor No." := EvaluationHeader."Vendor No.";
                    RegistrationEntry."Procurement Category Code" := EvaluationHeader."Procurement Category";
                    RegistrationEntry.Description := EvaluationHeader."Category Description";
                    RegistrationEntry."Document No." := IFPTabulation.Code;
                    RegistrationEntry.Region := EvaluationHeader."Responsibility Center ID";
                    RegistrationEntry.Constituency := EvaluationHeader."Constituency Code";
                    ProcurementCat.Reset;
                    ProcurementCat.SetRange(Code, EvaluationHeader."Procurement Category");
                    if ProcurementCat.FindSet then begin
                        RegistrationEntry."Procurement Type" := ProcurementCat."Procurement Type";
                    end;
                    IFP.Reset;
                    IFP.SetRange(Code, IFPTabulation."IFP Code");
                    if IFP.FindSet then begin
                        RegistrationEntry."Start Date" := IFP."Submission Start Date";
                        RegistrationEntry."End Date" := IFP."Submission End Date";
                    end;
                    IFPResponseL.Reset;
                    IFPResponseL.SetRange("Document No.", EvaluationHeader."Document No.");
                    IFPResponseL.SetRange("RFI Document No.", EvaluationHeader."RFI Document No.");
                    IFPResponseL.SetRange("Procurement Category", EvaluationHeader."Procurement Category");
                    if IFPResponseL.FindSet then begin
                        IFPResponseL."Response Stage" := IFPResponseL."response stage"::"Award Stage";
                        IFPResponseL."Notice Of Award No" := IFPTabulation.Code;
                        IFPResponseL.Modify(true);
                    end;
                    RegistrationEntry.Modify(true);
                    //MESSAGE('Successfully Modified');
                end else begin
                    RegistrationEntry.Init;
                    //  RegistrationEntry."Entry No":=RegistrationEntry."Entry No"+100;
                    RegistrationEntry."IFP No." := IFPTabulation."IFP Code";
                    RegistrationEntry."Vendor No." := EvaluationHeader."Vendor No.";
                    RegistrationEntry."Procurement Category Code" := EvaluationHeader."Procurement Category";
                    RegistrationEntry.Description := EvaluationHeader."Category Description";
                    RegistrationEntry."Document No." := IFPTabulation.Code;
                    RegistrationEntry.Region := EvaluationHeader."Responsibility Center ID";
                    RegistrationEntry.Constituency := EvaluationHeader."Constituency Code";
                    if ProcurementCat.FindSet then begin
                        RegistrationEntry."Procurement Type" := ProcurementCat."Procurement Type";
                    end;
                    if IFP.FindSet then begin
                        RegistrationEntry."Start Date" := IFP."Period Start Date";
                        RegistrationEntry."End Date" := IFP."Period End Date";
                    end;
                    IFPResponseL.Reset;
                    IFPResponseL.SetRange("Document No.", EvaluationHeader."Document No.");
                    IFPResponseL.SetRange("RFI Document No.", IFPTabulation."IFP Code");
                    IFPResponseL.SetRange("Procurement Category", EvaluationHeader."Procurement Category");
                    if IFPResponseL.FindSet then begin
                        IFPResponseL."Response Stage" := IFPResponseL."response stage"::"Award Stage";
                        IFPResponseL."Notice Of Award No" := IFPTabulation.Code;
                        IFPResponseL.Modify(true);
                    end;
                    RegistrationEntry.Insert(true);
                end;
            until EvaluationHeader.Next = 0;
        end;
        IFPTabulation.Posted := true;
        IFPTabulation."Posted By" := UserId;
        IFPTabulation."Posted Date" := Today;
        IFPTabulation.Modify(true);
        Message('Successfully Submitted');
        /*Scoresheet.RESET;
        Scoresheet.SETRANGE("Rating Template ID",EvaluationHeader."Prequalification Evaluation Te");
        Scoresheet.SETRANGE("Evaluation Voucher ID",EvaluationHeader.Code);
        IF Scoresheet.FINDSET THEN BEGIN
          Scoresheet.DELETEALL(TRUE);
          END;
        SupplierRatingReq.RESET;
        SupplierRatingReq.SETRANGE("Appraisal Template ID",EvaluationHeader."Prequalification Evaluation Te");
        IF SupplierRatingReq.FINDSET THEN BEGIN
          REPEAT
          Scoresheet.INIT;
          Scoresheet."Evaluation Voucher ID":=EvaluationHeader.Code;
          Scoresheet."Rating Template ID":=SupplierRatingReq."Appraisal Template ID";
          Scoresheet."Template Type":=SupplierRatingReq."Template Type";
          Scoresheet."Criteria Group":=SupplierRatingReq."Criteria Group";
          Scoresheet."Checklist ID":=SupplierRatingReq."Checklist ID";
          Scoresheet."Evaluation Requirement":=SupplierRatingReq."Evaluation Requirement";
          Scoresheet."Rating Type":=SupplierRatingReq."Rating Type";
          Scoresheet."Assigned Weight %":=SupplierRatingReq."Assigned Weight %";
          Scoresheet."Weighted Line Score":=Scoresheet."Score %"*Scoresheet."Assigned Weight %"/100;
          Scoresheet."Target Qty":=SupplierRatingReq."Target Qty";
          Scoresheet."Desired Perfomance Direction":=SupplierRatingReq."Desired Perfomance Direction";
          Scoresheet."Target Value":=SupplierRatingReq."Target Value";
          Scoresheet.INSERT(TRUE);
          UNTIL SupplierRatingReq.NEXT=0;
          END;
          */

    end;


    procedure PostNoaIFR2Evaluation(EvaluationHeader: Record "IFP Response Line"; IFPTabulation: Record "Bid Tabulation Header")
    var
        Scoresheet: Record "Prequalification Score Line";
        SupplierRatingReq: Record "Supplier Rating Requirement";
        IFPResponseLine: Record "IFP Response Line";
        VendorRegistrationEntry: Record "Vendor Registration Entry";
        VendorRegistrationEntry1: Record "Vendor Registration Entry";
    begin

        //EvaluationHeader.TESTFIELD("Prequalification Evaluation Te");
        IFPTabulation.TestField("Financial Year Code");
        EvaluationHeader.Reset;
        EvaluationHeader.SetRange("RFI Document No.", IFPTabulation."IFP Code");
        EvaluationHeader.SetRange("Response Stage", EvaluationHeader."response stage"::"Opinion Stage");
        //EvaluationHeader.SETFILTER(FORMAT(EvaluationHeader."Evaluation Decision"(,'%1<>',' ');
        if EvaluationHeader.FindSet then begin
            repeat
                VendorRegistrationEntry.Reset;
                VendorRegistrationEntry.SetRange("Vendor No.", EvaluationHeader."Vendor No.");
                VendorRegistrationEntry.SetRange("Document Type", VendorRegistrationEntry."document type"::"IFR Response");
                VendorRegistrationEntry.SetRange("Document No.", IFPTabulation.Code);
                if not PrequalificationEntry.FindSet then begin
                    VendorRegistrationEntry1.Init;
                    VendorRegistrationEntry1."IFP No." := IFPTabulation."IFP Code";
                    VendorRegistrationEntry1."Vendor No." := EvaluationHeader."Vendor No.";
                    VendorRegistrationEntry1."Procurement Category Code" := EvaluationHeader."Procurement Category";
                    VendorRegistrationEntry1.Description := EvaluationHeader."Category Description";
                    VendorRegistrationEntry1."Document No." := IFPTabulation.Code;
                    VendorRegistrationEntry1.Region := EvaluationHeader."Responsibility Center ID";
                    VendorRegistrationEntry1.Constituency := EvaluationHeader."Constituency Code";
                    VendorRegistrationEntry1."Document Type" := VendorRegistrationEntry1."document type"::"IFR Response";
                    VendorRegistrationEntry1."Evaluation Decision" := EvaluationHeader."Evaluation Decision";
                    VendorRegistrationEntry1."Evaluation Score %" := EvaluationHeader."Evaluation Score %";
                    ProcurementCat.Reset;
                    ProcurementCat.SetRange(Code, EvaluationHeader."Procurement Category");
                    if ProcurementCat.FindSet then begin
                        VendorRegistrationEntry."Procurement Type" := ProcurementCat."Procurement Type";
                    end;
                    IFP.Reset;
                    IFP.SetRange(Code, IFPTabulation."IFP Code");
                    if IFP.FindSet then begin
                        VendorRegistrationEntry1."Start Date" := IFP."Period Start Date";
                        VendorRegistrationEntry1."End Date" := IFP."Period End Date";
                    end;
                    EvaluationHeader."Response Stage" := EvaluationHeader."response stage"::"Award Stage";
                    EvaluationHeader."Notice Of Award No" := IFPTabulation.Code;
                    EvaluationHeader.Modify(true);
                    // VendorRegistrationEntry1 .Insert(true);
                end;
            ///----END
            until EvaluationHeader.Next = 0;
        end;
        IFPTabulation.Posted := true;
        IFPTabulation."Posted By" := UserId;
        IFPTabulation."Posted Date" := Today;
        IFPTabulation.Modify(true);
        Message('Successfully Posted');
    end;


    procedure PostNoaIFPEvaluation(EvaluationHeader: Record "IFP Response Line"; IFPTabulation: Record "Bid Tabulation Header")
    var
        Scoresheet: Record "Prequalification Score Line";
        SupplierRatingReq: Record "Supplier Rating Requirement";
        IFPResponseLine: Record "IFP Response Line";
    begin

        //EvaluationHeader.TESTFIELD("Prequalification Evaluation Te");
        IFPTabulation.TestField("Financial Year Code");
        EvaluationHeader.Reset;
        EvaluationHeader.SetRange("RFI Document No.", IFPTabulation."IFP Code");
        EvaluationHeader.SetRange("Response Stage", EvaluationHeader."response stage"::"Opinion Stage");
        //EvaluationHeader.SETFILTER(FORMAT(EvaluationHeader."Evaluation Decision"(,'%1<>',' ');
        if EvaluationHeader.FindSet then begin
            repeat
                PrequalificationEntry.Reset;
                PrequalificationEntry.SetRange("Vendor No.", EvaluationHeader."Vendor No.");
                PrequalificationEntry.SetRange("Document Type", PrequalificationEntry."document type"::"IFP Response");
                PrequalificationEntry.SetRange("Document No.", IFPTabulation.Code);
                if PrequalificationEntry.FindSet then begin
                    PrequalificationEntry."IFP No." := IFPTabulation."IFP Code";
                    PrequalificationEntry."Vendor No." := EvaluationHeader."Vendor No.";
                    PrequalificationEntry."Procurement Category Code" := EvaluationHeader."Procurement Category";
                    PrequalificationEntry.Description := EvaluationHeader."Category Description";
                    PrequalificationEntry."Document No." := IFPTabulation.Code;
                    PrequalificationEntry.Region := EvaluationHeader."Responsibility Center ID";
                    PrequalificationEntry.Constituency := EvaluationHeader."Constituency Code";
                    PrequalificationEntry."Evaluation Decision" := EvaluationHeader."Evaluation Decision";
                    PrequalificationEntry."Document Type" := PrequalificationEntry."document type"::"IFP Response";
                    PrequalificationEntry."Evaluation Score %" := EvaluationHeader."Evaluation Score %";
                    ProcurementCat.Reset;
                    ProcurementCat.SetRange(Code, EvaluationHeader."Procurement Category");
                    if ProcurementCat.FindSet then begin
                        PrequalificationEntry."Procurement Type" := ProcurementCat."Procurement Type";
                    end;
                    IFP.Reset;
                    IFP.SetRange(Code, IFPTabulation."IFP Code");
                    if IFP.FindSet then begin
                        PrequalificationEntry."Start Date" := IFP."Submission Start Date";
                        PrequalificationEntry."End Date" := IFP."Submission End Date";
                    end;
                    IFPResponseL.Reset;
                    IFPResponseL.SetRange("Document No.", EvaluationHeader."Document No.");
                    IFPResponseL.SetRange("RFI Document No.", EvaluationHeader."RFI Document No.");
                    IFPResponseL.SetRange("Procurement Category", EvaluationHeader."Procurement Category");
                    if IFPResponseL.FindSet then begin
                        IFPResponseL."Response Stage" := IFPResponseL."response stage"::"Award Stage";
                        IFPResponseL."Notice Of Award No" := IFPTabulation.Code;
                        IFPResponseL.Modify(true);
                    end;
                    PrequalificationEntry.Modify(true);
                    //MESSAGE('Successfully Modified');
                end else begin
                    PrequalificationEntry.Init;
                    PrequalificationEntry."Entry No" := PrequalificationEntry."Entry No" + 100;
                    PrequalificationEntry."IFP No." := IFPTabulation."IFP Code";
                    PrequalificationEntry."Vendor No." := EvaluationHeader."Vendor No.";
                    PrequalificationEntry."Procurement Category Code" := EvaluationHeader."Procurement Category";
                    PrequalificationEntry.Description := EvaluationHeader."Category Description";
                    PrequalificationEntry."Document No." := IFPTabulation.Code;
                    PrequalificationEntry.Region := EvaluationHeader."Responsibility Center ID";
                    PrequalificationEntry.Constituency := EvaluationHeader."Constituency Code";
                    PrequalificationEntry."Evaluation Decision" := EvaluationHeader."Evaluation Decision";
                    PrequalificationEntry."Evaluation Score %" := EvaluationHeader."Evaluation Score %";
                    PrequalificationEntry."Document Type" := PrequalificationEntry."document type"::"IFP Response";
                    if ProcurementCat.FindSet then begin
                        PrequalificationEntry."Procurement Type" := ProcurementCat."Procurement Type";
                    end;
                    if IFP.FindSet then begin
                        PrequalificationEntry."Start Date" := IFP."Period Start Date";
                        PrequalificationEntry."End Date" := IFP."Period End Date";
                    end;
                    IFPResponseL.Reset;
                    IFPResponseL.SetRange("Document No.", EvaluationHeader."Document No.");
                    IFPResponseL.SetRange("RFI Document No.", IFPTabulation."IFP Code");
                    IFPResponseL.SetRange("Procurement Category", EvaluationHeader."Procurement Category");
                    if IFPResponseL.FindSet then begin
                        IFPResponseL."Response Stage" := IFPResponseL."response stage"::"Award Stage";
                        IFPResponseL."Notice Of Award No" := IFPTabulation.Code;
                        IFPResponseL.Modify(true);
                    end;
                    PrequalificationEntry.Insert(true);
                end;
            until EvaluationHeader.Next = 0;
        end;
        IFPTabulation.Posted := true;
        IFPTabulation."Posted By" := UserId;
        IFPTabulation."Posted Date" := Today;
        IFPTabulation.Modify(true);
        Message('Successfully Posted');
    end;


    procedure SuggestLinesFromRequisitionTemplate(Purch: Record "Purchase Header")
    var
        PurchLines: Record "Purchase Line";
        RequisitionTempLine: Record "BoQ Template Line1";
        RequisitionTempheader: Record "Purchase Requisition Template";
        LineNo: Integer;
    begin
        //Purch.TESTFIELD("PRN Type");
        // if Purch."PRN Type" <> Purch."prn type"::Standard then
        //    Error('Purchase Requisition Must be Standard');

        PurchLines.Reset;
        if PurchLines.FindLast then
            LineNo := PurchLines."Line No.";

        //Transfer the Requisition Template Lines to PRN Lines
        RequisitionTempLine.Reset;
        RequisitionTempLine.SetRange("BoQ Template ID", Purch."Requisition Template ID");
        if RequisitionTempLine.FindSet then begin
            repeat
                PurchLines.Init;
                PurchLines."Document Type" := Purch."Document Type";
                PurchLines."Document No." := Purch."No.";
                PurchLines."Line No." := LineNo;
                PurchLines.Type := RequisitionTempLine.Type;
                PurchLines."No." := RequisitionTempLine."No.";
                PurchLines.Description := RequisitionTempLine.Description;
                PurchLines.Quantity := RequisitionTempLine.Quantity;
                PurchLines."Unit of Measure Code" := RequisitionTempLine."Unit of Measure Code";
                PurchLines.Amount := RequisitionTempLine."Amount Excl. VAT";
                PurchLines."Shortcut Dimension 1 Code" := RequisitionTempLine."Shortcut Dimension 1 Code";
                PurchLines."Shortcut Dimension 2 Code" := RequisitionTempLine."Shortcut Dimension 2 Code";
                PurchLines."Variant Code" := RequisitionTempLine."Variant Code";
                PurchLines."Dimension Set ID" := RequisitionTempLine."Dimension Set ID";
                PurchLines."Item Category Code" := RequisitionTempLine."Item Category Code";
                PurchLines.Insert(true);
                LineNo := LineNo + 10000;
            until RequisitionTempLine.Next = 0;

        end;
    end;


    procedure SuggestLinesFromRequisitionWorksTemplate(Purch: Record "Purchase Header")
    var
        PurchLines: Record "Purchase Line";
        RequisitionTempLine: Record "BoQ Template Line1";
        RequisitionTempheader: Record "Purchase Requisition Template";
        LineNo: Integer;
        NewDesc: Text;
    begin
        //Purch.TESTFIELD("PRN Type");
        if Purch."PRN Type" <> Purch."prn type"::"Project Works" then
            Error('Purchase Requisition Must be Project Works');

        PurchLines.Reset;
        if PurchLines.FindLast then
            LineNo := PurchLines."Line No.";

        //Transfer the Requisition Template Lines to PRN Lines
        RequisitionTempLine.Reset;
        RequisitionTempLine.SetRange("BoQ Template ID", Purch."Requisition Template ID");
        if RequisitionTempLine.FindSet then begin
            repeat
                PurchLines.Init;
                PurchLines."Document Type" := Purch."Document Type";
                PurchLines."Document No." := Purch."No.";
                PurchLines."Line No." := LineNo;
                PurchLines.Type := RequisitionTempLine.Type;
                PurchLines."No." := RequisitionTempLine."No.";
                PurchLines.Description := RequisitionTempLine.Description;
                PurchLines.Quantity := RequisitionTempLine.Quantity;
                PurchLines."Unit of Measure Code" := RequisitionTempLine."Unit of Measure Code";
                PurchLines.Amount := RequisitionTempLine."Amount Excl. VAT";
                PurchLines."Shortcut Dimension 1 Code" := RequisitionTempLine."Shortcut Dimension 1 Code";
                PurchLines."Shortcut Dimension 2 Code" := RequisitionTempLine."Shortcut Dimension 2 Code";
                PurchLines."Variant Code" := RequisitionTempLine."Variant Code";
                PurchLines."Dimension Set ID" := RequisitionTempLine."Dimension Set ID";
                PurchLines."Item Category Code" := RequisitionTempLine."Item Category Code";
                PurchLines.Insert(true);
                LineNo := LineNo + 10000;
            until RequisitionTempLine.Next = 0;

        end;
        Message('Success.');
    end;


    procedure SuggestPRNPersonnel_equipmentSpecification(Purch: Record "Purchase Header")
    var
        PurchLines: Record "Purchase Line";
        RequisitionTempLine: Record "BoQ Template Line1";
        RequisitionTempheader: Record "Purchase Requisition Template";
        PRNPersonnelSpecification: Record "PRN Personnel Specification";
        PRNPersonnelqualification: Record "PRN Personnel Qualification";
        PRNPersonnelExperience: Record "PRN Personnel Experience";
        PRNEquipmentsSpecification: Record "PRN Equipment Specification";
        ProjStaffTemplate: Record "Project Staff Template Line";
        ProjStaffExperienceTemplate: Record "Project Staff Template Experie";
        ProjStaffQualificationTemplate: Record "Project Staff Template Qualifi";
        WorksEquipemntSpecification: Record "Works Equipment Template Line";
        ProjectStaffTemplateLines: Record "Project Staff Template Lines";
    begin
        // Purch.TESTFIELD("PRN Type");
        // IF Purch."PRN Type"<>Purch."PRN Type"::"Project Works" THEN
        //  ERROR('Purchase Requisition Must be Project Works');

        //Transfer the Requisition Template Lines to PRN Lines
        ProjectStaffTemplateLines.Reset;
        ProjectStaffTemplateLines.SetRange(ProjectStaffTemplateLines."Key Staff Template ID", Purch."Project Staffing Template ID");
        ProjectStaffTemplateLines.SetRange(ProjectStaffTemplateLines."Team Type", ProjectStaffTemplateLines."team type"::Contractor);
        if ProjectStaffTemplateLines.FindSet then begin
            repeat
                //Creation of PRN Personnel Specification details
                PRNPersonnelSpecification.Init;
                PRNPersonnelSpecification."Document Type" := Purch."Document Type";
                PRNPersonnelSpecification."Document No." := Purch."No.";
                PRNPersonnelSpecification."Staff Role Code" := ProjectStaffTemplateLines."Staff Role Code";
                PRNPersonnelSpecification."Title/Designation Description" := ProjectStaffTemplateLines.Designation;
                PRNPersonnelSpecification."Staff Category" := ProjectStaffTemplateLines."Staff Category";
                PRNPersonnelSpecification."Min No. of Recomm Staff" := ProjectStaffTemplateLines."Min No. of Recommended Staff";
                if not PRNPersonnelSpecification.Get(PRNPersonnelSpecification."Document Type", PRNPersonnelSpecification."Document No.",
                  PRNPersonnelSpecification."Staff Role Code") then
                    PRNPersonnelSpecification.Insert(true);
            until ProjectStaffTemplateLines.Next = 0;

        end;

        //Creation of PRN Personnel Experience details
        ProjStaffExperienceTemplate.Reset;
        ProjStaffExperienceTemplate.SetRange("Key Staff Template ID", Purch."Project Staffing Template ID");
        if ProjStaffExperienceTemplate.FindSet then begin
            repeat
                PRNPersonnelExperience.Init;
                PRNPersonnelExperience."Document Type" := Purch."Document Type";
                PRNPersonnelExperience."Document No." := Purch."No.";
                PRNPersonnelExperience."Staff Role Code" := ProjStaffExperienceTemplate."Project Role Code";
                PRNPersonnelExperience."Experience Category" := ProjStaffExperienceTemplate."Experience Category";
                PRNPersonnelExperience."Entry No" := ProjStaffExperienceTemplate."Entry No";
                PRNPersonnelExperience."Minimum Years of Experience" := ProjStaffExperienceTemplate."Minimum Years of Experience";
                PRNPersonnelExperience."Minimum Experience Req" := ProjStaffExperienceTemplate."Minimum Experience Req";
                if not PRNPersonnelExperience.Get(PRNPersonnelExperience."Document Type", PRNPersonnelExperience."Document No.",
                  PRNPersonnelExperience."Staff Role Code", PRNPersonnelExperience."Experience Category") then
                    PRNPersonnelExperience.Insert(true);
            until ProjStaffExperienceTemplate.Next = 0;
        end;

        //Creation of PRN Personnel Qualification details

        ProjStaffQualificationTemplate.Reset;
        ProjStaffQualificationTemplate.SetRange("Key Staff Template ID", Purch."Project Staffing Template ID");
        if ProjStaffQualificationTemplate.FindSet then begin
            repeat
                PRNPersonnelqualification.Init;
                PRNPersonnelqualification."Document Type" := Purch."Document Type";
                PRNPersonnelqualification."Document No." := Purch."No.";
                PRNPersonnelqualification."Staff Role Code" := ProjStaffQualificationTemplate."Project Role Code";
                PRNPersonnelqualification."Entry No" := ProjStaffQualificationTemplate."Entry No";
                PRNPersonnelqualification."Qualification Category" := ProjStaffQualificationTemplate."Qualification Category";
                PRNPersonnelqualification."Minimum Qualification Req" := ProjStaffQualificationTemplate."Minimum Qualification Req";
                if not PRNPersonnelqualification.Get(PRNPersonnelqualification."Document Type", PRNPersonnelqualification."Document No.",
                  PRNPersonnelqualification."Staff Role Code", PRNPersonnelqualification."Entry No") then
                    PRNPersonnelqualification.Insert(true);
            until ProjStaffQualificationTemplate.Next = 0;
        end;

        //Creation of PRN Equipment Specifications
        WorksEquipemntSpecification.Reset;
        WorksEquipemntSpecification.SetRange("Equipment Template ID", Purch."Works Equipment Template ID");
        if WorksEquipemntSpecification.FindSet then begin
            repeat
                PRNEquipmentsSpecification.Init;
                PRNEquipmentsSpecification."Document Type" := Purch."Document Type";
                PRNEquipmentsSpecification."Document No." := Purch."No.";
                PRNEquipmentsSpecification."Equipment Type" := WorksEquipemntSpecification."Equipment Type";
                PRNEquipmentsSpecification.Category := WorksEquipemntSpecification.Category;
                PRNEquipmentsSpecification.Description := WorksEquipemntSpecification.Description;
                PRNEquipmentsSpecification."Minimum Required Qty" := WorksEquipemntSpecification."Minimum Required Qty";
                if not PRNEquipmentsSpecification.Get(PRNEquipmentsSpecification."Document Type", PRNEquipmentsSpecification."Document No.",
                  PRNEquipmentsSpecification."Equipment Type") then
                    PRNEquipmentsSpecification.Insert(true);
            until WorksEquipemntSpecification.Next = 0;

        end;
        Message('Personnel & Equipment Specification for PRN: %1 has been suggested succesfuly', Purch."No.");
    end;

    local procedure "......Invitation For Supply................"()
    begin
    end;


    procedure PublishITT(ITT: Record "Standard Purchase Code")
    var
        Text0001: label 'The Invitation To Tender Voucher %1 should be fully approved';
    begin
        if ITT.Status <> ITT.Status::Released then
            Error(Text0001, ITT.Code);

        //Publish
        ITT.Published := true;
        ITT."Date/Time Published" := CurrentDatetime;
        ITT."Submission Start Date" := Today;
        ITT."Submission Start Time" := Time;
        ITT."Document Status" := ITT."document status"::Published;
        ITT.Modify;
    end;


    procedure SuggestRequiredDocITT(ITT: Record "Standard Purchase Code")
    var
        ProcSetup: Record "Procurement Setup";
        ProccDocumentTempLine: Record "Procurement Doc Template Line";
        IFSRequiredDoc: Record "IFS Required Document";
    begin
        ProcSetup.Get;
        ProcSetup.TestField("Default Procurement Template");
        IFSRequiredDoc.Reset;
        IFSRequiredDoc.SetRange("Document No", ITT.Code);
        if not IFSRequiredDoc.FindSet then begin
            ProccDocumentTempLine.Reset;
            ProccDocumentTempLine.SetRange("Template ID", ProcSetup."Default Procurement Template");
            ProccDocumentTempLine.SetRange("Procurement Process", ProccDocumentTempLine."procurement process"::"ITT Response");
            if ProccDocumentTempLine.FindSet then begin
                repeat
                    IFSRequiredDoc.Init;
                    IFSRequiredDoc."Document No" := ITT.Code;
                    IFSRequiredDoc."Procurement Document Type ID" := ProccDocumentTempLine."Procurement Document Type";
                    IFSRequiredDoc.Description := ProccDocumentTempLine.Description;
                    IFSRequiredDoc."Requirement Type" := ProccDocumentTempLine."Requirement Type";
                    IFSRequiredDoc.Insert(true);
                until ProccDocumentTempLine.Next = 0;
            end;

        end;
    end;


    procedure CreateAddendumNoticeITT(ITT: Record "Standard Purchase Code")
    var
        ReleasePurchDoc: Codeunit "Release Approval Document";
        TenderAddendum: Record "Tender Addendum Notice";
        ProcSetup: Record "Procurement Setup";
        TenderAddendumTypes: Record "Tender Addendum Type";
    begin
        ProcSetup.Get;
        ProcSetup.TestField("Tender Addendum Notice");
        ITT."Document Status" := ITT."document status"::Draft;
        //  ReleasePurchDoc.ReopenITT(ITT);
        ITT.Modify(true);

        //create addendum notice
        TenderAddendum.Reset;
        TenderAddendum.SetRange("Invitation Notice No.", ITT.Code);
        if not TenderAddendum.FindSet then begin
            TenderAddendum.Init;
            TenderAddendum."Addendum Notice No." := '';
            TenderAddendum."Document Date" := Today;
            TenderAddendum."Invitation Notice No." := ITT.Code;
            TenderAddendum.Description := 'Addendum Notice for Tender Notice No: ' + ITT.Code;
            TenderAddendum."Primary Addendum Type ID" := ProcSetup."Default Tender Addendum Type";
            if TenderAddendumTypes.Get(TenderAddendum."Primary Addendum Type ID") then
                TenderAddendum."Addendum Type Description" := TenderAddendumTypes.Description;
            TenderAddendum."Tender No" := ITT."External Document No";
            TenderAddendum."Tender Description" := ITT.Description;
            TenderAddendum."Responsibility Center" := ITT."Responsibility Center";
            TenderAddendum."Original Submission Start Date" := ITT."Submission Start Date";
            TenderAddendum."Original Submission End Date" := ITT."Submission End Date";
            TenderAddendum."Original Submission Start Time" := ITT."Submission Start Time";
            TenderAddendum."Original Submission End Time" := ITT."Submission End Time";
            TenderAddendum."New Submission Start Date" := ITT."Submission Start Date";
            TenderAddendum."New Submission End Date" := ITT."Submission End Date";
            TenderAddendum."New Submission Start Time" := ITT."Submission Start Time";
            TenderAddendum."New Submission End Time" := ITT."Submission End Time";
            TenderAddendum."New Bid Opening Date" := ITT."Bid Opening Date";
            TenderAddendum."New Bid Opening Time" := ITT."Bid Opening Time";
            TenderAddendum."Original Bid Opening Date" := ITT."Bid Opening Date";
            TenderAddendum."Original Bid Opening Time" := ITT."Bid Opening Time";
            TenderAddendum."Original Prebid Meeting Date" := ITT."Mandatory Pre-bid Visit Date";
            TenderAddendum."New Prebid Meeting Date" := ITT."Mandatory Pre-bid Visit Date";
            TenderAddendum."Document Status" := TenderAddendum."document status"::Draft;

            TenderAddendum.Insert(true);
        end;
    end;


    procedure CancelITT(ITT: Record "Standard Purchase Code")
    var
        Text0001: label 'The IFP voucher is still Active for submission';
        IFPResponse: Record "RFI Response";
        IFPResponseLine: Record "IFP Response Line";
        VendPrequalificationEntry: Record "Vendor Prequalification Entry";
        RandomDigit: Text[50];
        entryno: Integer;
        UserSetup: Record "User Setup";
    begin
        if ITT."Submission End Date" > Today then
            Error(Text0001);
        ITT.TestField("Cancel Reason Code");
        ITT.TestField("Cancelled By");
        //Send Random pass-key
        UserSetup.Reset;
        UserSetup.SetRange("User ID", UserId);
        UserSetup.SetRange(UserSetup."Cancel Invitation For Supply", true);
        if UserSetup.FindSet then begin
            FnSendEmaiNotificationOncancelITT(UserSetup);
        end;



        ITT."Document Status" := ITT."document status"::Cancelled;
        ITT.Modify(true);
        Message('Invitation for Prequalification %1 has been closed successfuly', ITT.Code);
    end;


    procedure FnSendEmaiNotificationOncancelITT(UserSetup: Record "User Setup")
    var
        SupplierReq: Record Contact;
        LastFieldNo: Integer;
        FooterPrinted: Boolean;
        FileDirectory: Text[100];
        FileName: Text[100];
        ReportID: Integer;
        ////"Object": Record "Object";
        Window: Dialog;
        RunOnceFile: Text[1000];
        TimeOut: Integer;
        Customer2: Record Customer;
        Cust: Record Customer;
        cr: Integer;
        lf: Integer;
        EmailBody: array[2] of Text[30];
        BodyText: Text[250];
        mymail: Codeunit Mail;
        DefaultPrinter: Text[200];
        WindowisOpen: Boolean;
        FileDialog: Codeunit Mail;
        SendingDate: Date;
        SendingTime: Time;
        Counter: Integer;
        cu400: Codeunit Mail;
        DocLog: Record "Document E-mail Log";
        BranchName: Code[80];
        DimValue: Record "Dimension Value";
        SenderAddress: Text[100];
        CustEmail: Text[100];
        HRSetup: Record "Company Information";
        Emp: Record Vendor;
        PayrollMonth: Date;
        PayrollMonthText: Text[30];
        PayPeriodtext: Text;
        PayPeriod: Record "Payroll PeriodX";
        CompInfo: Record "Company Information";
        DateFilter: Text;
        FromDate: Date;
        ToDate: Date;
        FromDateS: Text;
        ToDateS: Text;
        vend: Record Vendor;
        StartDate: Date;
        EndDAte: Date;
        EmailVerifier: Codeunit Payroll3;
        IsEmailValid: Boolean;
        PPayableSetup: Record "Procurement Setup";
        RequesterName: Text[100];
        RequesterEmail: Text[100];
        emailhdr: Text[100];
        CompanyDetails: Text[250];
        SupplierDetails: Text[1000];
        SenderMessage: Text[1000];
        ProcNote: Text[1000];
        LoginDetails: Text[1000];
        PortalUser: Record "Dynasoft Portal User";
        Password: Text[50];
        ActivationDetails: Text[1000];
        RandomDigit: Text[50];
    begin
        ///Notifying Procurement Team on supplier Request
        RandomDigit := CreateGuid;
        RandomDigit := DelChr(RandomDigit, '=', '{}-01');
        RandomDigit := CopyStr(RandomDigit, 1, 8);

        CompInfo.Get;
        HRSetup.Get;
        PPayableSetup.Get;


        /*
        RequesterEmail:=Vendor."E-Mail";
        RequesterName:=Vendor.Name;
        */
        Window.Open('Notifying the Sender...');

        WindowisOpen := true;


        Counter := Counter + 1;
        Password := RandomDigit;

        //Create message
        if HRSetup."E-Mail" = '' then
            Error('Please Contact the IT Admin to specify the E-mail address under Company Information Setup page!!');
        SenderAddress := HRSetup."E-Mail";
        CustEmail := UserSetup."E-Mail";


        CompanyDetails := 'Procurement Officer,' + '<BR></BR>' + UserSetup."Employee Name" + '<BR></BR>' + CompInfo.Name + '<BR>' + CompInfo.Address + '<BR></BR>' + CompInfo."Address 2" + '<BR></BR>' + CompInfo.City;
        SenderMessage := 'Kindly Find below you random pass key<BR>' + Password;
        if CustEmail = '' then
            exit;


        //MESSAGE:='This is to notify you that there has been a request for Registration ' +  SupplierRequest."No." + ' From Supplier'+ SupplierRequest.Name;
        emailhdr := 'e-Procurement Invitation For Supply Cancelation (ITT No:' + vend."No." + ')';

        // //cu400.CreateMessage(CompInfo.Name, SenderAddress, CustEmail, emailhdr,
        // //CompanyDetails + '<BR></BR>' + SenderMessage, true);

        // //cu400.AddCC(RequesterEmail);

        // //cu400.AddBodyline(ProcNote);


        // //cu400.Send;
        SendingDate := Today;
        SendingTime := Time;

        Sleep(1000);
        Window.Close;

    end;


    procedure CreateInvitationNotice(Purch: Record "Purchase Header")
    var
        UserSetup: Record "User Setup";
        IFS: Record "Standard Purchase Code";
        ProcSetup: Record "Procurement Setup";
        PurchLines: Record "Purchase Line";
        IFSPurchLines: Record "Standard Purchase Line";
        IFSMajorWorkDeliverable: Record "IFS Major Work_Deliverable";
        PRNMajorWorkDeliverable: Record "PRN Major Work Deliverable";
        IFSKeyStaff: Record "IFS Key Staff";
        PRNPersonnelSpecification: Record "PRN Personnel Specification";
        IFSStaffQualification: Record "IFS Staff Min Qualification";
        PRNStaffQualification: Record "PRN Personnel Qualification";
        PRNPersonnelExperience: Record "PRN Personnel Experience";
        IFSPersonnelExperience: Record "IFS Staff Min Experience";
        PRNEquipmentsSpecification: Record "PRN Equipment Specification";
        IFSEquipmentsSpecification: Record "IFS Required Equipment";
        EmailNotification: Codeunit "Email Notifications";
        CompInfo: Record "Company Information";
        PrequalifiedSuppliers: Record "Standard Vendor Purchase Code";
        PrequalifiedVendEntry: Record "Vendor Prequalification Entry";
    begin
        if Purch."PRN Conversion Procedure" <> Purch."prn conversion procedure"::"Invitation For Supply" then
            Error('The PRN %1  must be one that supports direct creation of Invitation Notices', Purch."No.");
        //  ProcSetup.Get;
        //Check Procurement User
        UserSetup.Reset;
        UserSetup.SetRange("User ID", UserId);
        if UserSetup.FindFirst() then begin
            UserSetup.TestField("Purchase Resp. Ctr. Filter");
            // if UserSetup."Authorize IFS Creator" = false then
            //   Error('You Must be Authorized IFS Creator, Kindly contact system administrator');
            //  if UserSetup."Purchase Resp. Ctr. Filter" <> Purch."Responsibility Center" then
            //  Error('You are not authorized to create IFS for this resonsibility center %1', Purch."Responsibility Center");
        end;

        //check if the PRN has associated IFS Notice
        if (Purch."Ordered PRN" = true) or (Purch."Linked IFS No." <> '') then
            Error('The PRN %1 has been already ordered', Purch."No.");

        //The total value of the PRN request must be within the available procurement budget
        if Purch."Total PRN Amount (LCY)" > Purch."PP Total Available Budget" then
            Error('The total value of the PRN request must be within the available procurement budget');

        //Testfields no blanks allowed
        Purch.TestField("PP  Invitation Notice Type");
        Purch.TestField("PP Solicitation Type");
        Purch.TestField("PP Procurement Method");

        //create multiple IFS
        if Purch."Multiple IFS" = true then begin
            CreateMultipleInvitationNotice(Purch);
        end else begin

            //Action should automatically create an Invitation For Supply (IFS)
            IFS.Reset;
            IFS.SetRange("PRN No.", Purch."No.");
            if not IFS.FindFirst() then begin
                IFS.Init;
                IFS.Validate("Invitation Notice Type", Purch."PP  Invitation Notice Type");
                IFS.Validate(Description, Purch.Description);
                IFS.Validate("Tender Name", Purch.Description);
                IFS.Validate(Name, Purch.Description);
                IFS.Validate("Tender Summary", Purch.Description);
                IFS.Code := '';

                //IFS."Location Code":=Purch."Location Code";
                IFS.Validate("Location Code", Purch."Location Code");
                IFS.Validate("Requisition Product Group", Purch."Requisition Product Group");
                IFS.Validate("Document Date", Today);
                IFS.Validate("PRN No.", Purch."No.");
                IFS.Validate("Responsibility Center", Purch."Responsibility Center");
                IFS.Validate("Requisition Product Group", Purch."Requisition Product Group");
                IFS.Validate("Requisition Template ID", Purch."Requisition Template ID");
                IFS.Validate("Solicitation Type", Purch."PP Solicitation Type");
                IFS.Validate("Bid Selection Method", Purch."PP Bid Selection Method");
                IFS.Validate("Procurement Method", Purch."PP Procurement Method");
                if IFS."Invitation Notice Type" = IFS."invitation notice type"::"Single  Stage Tender" then begin
                    //ccccc      // IFS.Validate("Tender Validity Duration", ProcSetup."Default Single Stage Tender");
                    IFS."Bid Envelop Type" := IFS."bid envelop type"::"1-Envelop";
                end;
                if IFS."Invitation Notice Type" = IFS."invitation notice type"::"Two Stage Tender" then begin
                    //ccccc///   IFS.Validate("Tender Validity Duration", ProcSetup."Default Two Stage Tender valid");
                    IFS."Bid Envelop Type" := IFS."bid envelop type"::"2-Envelop";
                end;
                if IFS."Invitation Notice Type" = IFS."invitation notice type"::RFQ then begin
                    ////ccc/////  IFS.Validate("Tender Validity Duration", ProcSetup."Default RFQ Validity Duration");
                    IFS."Bid Envelop Type" := IFS."bid envelop type"::"1-Envelop";
                end;
                if IFS."Invitation Notice Type" = IFS."invitation notice type"::"Low Value Procurement" then begin
                    /////cccccc// IFS.Validate("Tender Validity Duration", ProcSetup."Default LVP Validity Duration");
                    IFS."Bid Envelop Type" := IFS."bid envelop type"::"1-Envelop";
                end;
                IFS.Validate("Purchaser Code", Purch."Purchaser Code");
                ////cccc//// IFS.Validate("Language Code", ProcSetup."Default Language Code");
                ////ccccc// IFS.Validate("Appointer of Bid Arbitrator", ProcSetup."Default Arbitrator Appointer");
                IFS.Validate("Requesting Region", Purch.Region);
                //IFS.Validate("Global Dimension 2 Code", Purch."Shortcut Dimension 1 Code");
                IFS.Validate("Global Dimension 2 Code", Purch."Shortcut Dimension 2 Code");
                IFS.Validate("Directorate Code", Purch."Directorate Code");
                //MESSAGE('"Directorate Code" %1',Purch."Directorate Code");
                IFS.Validate("Department Code", Purch."Department Code");
                IFS.Validate("Procurement Plan ID", Purch."Procurement Plan ID");
                IFS.Validate("Procurement Plan Entry No", Purch."Procurement Plan Entry No");
                IFS.Validate(Job, Purch.Job);
                IFS.Validate("Job Task No.", Purch."Job Task No.");
                //IFS."Job Task No.":=Purch."Job Task No.";
                IFS.Validate("PP Planning Category", Purch."PP Planning Category");
                IFS.Validate("PP Funding Source ID", Purch."PP Funding Source ID");
                IFS.Validate("PP Total Budget", Purch."PP Total Budget");
                IFS.Validate("PP Total Actual Costs", Purch."PP Total Actual Costs");
                IFS.Validate("PP Total Commitments", Purch."PP Total Commitments");
                IFS.Validate("PP Total Available Budget", Purch."PP Total Available Budget");
                IFS.Validate("PP Preference/Reservation Code", Purch."PP Preference/Reservation Code");
                //IFS.VALIDATE("Financial Year Code",ProcSetup.
                IFS.Validate("Works Category", Purch."Works Category");
                IFS.Validate("Road Code", Purch."Road Code");
                IFS.Validate("Road Link Name", Purch."Link Name");
                IFS.Validate("Constituency ID", Purch.Consitituency);
                IFS.Validate("Procurement Type", Purch."Procurement Type");
                IFS.Validate("Procurement Category ID", Purch."PP Planning Category");
                IFS.Validate("Project ID", Purch.Job);
                IFS.Validate("Requesting Directorate", Purch."Directorate Code");
                IFS.Validate("Requesting Department", Purch."Department Code");

                CompInfo.Get;
                IFS.Address := CompInfo.Address;
                IFS."Procuring Entity Name/Contact" := CompInfo.Name;
                IFS."Address 2" := CompInfo."Address 2";
                IFS."Post Code" := CompInfo."Post Code";
                IFS.City := CompInfo.City;
                IFS."Country/Region Code" := CompInfo."Country/Region Code";
                IFS."Phone No." := CompInfo."Phone No.";
                IFS."E-Mail" := CompInfo."E-Mail";
                IFS."Primary Tender Submission" := CompInfo.Address;
                IFS."Primary Engineer Contact" := CompInfo.Address;
                if IFS.Insert(true) then begin
                    PurchLines.Reset;
                    PurchLines.SetRange("Document No.", Purch."No.");
                    PurchLines.SetRange("Document Type", Purch."Document Type");
                    PurchLines.SetRange("IFS Created", false);
                    //PurchLines.SETRANGE(Selected,TRUE);
                    if PurchLines.FindSet then begin
                        repeat
                            //2.IFS Purchase Lines (T174)-Default values shall be inherited from PRN Lines (T39)
                            IFSPurchLines.Init;
                            IFSPurchLines.Validate("Standard Purchase Code", IFS.Code);
                            IFSPurchLines.Validate("Line No.", PurchLines."Line No.");
                            IFSPurchLines.Validate(Type, PurchLines.Type);
                            IFSPurchLines.Validate("No.", PurchLines."No.");
                            IFSPurchLines.Validate(Description, PurchLines.Description);
                            IF PurchLines.Quantity > 0 then begin
                                IFSPurchLines.Validate(Quantity, PurchLines.Quantity);
                            end;
                            IFSPurchLines.Validate("Contract Type", PurchLines."Contract Type");
                            IFSPurchLines.Validate("Unit of Measure Code", PurchLines."Unit of Measure Code");
                            IFSPurchLines.Validate("Shortcut Dimension 1 Code", PurchLines."Shortcut Dimension 1 Code");
                            IFSPurchLines.Validate("Shortcut Dimension 2 Code", PurchLines."Shortcut Dimension 2 Code");
                            IFSPurchLines.Validate("Variant Code", PurchLines."Variant Code");
                            IFSPurchLines.Validate("Dimension Set ID", PurchLines."Dimension Set ID");
                            IFSPurchLines.Validate("Item Category", PurchLines."Item Category Code");
                            IFSPurchLines.Validate("FA Posting Type", PurchLines."FA Posting Type");
                            IFSPurchLines.Validate("Maintenance Code", PurchLines."Maintenance Code");
                            if IFSPurchLines.Insert(true) then begin
                                PurchLines."IFS Created" := true;
                                PurchLines.Selected := false;
                                PurchLines.Modify(true);
                            end;
                        until PurchLines.Next = 0;
                    end;

                    //3.IFS Major Work Deliverables table-Default values shall be inherited from the PRN Major Work Deliverable table
                    PRNMajorWorkDeliverable.Reset;
                    PRNMajorWorkDeliverable.SetRange("Document No.", Purch."No.");
                    if PRNMajorWorkDeliverable.FindSet then begin
                        repeat
                            IFSMajorWorkDeliverable.Init;
                            IFSMajorWorkDeliverable.Validate("Document No", IFS.Code);
                            IFSMajorWorkDeliverable.Validate("Entry No", PRNMajorWorkDeliverable."Entry No");
                            IFSMajorWorkDeliverable.Validate("Major Activity Description", PRNMajorWorkDeliverable.Description);
                            IFSMajorWorkDeliverable.Insert(true);
                        until PRNMajorWorkDeliverable.Next = 0;
                    end;

                    //4.IFS Key Staff table-Default values shall be inherited from the PRN Personnel Specification IFS Key Staff Table FieldsMapping Rules
                    PRNPersonnelSpecification.Reset;
                    PRNPersonnelSpecification.SetRange("Document No.", Purch."No.");
                    if PRNPersonnelSpecification.FindSet then begin
                        repeat
                            IFSKeyStaff.Init;
                            IFSKeyStaff."IFS Code" := IFS.Code;
                            IFSKeyStaff."Staff Role Code" := PRNPersonnelSpecification."Staff Role Code";
                            IFSKeyStaff."Title/Designation Description" := PRNPersonnelSpecification."Title/Designation Description";
                            IFSKeyStaff."Staff Category" := PRNPersonnelSpecification."Staff Category";
                            IFSKeyStaff."Min No. of Recomm Staff" := PRNPersonnelSpecification."Min No. of Recomm Staff";
                            IFSKeyStaff.Insert(true);
                        until PRNPersonnelSpecification.Next = 0;
                    end;

                    //5.IFS Staff Min Qualification-Default values shall be inherited from the PRN Personnel Qualification
                    PRNStaffQualification.Reset;
                    PRNStaffQualification.SetRange("Document No.", Purch."No.");
                    if PRNStaffQualification.FindSet then begin
                        repeat
                            IFSStaffQualification.Init;
                            IFSStaffQualification."IFS Code" := IFS.Code;
                            IFSStaffQualification."Project Role Code" := PRNStaffQualification."Staff Role Code";
                            IFSStaffQualification."Entry No" := PRNStaffQualification."Entry No";
                            IFSStaffQualification."Qualification Category" := PRNStaffQualification."Qualification Category";
                            IFSStaffQualification."Minimum Qualification Req" := PRNStaffQualification."Minimum Qualification Req";
                            IFSStaffQualification.Insert(true);
                        until PRNStaffQualification.Next = 0;
                    end;

                    //6.IFS Staff Min Experience -Default values shall be inherited from the PRN Personnel Experience
                    PRNPersonnelExperience.Reset;
                    PRNPersonnelExperience.SetRange("Document No.", Purch."No.");
                    if PRNPersonnelExperience.FindSet then begin
                        repeat
                            IFSPersonnelExperience.Init;
                            IFSPersonnelExperience."IFS Code" := IFS.Code;
                            IFSPersonnelExperience."Project Role Code" := PRNPersonnelExperience."Staff Role Code";
                            IFSPersonnelExperience."Experience Category" := PRNPersonnelExperience."Experience Category";
                            IFSPersonnelExperience."Entry No" := PRNPersonnelExperience."Entry No";
                            IFSPersonnelExperience."Minimum Years of Experience" := PRNPersonnelExperience."Minimum Years of Experience";
                            IFSPersonnelExperience."Minimum Experience Req" := PRNPersonnelExperience."Minimum Experience Req";
                            IFSPersonnelExperience.Insert(true);

                        until PRNPersonnelExperience.Next = 0;
                    end;

                    //7.IFS Required Equipment- Default values shall be inherited from the PRN Equipment Specification
                    PRNEquipmentsSpecification.Reset;
                    PRNEquipmentsSpecification.SetRange("Document No.", Purch."No.");
                    if PRNEquipmentsSpecification.FindSet then begin
                        repeat

                            IFSEquipmentsSpecification.Init;
                            IFSEquipmentsSpecification."Document No" := IFS.Code;
                            IFSEquipmentsSpecification."Equipment Type Code" := PRNEquipmentsSpecification."Equipment Type";
                            IFSEquipmentsSpecification.Category := PRNEquipmentsSpecification.Category;
                            IFSEquipmentsSpecification.Description := PRNEquipmentsSpecification.Description;
                            IFSEquipmentsSpecification."Minimum Required Qty" := PRNEquipmentsSpecification."Minimum Required Qty";
                            IFSEquipmentsSpecification.Insert(true);
                        until PRNEquipmentsSpecification.Next = 0;
                    end;
                    //8.IFS Prequalified Vendors- Default values shall be inherited from the Vendor Prequalified Entry

                    PrequalifiedVendEntry.Reset;
                    PrequalifiedVendEntry.SetRange("Procurement Category Code", IFS."Procurement Category ID");
                    if PrequalifiedVendEntry.FindSet then begin
                        repeat
                        ///ccc
                        // PrequalifiedSuppliers.Init;
                        // PrequalifiedSuppliers.Validate(PrequalifiedSuppliers."Vendor No.", PrequalifiedVendEntry."Vendor No.");
                        // PrequalifiedSuppliers.Code := IFS.Code;
                        // PrequalifiedSuppliers."IFS Code" := IFS.Code;
                        // PrequalifiedSuppliers.Description := IFS.Description;
                        // //PrequalifiedSuppliers."Vendor Name" := PrequalifiedVendEntry.Description;
                        // PrequalifiedSuppliers.Insert(true);
                        //ccc commented out                        
                        until PrequalifiedVendEntry.Next = 0;



                        //     PrequalifiedSuppliers.INIT;
                        //     PrequalifiedSuppliers.VALIDATE(PrequalifiedSuppliers."Vendor No.", PrequalifiedVendEntry."Vendor No.");
                        //     PrequalifiedSuppliers.Code := IFS.Code;
                        //     PrequalifiedSuppliers."IFS Code" := IFS.Code;
                        //     PrequalifiedSuppliers.Description := IFS.Description;
                        //     //PrequalifiedSuppliers."Vendor Name":=PrequalifiedVendEntry.;
                        //     PrequalifiedSuppliers.INSERT(TRUE);
                        // UNTIL PrequalifiedVendEntry.NEXT = 0;
                    end;
                end;
                Message('Purchase Requisition No: %1 has successfully been converted to Invitation for Supply No: %2. Please check', Purch."No.", IFS.Code);
                // IF IFS."Invitation Notice Type" = IFS."Invitation Notice Type"::RFQ THEN
                //     PAGE.RUN(75121, IFS)
                // ELSE
                //     PAGE.RUN(75078, IFS);
                Case Purch."PP Procurement Method" of
                    Purch."PP Procurement Method"::RFQ:
                        PAGE.RUN(75121, IFS);
                    Purch."PP Procurement Method"::"Open Tender":
                        PAGE.RUN(page::"Invitation To Tender", IFS);
                    Purch."PP Procurement Method"::"Two-Stage Tender":
                        PAGE.RUN(page::"Invitation To Tender", IFS);
                    Purch."PP Procurement Method"::"Direct Procurement":
                        PAGE.RUN(page::"Direct Procurement Card", IFS)
                    else
                        PAGE.RUN(75399, IFS);
                end;

                PurchLines.Reset;
                PurchLines.SetRange("Document No.", Purch."No.");
                PurchLines.SetRange("Document Type", Purch."Document Type");
                if PurchLines.FindSet then
                    repeat
                        if PurchLines."IFS Created" = true then begin
                            Purch."Ordered PRN" := true;
                            Purch."PRN Order Date/Time" := CurrentDatetime;
                            Purch."Linked IFS No." := IFS.Code;
                            Purch.Modify(true);
                        end;
                    until PurchLines.Next = 0;

                //Back Email Notification to requestor.
                //CC//EmailNotification.SendPRNApprovedMailAfterIFSCreation(Purch);

            end;
        end;
    end;


    procedure CopyPRNDetails(Purch: Record "Purchase Header"; IFSDetail: Record "Standard Purchase Code")
    var
        UserSetup: Record "User Setup";
        IFS: Record "Standard Purchase Code";
        ProcSetup: Record "Procurement Setup";
        PurchLines: Record "Purchase Line";
        IFSPurchLines: Record "Standard Purchase Line";
        IFSMajorWorkDeliverable: Record "IFS Major Work_Deliverable";
        PRNMajorWorkDeliverable: Record "PRN Major Work Deliverable";
        IFSKeyStaff: Record "IFS Key Staff";
        PRNPersonnelSpecification: Record "PRN Personnel Specification";
        IFSStaffQualification: Record "IFS Staff Min Qualification";
        PRNStaffQualification: Record "PRN Personnel Qualification";
        PRNPersonnelExperience: Record "PRN Personnel Experience";
        IFSPersonnelExperience: Record "IFS Staff Min Experience";
        PRNEquipmentsSpecification: Record "PRN Equipment Specification";
        IFSEquipmentsSpecification: Record "IFS Required Equipment";
        EmailNotification: Codeunit "Email Notifications";
    begin
        if Purch."PRN Conversion Procedure" <> Purch."prn conversion procedure"::"Invitation For Supply" then
            Error('The PRN %1  must be one that supports direct creation of Invitation Notices', Purch."No.");
        ProcSetup.Get;
        //Check Procurement User
        UserSetup.Reset;
        UserSetup.SetRange("User ID", UserId);
        if UserSetup.FindSet then begin
            UserSetup.TestField("Purchase Resp. Ctr. Filter");
            if UserSetup."Authorize IFS Creator" = false then
                Error('You Must be Authorized IFS Creator, Kindly contact system administrator');
            if UserSetup."Purchase Resp. Ctr. Filter" <> Purch."Responsibility Center" then
                Error('You are not authorized to create IFS for this resonsibility center %1', Purch."Responsibility Center");
        end;

        //check if the PRN has associated IFS Notice
        /* IF (Purch."Ordered PRN"=TRUE) OR (Purch."Linked IFS No."<>'') THEN
           ERROR('The PRN %1 has been already ordered',Purch."No.");*/

        //The total value of the PRN request must be within the available procurement budget
        /*IF Purch."Total PRN Amount (LCY)">Purch."PP Total Available Budget" THEN
          ERROR('The total value of the PRN request must be within the available procurement budget');*/

        //Testfields no blanks allowed
        Purch.TestField("PP  Invitation Notice Type");
        Purch.TestField("PP Solicitation Type");
        Purch.TestField("PP Procurement Method");

        //Action should automatically create an Invitation For Supply (IFS)
        IFS.Reset;
        IFS.SetRange(Code, IFSDetail.Code);
        if IFS.FindSet then begin
            IFS.Init;
            //IFS.Code:='';
            IFS.Validate("Invitation Notice Type", Purch."PP  Invitation Notice Type");
            IFS.Validate("Document Date", Today);
            IFS.Validate("PRN No.", Purch."No.");
            IFS.Validate("Responsibility Center", Purch."Responsibility Center");
            IFS.Validate("Location Code", Purch."Location Code");
            IFS.Validate("Procurement Type", Purch."Procurement Type");
            IFS.Validate("Requisition Product Group", Purch."Requisition Product Group");
            IFS.Validate("Requisition Template ID", Purch."Requisition Template ID");
            IFS.Validate("Solicitation Type", Purch."PP Solicitation Type");
            IFS.Validate("Bid Selection Method", Purch."PP Bid Selection Method");
            IFS.Validate("Procurement Method", Purch."PP Procurement Method");
            if IFS."Invitation Notice Type" = IFS."invitation notice type"::"Single  Stage Tender" then
                IFS.Validate("Tender Validity Duration", ProcSetup."Default Single Stage Tender");
            if IFS."Invitation Notice Type" = IFS."invitation notice type"::"Two Stage Tender" then
                IFS.Validate("Tender Validity Duration", ProcSetup."Default Two Stage Tender valid");
            if IFS."Invitation Notice Type" = IFS."invitation notice type"::RFQ then
                IFS.Validate("Tender Validity Duration", ProcSetup."Default RFQ Validity Duration");
            if IFS."Invitation Notice Type" = IFS."invitation notice type"::"Low Value Procurement" then
                IFS.Validate("Tender Validity Duration", ProcSetup."Default LVP Validity Duration");
            IFS.Validate("Purchaser Code", UserSetup."Salespers./Purch. Code");
            IFS.Validate("Language Code", ProcSetup."Default Language Code");
            IFS.Validate("Appointer of Bid Arbitrator", ProcSetup."Default Arbitrator Appointer");
            IFS.Validate("Requesting Region", Purch.Region);
            IFS.Validate("Directorate Code", Purch."Directorate Code");
            IFS.Validate("Department Code", Purch."Department Code");
            IFS.Validate("Procurement Plan ID", Purch."Procurement Plan ID");
            IFS.Validate("Procurement Plan Entry No", Purch."Procurement Plan Entry No");
            IFS.Validate(Job, Purch.Job);
            IFS.Validate("Job Task No.", Purch."Job Task No.");
            IFS.Validate("PP Planning Category", Purch."PP Planning Category");
            IFS.Validate("PP Funding Source ID", Purch."Funding Source");
            IFS.Validate("PP Total Budget", Purch."PP Total Budget");
            IFS.Validate("PP Total Actual Costs", Purch."PP Total Actual Costs");
            IFS.Validate("PP Total Commitments", Purch."PP Total Commitments");
            IFS.Validate("PP Total Available Budget", Purch."PP Total Available Budget");
            IFS.Validate("PP Preference/Reservation Code", Purch."PP Preference/Reservation Code");
            //IFS.VALIDATE("Financial Year Code",ProcSetup.
            IFS.Validate("Works Category", Purch."Works Category");
            IFS.Validate("Road Code", Purch."Road Code");
            IFS.Validate("Road Link Name", Purch."Link Name");
            IFS.Validate("Constituency ID", Purch.Consitituency);
            if IFS.Modify(true) then begin
                PurchLines.Reset;
                PurchLines.SetRange("Document No.", Purch."No.");
                PurchLines.SetRange("Document Type", Purch."Document Type");
                if PurchLines.FindSet then begin
                    repeat
                        //2.IFS Purchase Lines (T174)-Default values shall be inherited from PRN Lines (T39)
                        IFSPurchLines.Init;
                        IFSPurchLines.Validate("Standard Purchase Code", IFS.Code);
                        IFSPurchLines.Validate("Line No.", PurchLines."Line No.");
                        IFSPurchLines.Validate(Type, PurchLines.Type);
                        IFSPurchLines.Validate("No.", PurchLines."No.");
                        IFSPurchLines.Validate(Description, PurchLines.Description);
                        IFSPurchLines.Validate(Quantity, PurchLines.Quantity);
                        IFSPurchLines.Validate("Unit of Measure Code", PurchLines."Unit of Measure Code");
                        IFSPurchLines.Validate("Shortcut Dimension 1 Code", PurchLines."Shortcut Dimension 1 Code");
                        IFSPurchLines.Validate("Shortcut Dimension 2 Code", PurchLines."Shortcut Dimension 2 Code");
                        IFSPurchLines.Validate("Variant Code", PurchLines."Variant Code");
                        IFSPurchLines.Validate("Dimension Set ID", PurchLines."Dimension Set ID");
                        IFSPurchLines.Validate("Item Category", PurchLines."Item Category Code");
                        IFSPurchLines.Insert(true);
                    until PurchLines.Next = 0;
                end;

                //3.IFS Major Work Deliverables table-Default values shall be inherited from the PRN Major Work Deliverable table
                PRNMajorWorkDeliverable.Reset;
                PRNMajorWorkDeliverable.SetRange("Document No.", Purch."No.");
                if PRNMajorWorkDeliverable.FindSet then begin
                    repeat
                        IFSMajorWorkDeliverable.Init;
                        IFSMajorWorkDeliverable.Validate("Document No", IFS.Code);
                        IFSMajorWorkDeliverable.Validate("Entry No", PRNMajorWorkDeliverable."Entry No");
                        IFSMajorWorkDeliverable.Validate("Major Activity Description", PRNMajorWorkDeliverable.Description);
                        IFSMajorWorkDeliverable.Insert(true);
                    until PRNMajorWorkDeliverable.Next = 0;
                end;

                //4.IFS Key Staff table-Default values shall be inherited from the PRN Personnel Specification IFS Key Staff Table FieldsMapping Rules
                PRNPersonnelSpecification.Reset;
                PRNPersonnelSpecification.SetRange("Document No.", Purch."No.");
                if PRNPersonnelSpecification.FindSet then begin
                    repeat
                        IFSKeyStaff.Init;
                        IFSKeyStaff."IFS Code" := IFS.Code;
                        IFSKeyStaff."Staff Role Code" := PRNPersonnelSpecification."Staff Role Code";
                        IFSKeyStaff."Title/Designation Description" := PRNPersonnelSpecification."Title/Designation Description";
                        IFSKeyStaff."Staff Category" := PRNPersonnelSpecification."Staff Category";
                        IFSKeyStaff."Min No. of Recomm Staff" := PRNPersonnelSpecification."Min No. of Recomm Staff";
                        IFSKeyStaff.Insert(true);
                    until PRNPersonnelSpecification.Next = 0;
                end;

                //5.IFS Staff Min Qualification-Default values shall be inherited from the PRN Personnel Qualification
                PRNStaffQualification.Reset;
                PRNStaffQualification.SetRange("Document No.", Purch."No.");
                if PRNStaffQualification.FindSet then begin
                    repeat
                        IFSStaffQualification.Init;
                        IFSStaffQualification."IFS Code" := IFS.Code;
                        IFSStaffQualification."Project Role Code" := PRNStaffQualification."Staff Role Code";
                        IFSStaffQualification."Entry No" := PRNStaffQualification."Entry No";
                        IFSStaffQualification."Qualification Category" := PRNStaffQualification."Qualification Category";
                        IFSStaffQualification."Minimum Qualification Req" := PRNStaffQualification."Minimum Qualification Req";
                        IFSStaffQualification.Insert(true);
                    until PRNStaffQualification.Next = 0;
                end;

                //6.IFS Staff Min Experience -Default values shall be inherited from the PRN Personnel Experience
                PRNPersonnelExperience.Reset;
                PRNPersonnelExperience.SetRange("Document No.", Purch."No.");
                if PRNPersonnelExperience.FindSet then begin
                    repeat
                        IFSPersonnelExperience.Init;
                        IFSPersonnelExperience."IFS Code" := IFS.Code;
                        IFSPersonnelExperience."Project Role Code" := PRNPersonnelExperience."Staff Role Code";
                        IFSPersonnelExperience."Experience Category" := PRNPersonnelExperience."Experience Category";
                        IFSPersonnelExperience."Entry No" := PRNPersonnelExperience."Entry No";
                        IFSPersonnelExperience."Minimum Years of Experience" := PRNPersonnelExperience."Minimum Years of Experience";
                        IFSPersonnelExperience."Minimum Experience Req" := PRNPersonnelExperience."Minimum Experience Req";
                        IFSPersonnelExperience.Insert(true);

                    until PRNPersonnelExperience.Next = 0;
                end;

                //7.IFS Required Equipment- Default values shall be inherited from the PRN Equipment Specification
                PRNEquipmentsSpecification.Reset;
                PRNEquipmentsSpecification.SetRange("Document No.", Purch."No.");
                if PRNEquipmentsSpecification.FindSet then begin
                    repeat

                        IFSEquipmentsSpecification.Init;
                        IFSEquipmentsSpecification."Document No" := IFS.Code;
                        IFSEquipmentsSpecification."Equipment Type Code" := PRNEquipmentsSpecification."Equipment Type";
                        IFSEquipmentsSpecification.Category := PRNEquipmentsSpecification.Category;
                        IFSEquipmentsSpecification.Description := PRNEquipmentsSpecification.Description;
                        IFSEquipmentsSpecification."Minimum Required Qty" := PRNEquipmentsSpecification."Minimum Required Qty";
                        IFSEquipmentsSpecification.Insert(true);
                    until PRNEquipmentsSpecification.Next = 0;
                end;
            end;
            Purch."Ordered PRN" := true;
            Purch."PRN Order Date/Time" := CurrentDatetime;
            Purch."Linked IFS No." := IFS.Code;
            if Purch.Modify(true) then
                Message('Purchase Requisition No: %1 has successfully been converted to Invitation Notice No: %2. Please check', Purch."No.", IFS.Code);
            Page.Run(75078, IFS);

            //Back Email Notification to requestor.
            EmailNotification.SendPRNApprovedMailAfterIFSCreation(Purch);

        end;

    end;


    procedure CancelIFSInvitation(IFS: Record "Standard Purchase Code")
    var
        Text0001: label 'The IFP voucher is still Active for submission';
        BIDResponse: Record "Purchase Header";
        IFPResponseLine: Record "IFP Response Line";
        VendPrequalificationEntry: Record "Vendor Prequalification Entry";
        UserSetup: Record "User Setup";
        TenderCommitteAppointment: Record "IFS Tender Committee";
        IFSPrebid: Record "IFS Prebid Register";
        TenderAddendum: Record "Tender Addendum Notice";
        BidOpeningRegister: Record "Bid Opening Register";
        BidEvaluation: Record "Bid Evaluation Register";
        BidTabulation: Record "Bid Tabulation Header";
    begin
        //Check Procurement User
        UserSetup.Reset;
        UserSetup.SetRange("User ID", UserId);
        if UserSetup.FindSet then begin
            UserSetup.TestField("Purchase Resp. Ctr. Filter");
            if UserSetup."Cancel Invitation For Supply" = false then
                Error('The function can only be executed by authorized users , Kindly contact system administrator');
            if UserSetup."Purchase Resp. Ctr. Filter" <> IFS."Responsibility Center" then
                Error('You are not authorized to create IFS for this resonsibility center %1', IFS."Responsibility Center");
        end;

        //check for IFS random key
        if IFS."Sent Cancellation Secret Code" = '' then begin
            FnSendSecretCodeOnIFSCancellation(IFS, UserId);
        end else begin
            if IFS."Cancellation Secret Code" <> IFS."Sent Cancellation Secret Code" then
                Error('Kindly input The correct Cancellation Secret Code sent to your EMail %1', UserSetup."E-Mail");
        end;
        IFS.TestField("Cancel Reason Code");
        IFS.TestField("Cancellation Date");

        //v.The Tender Committee Appointment Vouchers linked to the IFS shall be cancelled
        TenderCommitteAppointment.Reset;
        TenderCommitteAppointment.SetRange("IFS Code", IFS.Code);
        if TenderCommitteAppointment.FindSet then begin
            TenderCommitteAppointment."Document Status" := TenderCommitteAppointment."document status"::Cancelled;
            TenderCommitteAppointment.Modify(true);
        end;

        //vi.The prebid meeting register linked to the IFS shall be cancelled
        IFSPrebid.Reset;
        IFSPrebid.SetRange("IFS Code", IFS.Code);
        if IFSPrebid.FindSet then begin
            IFSPrebid."Document Status" := IFS."document status"::Cancelled;
            IFSPrebid.Modify(true);
        end;

        //vii.The Bid Response Vouchers (Mapped to Quotes on T38) linked to this IFS shall be marked as Cancelled
        BIDResponse.Reset;
        BIDResponse.SetRange("Linked IFS No.", IFS.Code);
        if BIDResponse.FindSet then begin
            BIDResponse."Document Status" := BIDResponse."document status"::Cancelled;
            BIDResponse.Modify(true);
        end;

        //viii.Any Tender Addendum Notices linked to a given IFS shall be set to cancelled
        TenderAddendum.Reset;
        TenderAddendum.SetRange("Invitation Notice No.", IFS.Code);
        if TenderAddendum.FindSet then begin
            TenderAddendum."Document Status" := TenderAddendum."document status"::Cancelled;
            TenderAddendum.Modify(true);
        end;

        //Any bid/tender opening register linked to the IFS shall be cancelled
        BidOpeningRegister.Reset;
        BidOpeningRegister.SetRange("IFS Code", IFS.Code);
        if BidOpeningRegister.FindSet then begin
            BidOpeningRegister."Document Status" := BidOpeningRegister."document status"::Cancelled;
            BidOpeningRegister.Modify(true);
        end;

        //x.Any bid evaluation register linked to the IFS shall be cancelled
        BidEvaluation.Reset;
        BidEvaluation.SetRange("IFS Code", IFS.Code);
        if BidEvaluation.FindSet then begin
            BidEvaluation."Document Status" := BidEvaluation."document status"::Cancelled;
            BidEvaluation.Modify(true);
        end;

        //xi.Any bid evaluation report, Procurement Professional Opinion or Notice of Award linked to the IFS shall be cancelled by
        BidTabulation.Reset;
        BidTabulation.SetRange("IFS Code", IFS.Code);
        if BidTabulation.FindSet then begin
            BidTabulation."Document Status" := BidTabulation."document status"::Rejected;
            BidTabulation.Modify(true)
        end;



        IFS."Document Status" := IFS."document status"::Cancelled;
        IFS.Modify(true);
        //Send E-Regret Email to vendors
        // FnNotifyonTenderTermination(IFS);
        // FnUncommitPRNNOA(IFS);
        Message('Invitation for Tender %1 has been Cancelled successfuly', IFS.Code);
    end;


    procedure FnSendSecretCodeOnIFSCancellation(IFS: Record "Standard Purchase Code"; User1: Code[50])
    var
        SupplierReq: Record Contact;
        LastFieldNo: Integer;
        FooterPrinted: Boolean;
        FileDirectory: Text[100];
        FileName: Text[100];
        ReportID: Integer;
        //   //"Object": Record "Object";
        Window: Dialog;
        RunOnceFile: Text[1000];
        TimeOut: Integer;
        Customer2: Record Customer;
        Cust: Record Customer;
        cr: Integer;
        lf: Integer;
        EmailBody: array[2] of Text[30];
        BodyText: Text[250];
        mymail: Codeunit Mail;
        DefaultPrinter: Text[200];
        WindowisOpen: Boolean;
        FileDialog: Codeunit Mail;
        SendingDate: Date;
        SendingTime: Time;
        Counter: Integer;
        cu400: Codeunit Mail;
        DocLog: Record "Document E-mail Log";
        BranchName: Code[80];
        DimValue: Record "Dimension Value";
        SenderAddress: Text[100];
        CustEmail: Text[100];
        UserSetup: Record "User Setup";
        HRSetup: Record "Company Information";
        Emp: Record Vendor;
        PayrollMonth: Date;
        PayrollMonthText: Text[30];
        PayPeriodtext: Text;
        PayPeriod: Record "Payroll PeriodX";
        CompInfo: Record "Company Information";
        DateFilter: Text;
        FromDate: Date;
        ToDate: Date;
        FromDateS: Text;
        ToDateS: Text;
        vend: Record Vendor;
        StartDate: Date;
        EndDAte: Date;
        EmailVerifier: Codeunit Payroll3;
        IsEmailValid: Boolean;
        PPayableSetup: Record "Procurement Setup";
        RequesterName: Text[100];
        RequesterEmail: Text[100];
        emailhdr: Text[100];
        CompanyDetails: Text[250];
        SupplierDetails: Text[1000];
        SenderMessage: Text[1000];
        ProcNote: Text[1000];
        LoginDetails: Text[1000];
        PortalUser: Record "Dynasoft Portal User";
        Password: Text[50];
        ActivationDetails: Text[1000];
        RandomDigit: Text[50];
    begin
        ///Notifying Procurement Team on supplier Request


        CompInfo.Get;
        HRSetup.Get;
        PPayableSetup.Get;

        UserSetup.Reset;
        UserSetup.SetRange("User ID", User1);
        if UserSetup.FindSet then
            RequesterEmail := UserSetup."E-Mail";
        RequesterName := UserSetup.UserName;

        Window.Open('Notifying the Sender...');

        WindowisOpen := true;

        RandomDigit := CreateGuid;
        RandomDigit := DelChr(RandomDigit, '=', '{}-01');
        RandomDigit := CopyStr(RandomDigit, 1, 8);

        Counter := Counter + 1;

        Password := RandomDigit;

        //Create message
        if HRSetup."E-Mail" = '' then
            Error('Please Contact the IT Admin to specify the E-mail address under Company Information Setup page!!');
        SenderAddress := HRSetup."E-Mail";

        if PPayableSetup."Default Proc Email Contact" = '' then
            Error('Please Contact the IT Admin to specify the Procurement Manager E-mail address under Purchases&Payable Setup page!!');
        CustEmail := PPayableSetup."Default Proc Email Contact";

        CompanyDetails := 'Procurement Officer,' + '<BR></BR>' + CompInfo.Name + '<BR></BR>' + CompInfo.Address + '<BR></BR>' + CompInfo."Address 2" + '<BR></BR>' + CompInfo.City;
        SenderMessage := '<BR>Please find below system Generated Cancellation Secret code to be used in cancellation Process:</BR>' + '<BR></BR>';
        LoginDetails := 'Password:' + Password;
        ActivationDetails := '<BR>Please fill the Secret Code on the IFS to be able to proceed :</BR>';

        if CustEmail = '' then
            exit;

        //MESSAGE:='This is to notify you that there has been a request for Registration ' +  SupplierRequest."No." + ' From Supplier'+ SupplierRequest.Name;
        emailhdr := 'IFS Cancellation Activation (IFS No:' + IFS.Code + ')';

        // //cu400.CreateMessage(CompInfo.Name, SenderAddress, CustEmail, emailhdr,
        // //CompanyDetails + '<BR></BR>' + SenderMessage + SupplierDetails + LoginDetails + ActivationDetails, true);

        // //cu400.AddCC(RequesterEmail);

        // //cu400.AddBodyline(ProcNote);


        // //cu400.Send;
        SendingDate := Today;
        SendingTime := Time;

        Sleep(1000);
        Window.Close;
        IFS."Sent Cancellation Secret Code" := Password;
        IFS.Modify(true);
    end;


    procedure SuggestTenderSourceDoc(IFS: Record "Standard Purchase Code")
    var
        ProcSetup: Record "Procurement Setup";
        IFSTenderDOc: Record "IFS Tender Document Source";
        TenderDoc: Record "Tender Document Source";
    begin
        ProcSetup.Get;
        IFSTenderDOc.Reset;
        IFSTenderDOc.SetRange("Document No.", IFS.Code);
        if IFSTenderDOc.FindSet then begin
            IFSTenderDOc.DeleteAll;
        end;
        TenderDoc.Reset;
        if TenderDoc.FindSet then begin
            repeat
                IFSTenderDOc.Init;
                IFSTenderDOc."Document No." := IFS.Code;
                IFSTenderDOc."Tender Source ID" := TenderDoc.Code;
                IFSTenderDOc.Description := TenderDoc.Description;
                IFSTenderDOc."Url Link" := TenderDoc."Url Link";
                IFSTenderDOc.Validate("Bid Charge Code", TenderDoc."Default IFS Bid Charge Code");
                IFSTenderDOc.Insert(true);


            //MESSAGE('TENDER DOC %1',TenderDoc.Code);
            until TenderDoc.Next = 0;
        end;
    end;


    procedure SuggestPrequalifiedSuppliers(IFS: Record "Standard Purchase Code")
    var
        ProcSetup: Record "Procurement Setup";
        IFSPurchaseline: Record "Standard Vendor Purchase Code";
        VendorPreqEntry: Record "Vendor Prequalification Entry";
    begin
        ProcSetup.Get;

        IFSPurchaseline.Reset;
        IFSPurchaseline.SetRange(Code, IFS.Code);
        if not IFSPurchaseline.FindSet then begin
            VendorPreqEntry.Reset;
            VendorPreqEntry.SetRange("Procurement Category Code", IFS."Procurement Category ID");
            VendorPreqEntry.SetRange(Blocked, false);
            if VendorPreqEntry.FindSet then begin
                repeat
                    IFSPurchaseline.Init;
                    IFSPurchaseline.Validate("Vendor No.", VendorPreqEntry."Vendor No.");
                    IFSPurchaseline.Validate(Code, IFS.Code);
                    IFSPurchaseline.Validate(Description, VendorPreqEntry.Description);
                    IFSPurchaseline.Validate("IFS Code", IFS.Code);
                    IFSPurchaseline.Insert(true);
                until VendorPreqEntry.Next = 0;
            end;
        end;
    end;


    procedure FnSendRFQInvitation(IFS: Record "Standard Purchase Code"; ObjVend: Record Vendor)
    var
        IFSList: Record "Standard Purchase Code";
        SupplierReq: Record Contact;
        LastFieldNo: Integer;
        FooterPrinted: Boolean;
        FileDirectory: Text[100];
        FileName: Text[100];
        ReportID: Integer;
        //  //"Object": Record "Object";
        Window: Dialog;
        RunOnceFile: Text[1000];
        TimeOut: Integer;
        Customer2: Record Customer;
        Cust: Record Customer;
        cr: Integer;
        lf: Integer;
        EmailBody: array[2] of Text[30];
        BodyText: Text[250];
        mymail: Codeunit Mail;
        DefaultPrinter: Text[200];
        WindowisOpen: Boolean;
        FileDialog: Codeunit Mail;
        SendingDate: Date;
        SendingTime: Time;
        Counter: Integer;
        cu400: Codeunit Mail;
        DocLog: Record "Document E-mail Log";
        BranchName: Code[80];
        DimValue: Record "Dimension Value";
        SenderAddress: Text[100];
        CustEmail: Text[100];
        UserSetup: Record "User Setup";
        HRSetup: Record "Company Information";
        Emp: Record Vendor;
        PayrollMonth: Date;
        PayrollMonthText: Text[30];
        PayPeriodtext: Text;
        PayPeriod: Record "Payroll PeriodX";
        CompInfo: Record "Company Information";
        DateFilter: Text;
        FromDate: Date;
        ToDate: Date;
        FromDateS: Text;
        ToDateS: Text;
        vend: Record Vendor;
        StartDate: Date;
        EndDAte: Date;
        EmailVerifier: Codeunit Payroll3;
        IsEmailValid: Boolean;
        PPayableSetup: Record "Procurement Setup";
        RequesterName: Text[100];
        RequesterEmail: Text[100];
        emailhdr: Text[100];
        CompanyDetails: Text[250];
        SupplierDetails: Text[1000];
        SenderMessage: Text[1000];
        ProcNote: Text[1000];
        LoginDetails: Text[1000];
        PortalUser: Record "Dynasoft Portal User";
        Password: Text[50];
        ActivationDetails: Text[1000];
        RFQReqVendors: Record "Standard Vendor Purchase Code";
        StandardPurchaseCode: Record "Standard Purchase Code";
        RFQReqVendors1: Record "Standard Vendor Purchase Code";
    begin
        ///Notifying Procurement Team on supplier Request


        CompInfo.Get;
        HRSetup.Get;
        PPayableSetup.Get;
        // StandardPurchaseCode.RESET;
        // StandardPurchaseCode.SETRANGE(StandardPurchaseCode.Code,IFS.Code);
        // IF StandardPurchaseCode.FINDSET THEN BEGIN
        RFQReqVendors.Reset;
        RFQReqVendors.SetRange(RFQReqVendors.Code, IFS.Code);
        //RFQReqVendors.SETRANGE("Vendor No.",ObjVend."No.");
        if RFQReqVendors.FindSet then begin
            repeat
                RFQReqVendors.TestField("Primary Email");
                RequesterEmail := RFQReqVendors."Primary Email";
                RequesterName := RFQReqVendors."Vendor Name";

                Window.Open('Sending...');

                WindowisOpen := true;


                Counter := Counter + 1;

                //Create message
                if HRSetup."E-Mail" = '' then
                    Error('Please Contact the IT Admin to specify the E-mail address under Company Information Setup page!!');
                SenderAddress := HRSetup."E-Mail";

                if PPayableSetup."Default Proc Email Contact" = '' then
                    Error('Please Contact the IT Admin to specify the Procurement Manager E-mail address under Purchases&Payable Setup page!!');
                CustEmail := PPayableSetup."Default Proc Email Contact";

                CompanyDetails := 'Dear: ' + RequesterName;
                SenderMessage := '<BR>You are hereby invited to submit your Bid Response for the Request for Quotation: ' + IFS.Code + ' That is summarized as follows:</BR>';
                SupplierDetails := '<BR>RFQ Invitation Notice Number: ' + IFS.Code + '</BR>' + '<BR> Description: ' + IFS.Description + '</BR>' +
                '<BR>Submission Due Date: ' + Format(IFS."Submission End Date") + '</BR>' +
                '<BR>Submission Due Time: ' + Format(IFS."Submission End Time") + '</BR>' +
                '<BR>Procuring Entity Name: ' + IFS."Procuring Entity Name/Contact" + '</BR>';
                LoginDetails := 'To respond to this invitation Notice, Kindly login into the E-Procurement portal and appply';


                ProcNote := '<BR> If you require any assistance, please contact our Supply Chain Management Team by Phone ' + HRSetup."Phone No." + ' or vendor support team via Email: ' + PPayableSetup."Default Proc Email Contact";
                FileDirectory := 'C:\DOCS\';
                FileName := 'RFQ' + IFS.Code + '.pdf';
                IFSList.Reset;
                IFSList.SetRange(Code, IFS.Code);
                if IFSList.FindSet then begin
                    RFQReqVendors1.Reset;
                    RFQReqVendors1.SetRange(Code, IFSList.Code);
                    RFQReqVendors1.SetRange("Vendor No.", RFQReqVendors."Vendor No.");
                    if RFQReqVendors1.FindSet then begin


                        // //Report.SaveAsPdf(70062, FileDirectory + FileName, RFQReqVendors1);
                    end;
                end;
                if CustEmail = '' then
                    exit;
                repeat
                    //MESSAGE:='This is to notify you that there has been a request for Registration ' +  SupplierRequest."No." + ' From Supplier'+ SupplierRequest.Name;
                    emailhdr := 'Invitation Notice for Request for Quotation(RFQ) Reference No: (' + IFS.Code + ')';

                    // //cu400.CreateMessage(CompInfo.Name, SenderAddress, CustEmail, emailhdr,
                    // //CompanyDetails + '<BR></BR>' + SenderMessage + SupplierDetails + LoginDetails + ActivationDetails, true);

                    // //cu400.AddCC(RequesterEmail);
                    // //cu400.AddAttachment(FileDirectory + FileName, FileName);
                    // //cu400.AddBodyline(ProcNote);


                    // //cu400.Send;
                    SendingDate := Today;
                    SendingTime := Time;
                    RFQReqVendors."Invitation Email Sent" := true;
                    RFQReqVendors."Date/Time Notified" := CurrentDatetime;
                    RFQReqVendors.Modify(true);


                    Sleep(1000);
                    Window.Close;
                until RFQReqVendors.Next = 0;
            until RFQReqVendors.Next = 0;
        end;
        //END;
    end;


    procedure FnSendTenderCommitteNotification(IFSTenderCommitte: Record "IFS Tender Committee")
    var
        SupplierReq: Record Contact;
        LastFieldNo: Integer;
        FooterPrinted: Boolean;
        FileDirectory: Text[100];
        FileName: Text[100];
        ReportID: Integer;
        ////"Object": Record "Object";
        Window: Dialog;
        RunOnceFile: Text[1000];
        TimeOut: Integer;
        Customer2: Record Customer;
        Cust: Record Customer;
        cr: Integer;
        lf: Integer;
        EmailBody: array[2] of Text[30];
        BodyText: Text[250];
        mymail: Codeunit Mail;
        DefaultPrinter: Text[200];
        WindowisOpen: Boolean;
        FileDialog: Codeunit Mail;
        EmailMsg: codeunit "email Message";
        SendingDate: Date;
        SendingTime: Time;
        Counter: Integer;
        cu400: Codeunit Mail;
        DocLog: Record "Document E-mail Log";
        BranchName: Code[80];
        DimValue: Record "Dimension Value";
        SenderAddress: Text[100];
        CustEmail: Text[100];
        UserSetup: Record "User Setup";
        HRSetup: Record "Company Information";
        Emp: Record Vendor;
        PayrollMonth: Date;
        PayrollMonthText: Text[30];
        PayPeriodtext: Text;
        PayPeriod: Record "Payroll PeriodX";
        CompInfo: Record "Company Information";
        DateFilter: Text;
        FromDate: Date;
        ToDate: Date;
        FromDateS: Text;
        ToDateS: Text;
        vend: Record Vendor;
        StartDate: Date;
        EndDAte: Date;
        EmailVerifier: Codeunit Payroll3;
        IsEmailValid: Boolean;
        PPayableSetup: Record "Procurement Setup";
        RequesterName: Text[100];
        RequesterEmail: Text[100];
        emailhdr: Text[100];
        CompanyDetails: Text[250];
        SupplierDetails: Text[1000];
        SenderMessage: Text[1000];
        ProcNote: Text[1000];
        LoginDetails: Text[1000];
        PortalUser: Record "Dynasoft Portal User";
        Password: Text[50];
        ActivationDetails: Text[1000];
        IFSCommitteMembers: Record "IFS Tender Committee Member";
        IFS: Record "Standard Purchase Code";
        CommitteType: Record "Procurement Committee Types";
        CommitteMembers: Record "IFS Tender Committee";
        Outs: Outstream;
        RecRef: RecordRef;
        TempBlob: Codeunit "Temp Blob";
        DocStream: Instream;
        Email: Codeunit Email;
        Mail: Codeunit "Email Message";
        Positions: Record "Company Positions";
        Position: Text;
    begin
        ///Notifying Procurement Team on supplier Request


        CompInfo.Get;
        HRSetup.Get;
        PPayableSetup.Get;
        IFSCommitteMembers.Reset;
        IFSCommitteMembers.SetRange("Document No.", IFSTenderCommitte."Document No.");
        if IFSCommitteMembers.FindSet() then begin
            repeat
                IFSCommitteMembers.TestField("Member Email");
                RequesterEmail := IFSCommitteMembers."Member Email";
                RequesterName := IFSCommitteMembers."Member Name";

                Window.Open('Notifying the Member...');
                WindowisOpen := true;


                Counter := Counter + 1;

                Position := '';
                if Positions.Get(IFSTenderCommitte."Appointing Authority") then
                    Position := Positions."Job Title"
                else
                    Position := IFSTenderCommitte."Appointing Authority";
                //Create message
                if HRSetup."E-Mail" = '' then
                    Error('Please Contact the IT Admin to specify the E-mail address under Company Information Setup page!!');
                SenderAddress := HRSetup."E-Mail";

                if PPayableSetup."Default Proc Email Contact" = '' then
                    Error('Please Contact the IT Admin to specify the Procurement Manager E-mail address under Purchases&Payable Setup page!!');
                CustEmail := HRSetup."E-Mail";

                CompanyDetails := 'Dear,  ' + RequesterName;
                SenderMessage := '<BR>You have been appointed to serve in the Tender/Procurement Committee No: ' + IFSTenderCommitte."Document No." + '</BR>';
                SupplierDetails := '<BR>Appointment Reference No: ' + IFSTenderCommitte."Document No." + '</BR>' + '<BR> Committee Type: ' + IFSTenderCommitte.Description + '</BR>' +
                '<BR>Tender Name: ' + IFSTenderCommitte."Tender Name" + '</BR>' +
                '<BR>Membership Role: ' + Format(IFSCommitteMembers.Role) + '</BR>' +
                '<BR>Appointment Effective Date: ' + Format(IFSTenderCommitte."Appointment Effective Date") + '</BR>' +
                '<BR>Invitation For Supply No: ' + IFSTenderCommitte."IFS Code" + '</BR>' +
                '<BR>Appointing Authority: ' + Position + '</BR>';
                LoginDetails := 'Attached herein, please find an e-copy of your appointment letter';


                ProcNote := '<BR> For any inquiry, please contact our Supply Chain Management team by Phone ' + HRSetup."Phone No." + ' or vendor support team via Email: ' + PPayableSetup."Default Proc Email Contact";


                FileName := 'AppointmentLetter_' + IFSTenderCommitte."Document No." + '.pdf';



                IF CustEmail = '' THEN
                    EXIT;

                //MESSAGE:='This is to notify you that there has been a request for Registration ' +  SupplierRequest."No." + ' From Supplier'+ SupplierRequest.Name;
                emailhdr := 'Tender/Procurement Committee appointment (Reference No: ' + IFSTenderCommitte."Document No." + ')';

                Mail.Create(IFSCommitteMembers."Member Email", emailhdr, CompanyDetails + SenderMessage + SupplierDetails + LoginDetails + ProcNote, true); //'<BR></BR>' + SenderMessage + SupplierDetails + LoginDetails + ActivationDetails, true);
                CommitteMembers.Reset;
                CommitteMembers.SetRange("Document No.", IFSTenderCommitte."Document No.");
                if CommitteMembers.FindFirst() then begin
                    TempBlob.CreateOutstream(Outs);
                    Recref.GetTable(CommitteMembers);
                    Report.SaveAs(Report::"Tender Committee appointment", '', ReportFormat::PDF, Outs, RecRef);
                    TempBlob.CreateInstream(DocStream);
                end;
                Mail.AddAttachment(FileName, 'PDF', DocStream);
                Email.Send(Mail);

                SendingDate := Today;
                SendingTime := Time;

                IFSCommitteMembers."Notified on Email" := true;
                IFSCommitteMembers."Date/Time Notified" := CurrentDatetime;
                IFSCommitteMembers.Modify(true);


                Sleep(1000);
                Window.Close;

            until IFSCommitteMembers.Next = 0;
        end;


        //update IFS
        IFS.Reset;
        IFS.SetRange(Code, IFSTenderCommitte."IFS Code");
        if IFS.FindSet then begin
            CommitteType.Reset;
            CommitteType.SetRange("Committee Type", IFSTenderCommitte."Committee Type");
            if CommitteType.FindSet then begin
                if CommitteType."Mandate Type" = CommitteType."mandate type"::"Tender Evaluation" then
                    IFS."Bid Evaluation Committe" := IFSTenderCommitte."Document No."
                else
                    if CommitteType."Mandate Type" = CommitteType."mandate type"::"Tender Opening" then
                        IFS."Bid Opening Committe" := IFSTenderCommitte."Document No.";
                IFS.Modify(true);
            end;

        end;
    end;


    procedure FnSendTenderCommitteNotification2(IFSTenderCommitte: Record "IFS Tender Committee")
    var
        SupplierReq: Record Contact;
        LastFieldNo: Integer;
        FooterPrinted: Boolean;
        FileDirectory: Text[100];
        FileName: Text[100];
        ReportID: Integer;
        //   //"Object": Record "Object";
        Window: Dialog;
        RunOnceFile: Text[1000];
        TimeOut: Integer;
        Customer2: Record Customer;
        Cust: Record Customer;
        cr: Integer;
        lf: Integer;
        EmailBody: array[2] of Text[30];
        BodyText: Text[250];
        mymail: Codeunit Mail;
        DefaultPrinter: Text[200];
        WindowisOpen: Boolean;
        FileDialog: Codeunit Mail;
        SendingDate: Date;
        SendingTime: Time;
        Counter: Integer;
        cu400: Codeunit Mail;
        DocLog: Record "Document E-mail Log";
        BranchName: Code[80];
        DimValue: Record "Dimension Value";
        SenderAddress: Text[100];
        CustEmail: Text[100];
        UserSetup: Record "User Setup";
        HRSetup: Record "Company Information";
        Emp: Record Vendor;
        PayrollMonth: Date;
        PayrollMonthText: Text[30];
        PayPeriodtext: Text;
        PayPeriod: Record "Payroll PeriodX";
        CompInfo: Record "Company Information";
        DateFilter: Text;
        FromDate: Date;
        ToDate: Date;
        FromDateS: Text;
        ToDateS: Text;
        vend: Record Vendor;
        StartDate: Date;
        EndDAte: Date;
        EmailVerifier: Codeunit Payroll3;
        IsEmailValid: Boolean;
        PPayableSetup: Record "Procurement Setup";
        RequesterName: Text[100];
        RequesterEmail: Text[100];
        emailhdr: Text[100];
        CompanyDetails: Text[250];
        SupplierDetails: Text[1000];
        SenderMessage: Text[1000];
        ProcNote: Text[1000];
        LoginDetails: Text[1000];
        PortalUser: Record "Dynasoft Portal User";
        Password: Text[50];
        ActivationDetails: Text[1000];
        IFSCommitteMembers: Record "IFS Tender Committee Member";
        IFS: Record "Standard Purchase Code";
        CommitteType: Record "Procurement Committee Types";
        CommitteMembers: Record "IFS Tender Committee";
    begin
        ///Notifying Procurement Team on supplier Request


        CompInfo.Get;
        HRSetup.Get;
        PPayableSetup.Get;

        IFSCommitteMembers.Reset;
        IFSCommitteMembers.SetRange("Document No.", IFSTenderCommitte."Document No.");
        if IFSCommitteMembers.FindSet then begin
            repeat
                IFSCommitteMembers.TestField("Member Email");
                RequesterEmail := IFSCommitteMembers."Member Email";
                RequesterName := IFSCommitteMembers."Member Name";

                Window.Open('Notifying the Sender...');

                WindowisOpen := true;


                Counter := Counter + 1;

                //Create message
                if HRSetup."E-Mail" = '' then
                    Error('Please Contact the IT Admin to specify the E-mail address under Company Information Setup page!!');
                SenderAddress := HRSetup."E-Mail";

                if PPayableSetup."Default Proc Email Contact" = '' then
                    Error('Please Contact the IT Admin to specify the Procurement Manager E-mail address under Purchases&Payable Setup page!!');
                CustEmail := HRSetup."E-Mail";

                CompanyDetails := 'Dear,  ' + RequesterName;
                SenderMessage := '<BR>You have been appointed to serve in the Tender/Procurement Committee No: ' + IFSTenderCommitte."Document No." + '</BR>';
                SupplierDetails := '<BR>Appointment Reference No: ' + IFSTenderCommitte."Document No." + '</BR>' + '<BR> Committee Type: ' + IFSTenderCommitte.Description + '</BR>' +
                '<BR>Tender Name: ' + IFSTenderCommitte."Tender Name" + '</BR>' +
                '<BR>Membership Role: ' + Format(IFSCommitteMembers.Role) + '</BR>' +
                '<BR>Appointment Effective Date: ' + Format(IFSTenderCommitte."Appointment Effective Date") + '</BR>' +
                '<BR>Invitation For Supply No: ' + IFSTenderCommitte."IFS Code" + '</BR>' +
                '<BR>Appointing Authority: ' + IFSTenderCommitte."Appointing Authority" + '</BR>';
                LoginDetails := 'Attached herein, please find an e-copy of your appointment letter';


                ProcNote := '<BR> If you require any assistance, please contact our Supply Chain Management team by Phone ' + HRSetup."Phone No." + ' or vendor support team via Email: ' + PPayableSetup."Default Proc Email Contact";

                FileDirectory := 'C:\DOCS\';
                FileName := 'AppointmentLetter_' + IFSTenderCommitte."Document No." + '.pdf';

                CommitteMembers.Reset;
                CommitteMembers.SetRange("Document No.", IFSTenderCommitte."Document No.");
                if CommitteMembers.FindSet then begin

                    // //Report.SaveAsPdf(70105, FileDirectory + FileName, CommitteMembers);

                end;

                //IF CustEmail='' THEN
                //EXIT;

                //MESSAGE:='This is to notify you that there has been a request for Registration ' +  SupplierRequest."No." + ' From Supplier'+ SupplierRequest.Name;
                emailhdr := 'Tender/Procurement Committee appointment (Reference No: ' + IFSTenderCommitte."Document No." + ')';

                // //cu400.CreateMessage(CompInfo.Name, SenderAddress, RequesterEmail, emailhdr,
                // //CompanyDetails + '<BR></BR>' + SenderMessage + SupplierDetails + LoginDetails + ActivationDetails, true);

                // ////cu400.AddCC(RequesterEmail);
                // //cu400.AddAttachment(FileDirectory + FileName, FileName);

                // //cu400.AddBodyline(ProcNote);


                // //cu400.Send;
                SendingDate := Today;
                SendingTime := Time;

                IFSCommitteMembers."Notified on Email" := true;
                IFSCommitteMembers."Date/Time Notified" := CurrentDatetime;
                IFSCommitteMembers.Modify(true);


                Sleep(1000);
                Window.Close;

            until IFSCommitteMembers.Next = 0;
        end;


        //update IFS
        IFS.Reset;
        IFS.SetRange(Code, IFSTenderCommitte."IFS Code");
        if IFS.FindSet then begin
            CommitteType.Reset;
            CommitteType.SetRange("Committee Type", IFSTenderCommitte."Committee Type");
            if CommitteType.FindSet then begin
                if CommitteType."Mandate Type" = CommitteType."mandate type"::"Tender Evaluation" then
                    IFS."Bid Evaluation Committe" := IFSTenderCommitte."Document No."
                else
                    if CommitteType."Mandate Type" = CommitteType."mandate type"::"Tender Opening" then
                        IFS."Bid Opening Committe" := IFSTenderCommitte."Document No.";
                IFS.Modify(true);
            end;

        end;
    end;


    procedure SuggestBidScoreGuide(SupplierRatingTemp: Record "Bid Scoring Template")
    var
        EvaluationCriteria: Record "Bid Score Requirement";
        ScoreGuide: Record "Bid Score Guide";
        i: Integer;
        entryno: Integer;
    begin
        if SupplierRatingTemp.Released = true then
            Error('The Supplier Rating Template is already Released, it cannot be modified unless Reopened');

        //Suggest every evaluation critera with associated score guide entries



        EvaluationCriteria.Reset;
        EvaluationCriteria.SetRange("Template ID", SupplierRatingTemp.Code);
        if EvaluationCriteria.FindSet then begin
            repeat
                ScoreGuide.Reset;
                ScoreGuide.SetRange("Template ID", EvaluationCriteria."Template ID");
                ScoreGuide.SetRange("Criteria Group ID", EvaluationCriteria."Criteria Group ID");
                ScoreGuide.SetRange("Requirement ID", EvaluationCriteria."Requirement ID");
                if not ScoreGuide.FindSet then begin

                    if EvaluationCriteria."Rating Type" = EvaluationCriteria."rating type"::"Yes/No" then begin
                        i := 1;
                        repeat
                            ScoreGuide.Reset;
                            if ScoreGuide.FindLast then
                                entryno := ScoreGuide."Entry No";
                            ScoreGuide.Init;
                            ScoreGuide."Template ID" := SupplierRatingTemp.Code;
                            ScoreGuide."Criteria Group ID" := EvaluationCriteria."Criteria Group ID";
                            ScoreGuide."Requirement ID" := EvaluationCriteria."Requirement ID";
                            ScoreGuide."Rating Type" := ScoreGuide."rating type"::"Yes/No";
                            ScoreGuide."Entry No" := entryno + 1;
                            ScoreGuide."Min Bid Value" := 0;
                            ScoreGuide."Min Date Value" := 0D;
                            ScoreGuide."Max Bid Value" := 0;
                            ScoreGuide."Max Date Value" := 0D;
                            if i = 1 then begin
                                ScoreGuide."Response Value" := SupplierRatingTemp."YES Bid Rating Response Value";
                                ScoreGuide."Score %" := SupplierRatingTemp."Default YES Bid Rating Score %";
                            end else begin
                                ScoreGuide."Response Value" := SupplierRatingTemp."NO Bid Rating Response Value";
                                ScoreGuide."Score %" := SupplierRatingTemp."Default NO Bid Rating Score %";
                            end;
                            i += 1;
                            ScoreGuide.Insert(true);
                        until i = 3;
                    end;
                    if EvaluationCriteria."Rating Type" = EvaluationCriteria."rating type"::Number then begin
                        if EvaluationCriteria."Desired Perfomance Direction" = EvaluationCriteria."desired perfomance direction"::"Increasing KPI" then begin
                            i := 1;
                            repeat
                                ScoreGuide.Reset;
                                if ScoreGuide.FindLast then
                                    entryno := ScoreGuide."Entry No";
                                ScoreGuide.Init;
                                ScoreGuide."Template ID" := SupplierRatingTemp.Code;
                                ScoreGuide."Criteria Group ID" := EvaluationCriteria."Criteria Group ID";
                                ScoreGuide."Requirement ID" := EvaluationCriteria."Requirement ID";
                                ScoreGuide."Entry No" := entryno + 1;
                                ScoreGuide."Rating Type" := ScoreGuide."rating type"::Number;
                                if i = 1 then begin
                                    ScoreGuide."Min Bid Value" := 0;
                                    ScoreGuide."Min Date Value" := 0D;
                                    ScoreGuide."Max Bid Value" := EvaluationCriteria."Target Qty" - 1;
                                    ScoreGuide."Max Date Value" := 0D;
                                    //ScoreGuide."Response Value":=SupplierRatingTemp."YES Bid Rating Response Value";
                                    ScoreGuide."Score %" := 0;
                                end else begin
                                    ScoreGuide."Min Bid Value" := EvaluationCriteria."Target Qty";
                                    ScoreGuide."Min Date Value" := 0D;
                                    ScoreGuide."Max Bid Value" := SupplierRatingTemp."Max Bid Value Limit";
                                    ScoreGuide."Max Date Value" := 0D;
                                    // ScoreGuide."Response Value":=SupplierRatingTemp."NO Bid Rating Response Value";
                                    ScoreGuide."Score %" := 100;
                                end;
                                i += 1;
                                ScoreGuide.Insert(true);
                            until i = 3;
                        end;
                        if EvaluationCriteria."Target Qty" <> 0 then begin
                            if EvaluationCriteria."Desired Perfomance Direction" = EvaluationCriteria."desired perfomance direction"::"Decreasing KPI" then begin
                                i := 1;
                                repeat
                                    ScoreGuide.Reset;
                                    if ScoreGuide.FindLast then
                                        entryno := ScoreGuide."Entry No";
                                    ScoreGuide.Init;
                                    ScoreGuide."Template ID" := SupplierRatingTemp.Code;
                                    ScoreGuide."Criteria Group ID" := EvaluationCriteria."Criteria Group ID";
                                    ScoreGuide."Requirement ID" := EvaluationCriteria."Requirement ID";
                                    ScoreGuide."Entry No" := entryno + 1;
                                    ScoreGuide."Rating Type" := ScoreGuide."rating type"::Number;
                                    if i = 1 then begin
                                        ScoreGuide."Min Bid Value" := 0;
                                        ScoreGuide."Min Date Value" := 0D;
                                        ScoreGuide."Max Bid Value" := EvaluationCriteria."Target Qty" - 1;
                                        ScoreGuide."Max Date Value" := 0D;
                                        //ScoreGuide."Response Value":=SupplierRatingTemp."YES Bid Rating Response Value";
                                        ScoreGuide."Score %" := 100;
                                    end else begin
                                        ScoreGuide."Min Bid Value" := EvaluationCriteria."Target Qty";
                                        ScoreGuide."Min Date Value" := 0D;
                                        ScoreGuide."Max Bid Value" := SupplierRatingTemp."Max Bid Value Limit";
                                        ScoreGuide."Max Date Value" := 0D;
                                        //ScoreGuide."Response Value":=SupplierRatingTemp."NO Bid Rating Response Value";
                                        ScoreGuide."Score %" := 0;
                                    end;
                                    i += 1;
                                    ScoreGuide.Insert;
                                until i = 3;
                            end;
                        end else begin
                            if EvaluationCriteria."Desired Perfomance Direction" = EvaluationCriteria."desired perfomance direction"::"Decreasing KPI" then begin
                                i := 1;
                                repeat
                                    ScoreGuide.Reset;
                                    if ScoreGuide.FindLast then
                                        entryno := ScoreGuide."Entry No";
                                    ScoreGuide.Init;
                                    ScoreGuide."Template ID" := SupplierRatingTemp.Code;
                                    ScoreGuide."Criteria Group ID" := EvaluationCriteria."Criteria Group ID";
                                    ScoreGuide."Requirement ID" := EvaluationCriteria."Requirement ID";
                                    ScoreGuide."Entry No" := entryno + 1;
                                    ScoreGuide."Rating Type" := ScoreGuide."rating type"::Number;
                                    if i = 1 then begin
                                        ScoreGuide."Min Bid Value" := 0;
                                        ScoreGuide."Min Date Value" := 0D;
                                        ScoreGuide."Max Bid Value" := EvaluationCriteria."Target Qty" - 1;
                                        ScoreGuide."Max Date Value" := 0D;
                                        //ScoreGuide."Response Value":=SupplierRatingTemp."YES Bid Rating Response Value";
                                        ScoreGuide."Score %" := 100;
                                    end else begin
                                        ScoreGuide."Min Bid Value" := EvaluationCriteria."Target Qty" + 1;
                                        ScoreGuide."Min Date Value" := 0D;
                                        ScoreGuide."Max Bid Value" := SupplierRatingTemp."Max Bid Value Limit";
                                        ScoreGuide."Max Date Value" := 0D;
                                        //ScoreGuide."Response Value":=SupplierRatingTemp."NO Bid Rating Response Value";
                                        ScoreGuide."Score %" := 0;
                                    end;
                                    i += 1;
                                    ScoreGuide.Insert(true);
                                until i = 3;
                            end;
                        end;
                    end;
                    if EvaluationCriteria."Rating Type" = EvaluationCriteria."rating type"::"Options Text" then begin
                        i := 1;
                        repeat
                            ScoreGuide.Reset;
                            if ScoreGuide.FindLast then
                                entryno := ScoreGuide."Entry No";
                            ScoreGuide.Init;
                            ScoreGuide."Template ID" := SupplierRatingTemp.Code;
                            ScoreGuide."Criteria Group ID" := EvaluationCriteria."Criteria Group ID";
                            ScoreGuide."Requirement ID" := EvaluationCriteria."Requirement ID";
                            ScoreGuide."Entry No" := entryno + 1;
                            ScoreGuide."Rating Type" := ScoreGuide."rating type"::"Options Text";
                            ScoreGuide."Min Bid Value" := 0;
                            ScoreGuide."Min Date Value" := 0D;
                            ScoreGuide."Max Bid Value" := 0;
                            ScoreGuide."Max Date Value" := 0D;
                            if i = 1 then begin
                                ScoreGuide."Response Value" := '1-POOR';
                                ScoreGuide."Score %" := SupplierRatingTemp."1-POOR Option Text Bid Score %";
                            end else
                                if i = 2 then begin
                                    ScoreGuide."Response Value" := '2-FAIR';
                                    ScoreGuide."Score %" := SupplierRatingTemp."2-FAIR Option Text Bid Score %";
                                end else
                                    if i = 3 then begin
                                        ScoreGuide."Response Value" := '3-GOOD';
                                        ScoreGuide."Score %" := SupplierRatingTemp."3-GOOD Option Text Bid Score %";
                                    end else
                                        if i = 4 then begin
                                            ScoreGuide."Response Value" := '4-VERY GOOD';
                                            ScoreGuide."Score %" := SupplierRatingTemp."4-VERY GOOD  Text Bid Score %";
                                        end else
                                            if i = 5 then begin
                                                ScoreGuide."Response Value" := '5-EXCELLENT';
                                                ScoreGuide."Score %" := SupplierRatingTemp."5-EXCELLENT Text Bid Score %";
                                            end;
                            i += 1;
                            ScoreGuide.Insert(true);
                        until i = 6;
                    end;
                end;
            until EvaluationCriteria.Next = 0;
        end;



        Message('Supplier Score Guide has been Suggested successfuly');
    end;


    procedure FnNotifyPrebidAttendees(PreBid: Record "IFS Prebid Register")
    var
        SupplierReq: Record Contact;
        LastFieldNo: Integer;
        FooterPrinted: Boolean;
        FileDirectory: Text[100];
        FileName: Text[100];
        ReportID: Integer;
        // //"Object": Record "Object";
        Window: Dialog;
        RunOnceFile: Text[1000];
        TimeOut: Integer;
        Customer2: Record Customer;
        Cust: Record Customer;
        cr: Integer;
        lf: Integer;
        EmailBody: array[2] of Text[30];
        BodyText: Text[250];
        mymail: Codeunit Mail;
        DefaultPrinter: Text[200];
        WindowisOpen: Boolean;
        FileDialog: Codeunit Mail;
        SendingDate: Date;
        SendingTime: Time;
        Counter: Integer;
        cu400: Codeunit Mail;
        DocLog: Record "Document E-mail Log";
        BranchName: Code[80];
        DimValue: Record "Dimension Value";
        SenderAddress: Text[100];
        CustEmail: Text[100];
        UserSetup: Record "User Setup";
        HRSetup: Record "Company Information";
        Emp: Record Vendor;
        PayrollMonth: Date;
        PayrollMonthText: Text[30];
        PayPeriodtext: Text;
        PayPeriod: Record "Payroll PeriodX";
        CompInfo: Record "Company Information";
        DateFilter: Text;
        FromDate: Date;
        ToDate: Date;
        FromDateS: Text;
        ToDateS: Text;
        vend: Record Vendor;
        StartDate: Date;
        EndDAte: Date;
        EmailVerifier: Codeunit Payroll3;
        IsEmailValid: Boolean;
        PPayableSetup: Record "Procurement Setup";
        RequesterName: Text[100];
        RequesterEmail: Text[100];
        emailhdr: Text[100];
        CompanyDetails: Text[250];
        SupplierDetails: Text[1000];
        SenderMessage: Text[1000];
        ProcNote: Text[1000];
        LoginDetails: Text[1000];
        PortalUser: Record "Dynasoft Portal User";
        Password: Text[50];
        ActivationDetails: Text[1000];
        IFSPrebidAttendees: Record "IFS Prebid Bidder Attendance";
    begin
        ///Notifying Procurement Team on supplier Request


        CompInfo.Get;
        HRSetup.Get;
        PPayableSetup.Get;

        IFSPrebidAttendees.Reset;
        IFSPrebidAttendees.SetRange("Prebid Register ID", PreBid.Code);
        if IFSPrebidAttendees.FindSet then begin
            repeat
                IFSPrebidAttendees.TestField("Representative Email");
                RequesterEmail := IFSPrebidAttendees."Representative Email";
                RequesterName := IFSPrebidAttendees."Representative Name";

                Window.Open('Notifying the Sender...');

                WindowisOpen := true;


                Counter := Counter + 1;

                //Create message
                if HRSetup."E-Mail" = '' then
                    Error('Please Contact the IT Admin to specify the E-mail address under Company Information Setup page!!');
                SenderAddress := HRSetup."E-Mail";

                if PPayableSetup."Default Proc Email Contact" = '' then
                    Error('Please Contact the IT Admin to specify the Procurement Manager E-mail address under Purchases&Payable Setup page!!');
                CustEmail := PPayableSetup."Default Proc Email Contact";

                CompanyDetails := 'Dear,  ' + RequesterName + '<BR>' + IFSPrebidAttendees."Bidder No";
                SenderMessage := '<BR>Thank You for participating in the prebid meeting (Meeting Reference No:' + PreBid.Code + ') held on ' + Format(PreBid."Pre-bid Visit Date") +
                'as summarized below: </BR>';
                SupplierDetails := '<BR>Tender invitation Notice No:' + PreBid."IFS Code" + '</BR>' + '<BR> Tender Reference No:' + PreBid."Tender External Document No" + '</BR>' +
                '<BR>Tender Name:' + PreBid."Tender Description" + '</BR>' +
                '<BR>Prebid meeting Time and Venue:' + Format(PreBid."Pre-bid Visit Start Time") + ' To ' + Format(PreBid."Pre-bid Visit Start Time") + ' ,' + PreBid."Prebid Meeting Venue" + '</BR>';
                LoginDetails := 'Attached herein, please find summarized minutes of the Prebid meeting';


                ProcNote := '<BR> If you require any assistance, please contact our Procurement team by Phone ' + HRSetup."Phone No." + ' or vendor support team via Email: ' + PPayableSetup."Default Proc Email Contact";

                if CustEmail = '' then
                    exit;

                //MESSAGE:='This is to notify you that there has been a request for Registration ' +  SupplierRequest."No." + ' From Supplier'+ SupplierRequest.Name;
                emailhdr := 'Minutes of Prebid meeting (Reference No: ' + PreBid.Code + ')';

                // //cu400.CreateMessage(CompInfo.Name, SenderAddress, RequesterEmail, emailhdr,
                // //CompanyDetails + '<BR></BR>' + SenderMessage + SupplierDetails + LoginDetails + ActivationDetails, true);

                // //cu400.AddCC(CustEmail);

                // //cu400.AddBodyline(ProcNote);


                // //cu400.Send;
                SendingDate := Today;
                SendingTime := Time;


                IFSPrebidAttendees."Notified on Email" := true;
                IFSPrebidAttendees."Date/Time Notified" := CurrentDatetime;
                IFSPrebidAttendees.Modify(true);


                Sleep(1000);
                Window.Close;

            until IFSPrebidAttendees.Next = 0;
        end;
    end;


    procedure suggestIntentionToBidVends(TenderAddendum: Record "Tender Addendum Notice")
    var
        TenderAddedumBidders: Record "Tender Addendum Bidder";
        IntentionToBid: Record "Standard Vendor Purchase Code";
        Bids: Record "Purchase Header";
    begin

        TenderAddedumBidders.Reset;
        TenderAddedumBidders.SetRange("Addendum Notice No.", TenderAddendum."Addendum Notice No.");
        if not TenderAddedumBidders.FindSet then begin
            IntentionToBid.Reset;
            IntentionToBid.SetRange(Code, TenderAddendum."Invitation Notice No.");
            if IntentionToBid.FindSet then begin
                repeat
                    TenderAddedumBidders.Init;
                    TenderAddedumBidders."Addendum Notice No." := TenderAddendum."Addendum Notice No.";
                    TenderAddedumBidders."Vendor No." := IntentionToBid."Vendor No.";
                    TenderAddedumBidders."IFS No." := IntentionToBid.Code;
                    TenderAddedumBidders."Vendor Name" := IntentionToBid."Vendor Name";
                    TenderAddedumBidders."Primary Email" := IntentionToBid."Primary Email";
                    TenderAddedumBidders.Insert(true);
                until IntentionToBid.Next = 0;
                Message('Suggested successfuly');
            end else begin
                Bids.Reset;
                Bids.SetRange("Invitation For Supply No", TenderAddendum."Invitation Notice No.");
                if Bids.FindSet then begin
                    repeat
                        TenderAddedumBidders.Init;
                        TenderAddedumBidders."Addendum Notice No." := TenderAddendum."Addendum Notice No.";
                        TenderAddedumBidders."Vendor No." := Bids."Buy-from Vendor No.";
                        TenderAddedumBidders."IFS No." := Bids."IFS Code";
                        TenderAddedumBidders."Vendor Name" := Bids."Buy-from Vendor Name";
                        //TenderAddedumBidders."Primary Email":=Bids.;
                        TenderAddedumBidders.Insert(true);
                    until Bids.Next = 0;
                end;
            end;
        end;
    end;


    procedure SendAddendumNotice(Tenderaddendum: Record "Tender Addendum Notice")
    var
        SupplierReq: Record Contact;
        LastFieldNo: Integer;
        FooterPrinted: Boolean;
        FileDirectory: Text[100];
        FileName: Text[100];
        ReportID: Integer;
        ////"Object": Record "Object";
        Window: Dialog;
        RunOnceFile: Text[1000];
        TimeOut: Integer;
        Customer2: Record Customer;
        Cust: Record Customer;
        cr: Integer;
        lf: Integer;
        EmailBody: array[2] of Text[30];
        BodyText: Text[250];
        mymail: Codeunit Mail;
        DefaultPrinter: Text[200];
        WindowisOpen: Boolean;
        FileDialog: Codeunit Mail;
        SendingDate: Date;
        SendingTime: Time;
        Counter: Integer;
        cu400: Codeunit Mail;
        DocLog: Record "Document E-mail Log";
        BranchName: Code[80];
        DimValue: Record "Dimension Value";
        SenderAddress: Text[100];
        CustEmail: Text[100];
        UserSetup: Record "User Setup";
        HRSetup: Record "Company Information";
        Emp: Record Vendor;
        PayrollMonth: Date;
        PayrollMonthText: Text[30];
        PayPeriodtext: Text;
        PayPeriod: Record "Payroll PeriodX";
        CompInfo: Record "Company Information";
        DateFilter: Text;
        FromDate: Date;
        ToDate: Date;
        FromDateS: Text;
        ToDateS: Text;
        vend: Record Vendor;
        StartDate: Date;
        EndDAte: Date;
        EmailVerifier: Codeunit Payroll3;
        IsEmailValid: Boolean;
        PPayableSetup: Record "Procurement Setup";
        RequesterName: Text[100];
        RequesterEmail: Text[100];
        emailhdr: Text[100];
        CompanyDetails: Text[250];
        SupplierDetails: Text[1000];
        SenderMessage: Text[1000];
        ProcNote: Text[1000];
        LoginDetails: Text[1000];
        PortalUser: Record "Dynasoft Portal User";
        Password: Text[50];
        ActivationDetails: Text[1000];
        TenderAddendumBidders: Record "Tender Addendum Bidder";
    begin
        ///Notifying Procurement Team on supplier Request


        CompInfo.Get;
        HRSetup.Get;
        PPayableSetup.Get;

        TenderAddendumBidders.Reset;
        TenderAddendumBidders.SetRange("Addendum Notice No.", Tenderaddendum."Addendum Notice No.");
        if TenderAddendumBidders.FindSet then begin
            repeat
                TenderAddendumBidders.TestField("Primary Email");
                RequesterEmail := TenderAddendumBidders."Primary Email";
                RequesterName := TenderAddendumBidders."Vendor Name";

                Window.Open('Notifying the Sender...');

                WindowisOpen := true;


                Counter := Counter + 1;

                //Create message
                if HRSetup."E-Mail" = '' then
                    Error('Please Contact the IT Admin to specify the E-mail address under Company Information Setup page!!');
                SenderAddress := HRSetup."E-Mail";

                if PPayableSetup."Default Proc Email Contact" = '' then
                    Error('Please Contact the IT Admin to specify the Procurement Manager E-mail address under Purchases&Payable Setup page!!');
                CustEmail := PPayableSetup."Default Proc Email Contact";

                CompanyDetails := 'Dear:' + RequesterName;
                SenderMessage := '<BR>Please note we have issued an Addendum Notice  (Reference No:' + Tenderaddendum."Addendum Notice No." +
                ' as summarized below: </BR>';
                SupplierDetails := '<BR>Tender invitation Notice No:' + Tenderaddendum."Invitation Notice No." + '</BR>' + '<BR> Tender Reference No:' + Tenderaddendum."Tender No" + '</BR>' +
                '<BR>Tender Name:' + Tenderaddendum.Description + '</BR>' +
                '<BR>Addendum Description:' + Tenderaddendum."Addendum Instructions" + '</BR>';
                LoginDetails := 'Please login to e-procurement portal to view the Addendum Notice Details';


                ProcNote := '<BR> If you require any assistance, please contact our Procurement team by Phone ' + HRSetup."Phone No." + ' or vendor support team via Email: ' + PPayableSetup."Default Proc Email Contact";

                if CustEmail = '' then
                    exit;

                //MESSAGE:='This is to notify you that there has been a request for Registration ' +  SupplierRequest."No." + ' From Supplier'+ SupplierRequest.Name;
                emailhdr := 'Tender Addendum Notice (Reference No: ' + Tenderaddendum."Addendum Notice No." + ')';

                // //cu400.CreateMessage(CompInfo.Name, SenderAddress, RequesterEmail, emailhdr,
                // //CompanyDetails + '<BR></BR>' + SenderMessage + SupplierDetails + LoginDetails + ActivationDetails, true);

                // //cu400.AddCC(CustEmail);

                // //cu400.AddBodyline(ProcNote);


                // //cu400.Send;
                SendingDate := Today;
                SendingTime := Time;


                TenderAddendumBidders."Addendum e-Notice Sent" := true;
                TenderAddendumBidders."e-Notice Sent Date/Time" := CurrentDatetime;
                TenderAddendumBidders.Modify(true);


                Sleep(1000);
                Window.Close;

            until TenderAddendumBidders.Next = 0;
        end;
    end;


    procedure UpdateBidResponse(Purch: Record "Purchase Header")
    var
        Vendor: Record Vendor;
        BidOwner: Record "Bid Business Owner";
        VendBusinessOwner: Record "Vendor Business Owner";
        BidPreferences: Record "Bid Preference & Reservation";
        VendSpecialGroup: Record "Vendor Special Group Entry";
        BidLitigation: Record "Bid Litigation History";
        VendLitigation: Record "Vendor Litigation History";
        BidPastExperience: Record "Bid Past Experience";
        VendPastExperience: Record "Vendor Past Experience";
        BidAuditedBal: Record "Bid Audited Balance Sheet";
        VendAuditedBal: Record "Vendor Audited Balance Sheet";
        BidIncomeStat: Record "Bid Audited Income Statement";
        VendIncomeStat: Record "Vendor Audited Income Statemen";
        BidVendBankAccount: Record "Bid Vendor Bank Account";
        VendBankAccount: Record "Vendor Bank Account";
        BidKeyStaff: Record "Bid Key Staff";
        VendKeyStaff: Record "Vendor Professional Staff";
        BidKeyStaffQual: Record "Bid Key Staff Qualification";
        VendKeyStaffQual: Record "Vendor Staff Qualification";
        BidStaffExperience: Record "Bid Key Staff Experience";
        VendStaffExperience: Record "Vendor Staff Experience";
    begin
        /*Vendor.RESET;
        Vendor.SETRANGE("No.",Purch."Vendor No.");
        IF Vendor.FINDSET THEN BEGIN
          //Purch.INIT;
          Purch."Building/House No":=Vendor."Building/House No";
          Purch."Plot No":=Vendor."Plot No";
          Purch.Street:=Vendor.Street;
          Purch."Nature of Business":=Vendor."Nature of Business";
          Purch."Current Trade Licence No":=Vendor."Current Trade Licence No";
          Purch."Trade Licence Expiry Date":=Vendor."Trade Licence Expiry Date";
          Purch."Max Value of Business":=Vendor."Max Value of Business";
          Purch."Preferred Bank Account Code":=Vendor."Preferred Bank Account Code";
          Purch."Business Type":=Vendor."Business Type";
          Purch."Nominal Capital LCY":=Vendor."Nominal Capital LCY";
          Purch."Issued Capital LCY":=Vendor."Issued Capital LCY";
          Purch.MODIFY(TRUE)
          END;*/

        //a)Owners/Directors
        BidOwner.Reset;
        BidOwner.SetRange(No, Purch."No.");
        if not BidOwner.FindSet then begin
            VendBusinessOwner.Reset;
            VendBusinessOwner.SetRange("Vendor No.", Purch."Vendor No.");
            VendBusinessOwner.SetRange(Blocked, false);
            if VendBusinessOwner.FindSet then begin
                repeat
                    BidOwner.Init;
                    BidOwner."Document Type" := Purch."Document Type";
                    BidOwner.No := Purch."No.";
                    BidOwner."Vendor No." := Purch."Vendor No.";
                    BidOwner."Entry No." := VendBusinessOwner."Entry No.";
                    BidOwner.Name := VendBusinessOwner.Name;
                    BidOwner.Address := VendBusinessOwner.Address;
                    BidOwner."Post Code" := VendBusinessOwner."Post Code";
                    BidOwner."Address 2" := VendBusinessOwner."Address 2";
                    BidOwner.City := VendBusinessOwner.City;
                    BidOwner."Phone No." := VendBusinessOwner."Phone No.";
                    BidOwner."Nationality ID" := VendBusinessOwner."Nationality ID";
                    BidOwner."Citizenship Type" := VendBusinessOwner."Citizenship Type";
                    BidOwner."ID/Passport No." := VendBusinessOwner."ID/Passport No.";
                    BidOwner."Entity Ownership %" := VendBusinessOwner."Entity Ownership %";
                    BidOwner."Share Types" := VendBusinessOwner."Share Types";
                    BidOwner."No. of Shares" := VendBusinessOwner."No. of Shares";
                    BidOwner."Nominal Value/Share" := VendBusinessOwner."Nominal Value/Share";
                    BidOwner."Total Nominal Value" := VendBusinessOwner."Total Nominal Value";
                    BidOwner."Ownership Effective Date" := VendBusinessOwner."Ownership Effective Date";
                    BidOwner.Blocked := VendBusinessOwner.Blocked;
                    BidOwner.Insert(true);
                until VendBusinessOwner.Next = 0;
            end;

        end;
        //b)Preference and Reservations

        BidPreferences.Reset;
        BidPreferences.SetRange("Document No.", Purch."No.");
        if not BidPreferences.FindSet then begin
            VendSpecialGroup.Reset;
            VendSpecialGroup.SetRange("Vendor No", Purch."Vendor No.");
            VendSpecialGroup.SetRange(Blocked, false);
            if VendSpecialGroup.FindSet then begin
                repeat
                    BidPreferences.Init;
                    BidPreferences."Document Type" := Purch."Document Type";
                    BidPreferences."Document No." := Purch."No.";
                    BidPreferences."Vendor No." := Purch."Vendor No.";
                    BidPreferences."AGPO Certificate No" := VendSpecialGroup."Certifcate No";
                    BidPreferences."Registered Special Group" := VendSpecialGroup."Registered Special Group";
                    BidPreferences."Products/Service Category" := VendSpecialGroup."Products/Service Category";
                    BidPreferences."Certificate Effective Date" := VendSpecialGroup."Effective Date";
                    BidPreferences."Certificate Expiry Date" := VendSpecialGroup."Certificate Expiry Date";
                    BidPreferences."Certifying Agency" := VendSpecialGroup."Certifying Agency";
                    BidPreferences.Insert(true);
                until VendSpecialGroup.Next = 0;
            end;
        end;

        //c)Litigation History

        BidLitigation.Reset;
        BidLitigation.SetRange("No.", Purch."No.");
        if not BidLitigation.FindSet then begin
            VendLitigation.Reset;
            //   VendLitigation.SetRange("Vendor No.", Purch."Vendor No.");
            if VendLitigation.FindSet then begin
                repeat
                    BidLitigation.Init;
                    BidLitigation."Document Type" := Purch."Document Type";
                    BidLitigation."No." := Purch."No.";
                    BidLitigation."Vendor No." := Purch."Vendor No.";
                    BidLitigation."Entry No." := VendLitigation."Entry No.";
                    // BidLitigation."Dispute Matter" := VendLitigation."Dispute Matter";
                    // BidLitigation."Other Dispute Party" := VendLitigation."Other Dispute Party";
                    // BidLitigation."Dispute Amount LCY" := VendLitigation."Dispute Amount LCY";
                    // BidLitigation."Category of Matter" := VendLitigation."Category of Matter";
                    // BidLitigation.Year := VendLitigation.Year;
                    // BidLitigation."Award Type" := VendLitigation."Award Type";
                    BidLitigation.Insert(true);
                until VendLitigation.Next = 0;
            end;
        end;

        //d)Past Experience
        /*
        BidPastExperience.RESET;
        BidPastExperience.SETRANGE("No.",Purch."No.");
         IF NOT BidPastExperience.FINDSET THEN BEGIN
           VendPastExperience.RESET;
           VendPastExperience.SETRANGE("Vendor No.",Purch."Vendor No.");
           IF VendPastExperience.FINDSET THEN BEGIN
             REPEAT
               BidPastExperience.INIT;
               BidPastExperience."Document Type":=Purch."Document Type";
               BidPastExperience."No.":=Purch."No.";
               BidPastExperience."Vendor No.":=Purch."Vendor No.";
               BidPastExperience."Entry No.":=VendPastExperience."Entry No.";
               BidPastExperience."Client Name":=VendPastExperience."Client Name";
               BidPastExperience.Address:=VendPastExperience.Address;
               BidPastExperience."Address 2":=VendPastExperience."Address 2";
               BidPastExperience."Country/Region Code":=VendPastExperience."Country/Region Code";
               BidPastExperience."E-Mail":=VendPastExperience."E-Mail";
               BidPastExperience."Primary Contact Person":=VendPastExperience."Primary Contact Person";
               BidPastExperience."Primary Contact Designation":=VendPastExperience."Primary Contact Designation";
               BidPastExperience."Primary Contact Tel":=VendPastExperience."Primary Contact Tel";
               BidPastExperience."Primary Contact Email":=VendPastExperience."Primary Contact Email";
               BidPastExperience."Assignment/Project Name":=VendPastExperience."Assignment Name";
               BidPastExperience."Project Scope Summary":=VendPastExperience."Project Scope Summary";
               BidPastExperience."Delivery Location":=VendPastExperience."Delivery Location";
               BidPastExperience."Contract Ref No":=VendPastExperience."Contract Ref No";
               BidPastExperience."Assignment Start Date":=VendPastExperience."Assignment Start Date";
               BidPastExperience."Assignment End Date":=VendPastExperience."Assignment End Date";
               BidPastExperience."Assignment Value LCY":=VendPastExperience."Assignment Value LCY";
               BidPastExperience."Assignment Status":=VendPastExperience."Assignment Status";
               BidPastExperience.INSERT(TRUE);
               UNTIL VendPastExperience.NEXT=0;
             END;
          END;
          */
        //e)Audited Balance Sheet-

        BidAuditedBal.Reset;
        BidAuditedBal.SetRange("No.", Purch."No.");
        if not BidAuditedBal.FindSet then begin
            VendAuditedBal.Reset;
            VendAuditedBal.SetRange("Vendor No.", Purch."Vendor No.");
            if VendAuditedBal.FindSet then begin
                repeat
                    BidAuditedBal.Init;
                    BidAuditedBal."Document Type" := Purch."Document Type";
                    BidAuditedBal."No." := Purch."No.";
                    BidAuditedBal."Vendor No." := Purch."Vendor No.";
                    BidAuditedBal."Audit Year Code Reference" := VendAuditedBal."Audit Year Code Reference";
                    BidAuditedBal."Current Assets (LCY)" := VendAuditedBal."Current Assets (LCY)";
                    BidAuditedBal."Fixed Assets (LCY)" := VendAuditedBal."Fixed Assets (LCY)";
                    BidAuditedBal."Total Assets (LCY)" := VendAuditedBal."Total Assets (LCY)";
                    BidAuditedBal."Current Liabilities (LCY)" := VendAuditedBal."Current Liabilities (LCY)";
                    BidAuditedBal."Long-term Liabilities (LCY)" := VendAuditedBal."Long-term Liabilities (LCY)";
                    BidAuditedBal."Total Liabilities (LCY)" := VendAuditedBal."Total Liabilities (LCY)";
                    BidAuditedBal."Owners Equity (LCY)" := VendAuditedBal."Owners Equity (LCY)";
                    BidAuditedBal."Total Liabilities & Equity(LCY" := VendAuditedBal."Total Liabilities & Equity(LCY";
                    BidAuditedBal."Debt Ratio" := VendAuditedBal."Debt Ratio";
                    BidAuditedBal."Current Ratio" := VendAuditedBal."Current Ratio";
                    BidAuditedBal."Working Capital (LCY)" := VendAuditedBal."Working Capital (LCY)";
                    BidAuditedBal."Assets-To-Equity Ratio" := VendAuditedBal."Assets-To-Equity Ratio";
                    BidAuditedBal."Debt-To-Equity Ratio" := VendAuditedBal."Debt-To-Equity Ratio";
                    BidAuditedBal.Insert(true);
                until VendAuditedBal.Next = 0;

            end;
        end;

        //f)Audited Income Statement-

        BidIncomeStat.Reset;
        BidIncomeStat.SetRange("No.", Purch."No.");
        if not BidIncomeStat.FindSet then begin
            VendIncomeStat.Reset;
            VendIncomeStat.SetRange("Vendor No.", Purch."Vendor No.");
            if VendIncomeStat.FindSet then begin
                repeat
                    BidIncomeStat.Init;
                    BidIncomeStat."Document Type" := Purch."Document Type";
                    BidIncomeStat."No." := Purch."No.";
                    BidIncomeStat."Vendor No." := Purch."Vendor No.";
                    BidIncomeStat."Audit Year Code Reference" := VendIncomeStat."Audit Year Code Reference";
                    BidIncomeStat."Total Revenue (LCY)" := VendIncomeStat."Total Revenue (LCY)";
                    BidIncomeStat."Total COGS (LCY)" := VendIncomeStat."Total COGS (LCY)";
                    BidIncomeStat."Gross Margin (LCY)" := VendIncomeStat."Gross Margin (LCY)";
                    BidIncomeStat."Total Operating Expenses (LCY)" := VendIncomeStat."Total Operating Expenses (LCY)";
                    BidIncomeStat."Operating Income/EBIT (LCY)" := VendIncomeStat."Operating Income/EBIT (LCY)";
                    BidIncomeStat."Other Non-operating Re/Exp LCY" := VendIncomeStat."Other Non-operating Re/Exp LCY";
                    BidIncomeStat."Interest Expense (LCY)" := VendIncomeStat."Interest Expense (LCY)";
                    BidIncomeStat."Income Before Taxes (LCY)" := VendIncomeStat."Income Before Taxes (LCY)";
                    BidIncomeStat."Income Tax Expense (LCY)" := VendIncomeStat."Income Tax Expense (LCY)";
                    BidIncomeStat."Net Income from Ops  (LCY)" := VendIncomeStat."Net Income from Ops  (LCY)";
                    BidIncomeStat."Below-the-line Items (LCY)" := VendIncomeStat."Below-the-line Items (LCY)";
                    BidIncomeStat."Net Income" := VendIncomeStat."Net Income";
                    BidIncomeStat.Insert(true);
                until VendIncomeStat.Next = 0;
            end;
        end;

        //g)Vendor Bank Accounts

        BidVendBankAccount.Reset;
        BidVendBankAccount.SetRange("No.", Purch."No.");
        if not BidVendBankAccount.FindSet then begin
            VendBankAccount.Reset;
            VendBankAccount.SetRange("Vendor No.", Purch."Vendor No.");
            if VendBankAccount.FindSet then begin
                repeat
                    BidVendBankAccount.Init;
                    BidVendBankAccount."Document Type" := Purch."Document Type";
                    BidVendBankAccount."No." := Purch."No.";
                    BidVendBankAccount."Vendor No." := Purch."Vendor No.";
                    BidVendBankAccount.Code := VendBankAccount.Code;
                    BidVendBankAccount.Name := VendBankAccount.Name;
                    BidVendBankAccount."Available Credit Line Valu" := VendBankAccount."Available Credit Line Valu";
                    BidVendBankAccount."Currency Code" := VendBankAccount."Currency Code";
                    BidVendBankAccount.Address := VendBankAccount.Address;
                    BidVendBankAccount."Address 2" := VendBankAccount."Address 2";
                    BidVendBankAccount."Post Code" := VendBankAccount."Post Code";
                    BidVendBankAccount.City := VendBankAccount.City;
                    BidVendBankAccount."Country/Region Code" := VendBankAccount."Country/Region Code";
                    BidVendBankAccount."Phone No." := VendBankAccount."Phone No.";
                    BidVendBankAccount."Bank Account No." := VendBankAccount."Bank Account No.";
                    BidVendBankAccount."Bank Branch No." := VendBankAccount."Bank Branch No.";
                    BidVendBankAccount.Contact := VendBankAccount.Contact;
                    BidVendBankAccount."Telex No." := VendBankAccount."Telex No.";
                    BidVendBankAccount."Transit No." := VendBankAccount."Transit No.";
                    BidVendBankAccount.County := VendBankAccount.County;
                    BidVendBankAccount."Fax No." := VendBankAccount."Fax No.";
                    BidVendBankAccount."Telex Answer Back" := VendBankAccount."Telex Answer Back";
                    BidVendBankAccount."Language Code" := VendBankAccount."Language Code";
                    BidVendBankAccount."E-Mail" := VendBankAccount."E-Mail";
                    BidVendBankAccount."Home Page" := VendBankAccount."Home Page";
                    BidVendBankAccount.Iban := VendBankAccount.Iban;
                    BidVendBankAccount."SWIFT Code" := VendBankAccount."SWIFT Code";
                    BidVendBankAccount."Bank Clearing Code" := VendBankAccount."Bank Clearing Code";
                    BidVendBankAccount."Bank Clearing Standard" := VendBankAccount."Bank Clearing Standard";
                    BidVendBankAccount.Insert(true);

                until VendBankAccount.Next = 0;
            end;

        end;

        //h)Key staff



        VendKeyStaff.Reset;
        VendKeyStaff.SetRange("Vendor No.", Purch."Vendor No.");
        if VendKeyStaff.FindSet then begin
            repeat
                BidKeyStaff.Init;
                BidKeyStaff."Document Type" := Purch."Document Type";
                BidKeyStaff."No." := Purch."No.";
                BidKeyStaff."Vendor No." := Purch."Vendor No.";
                BidKeyStaff."Staff No." := VendKeyStaff."Staff Number";
                BidKeyStaff."Staff Name" := VendKeyStaff."Staff Name";
                BidKeyStaff."Years with Firm" := VendKeyStaff."Years With the Firm";
                BidKeyStaff."Staff Category" := VendKeyStaff."Staff Category";
                BidKeyStaff."Phone No." := VendKeyStaff."Phone No.";
                BidKeyStaff.Nationality := VendKeyStaff.Nationality;
                BidKeyStaff."E-Mail" := VendKeyStaff."E-Mail";
                BidKeyStaff.Insert(true);
            until VendKeyStaff.Next = 0;
        end;

        //i)Key Staff Qualifications-

        VendKeyStaffQual.Reset;
        VendKeyStaffQual.SetRange("Vendor No", Purch."No.");
        if VendKeyStaffQual.FindSet then begin
            repeat
                BidKeyStaffQual.Init;
                BidKeyStaffQual."Document Type" := Purch."Document Type";
                BidKeyStaffQual."No." := Purch."No.";
                BidKeyStaffQual."Vendor No." := Purch."Vendor No.";
                BidKeyStaffQual."Staff No." := VendKeyStaffQual."Staff Id";
                BidKeyStaffQual."Entry No" := VendKeyStaffQual."Entry No";
                BidKeyStaffQual."Qualification Category" := VendKeyStaffQual."Qualification Category";
                BidKeyStaffQual."Qualification Name" := VendKeyStaffQual."Qualification Name";
                BidKeyStaffQual.Institution := VendKeyStaffQual.Institution;
                BidKeyStaffQual."Start Year" := VendKeyStaffQual."Start Year";
                BidKeyStaffQual."End Year" := VendKeyStaffQual."End Year";
                BidKeyStaffQual."Outstanding Achievements" := VendKeyStaffQual."Outstanding Achievements";
                BidKeyStaffQual.Insert(true);
            until VendKeyStaffQual.Next = 0;
        end;

        //j)Key Staff Experience-



        VendStaffExperience.Reset;
        VendStaffExperience.SetRange("Vendor No", Purch."No.");
        if VendStaffExperience.FindSet then begin
            repeat
                BidStaffExperience.Init;
                BidStaffExperience."Document Type" := Purch."Document Type";
                BidStaffExperience."No." := Purch."No.";
                BidStaffExperience."Vendor No." := Purch."Vendor No.";
                BidStaffExperience."Staff No." := VendStaffExperience."Staff ID";
                BidStaffExperience."Entry No" := VendStaffExperience."Entry No";
                BidStaffExperience."Experience Category" := VendStaffExperience."Experience Category";
                BidStaffExperience."Years of Experience" := VendStaffExperience."Years of Experience";
                BidStaffExperience."Experience Summary" := VendStaffExperience."Experience Summary";
                BidStaffExperience."Sample Assignments/Projects" := VendStaffExperience."Assignment Description";
                BidStaffExperience."Experience From Year" := VendStaffExperience."Start Year";
                BidStaffExperience."Experience To Year" := VendStaffExperience."End Year";
                BidStaffExperience.Insert(true);

            until VendStaffExperience.Next = 0;
        end;

    end;


    procedure UpdateBidResponseFromITT(Purch: Record "Purchase Header")
    var
        Vendor: Record Vendor;
        BidOwner: Record "Bid Business Owner";
        VendBusinessOwner: Record "Vendor Business Owner";
        BidPreferences: Record "Bid Preference & Reservation";
        VendSpecialGroup: Record "Vendor Special Group Entry";
        BidLitigation: Record "Bid Litigation History";
        VendLitigation: Record "Vendor Litigation History";
        BidPastExperience: Record "Bid Past Experience";
        VendPastExperience: Record "Vendor Past Experience";
        BidAuditedBal: Record "Bid Audited Balance Sheet";
        VendAuditedBal: Record "Vendor Audited Balance Sheet";
        BidIncomeStat: Record "Bid Audited Income Statement";
        VendIncomeStat: Record "Vendor Audited Income Statemen";
        BidVendBankAccount: Record "Bid Vendor Bank Account";
        VendBankAccount: Record "Vendor Bank Account";
        BidKeyStaff: Record "Bid Key Staff";
        VendKeyStaff: Record "Vendor Professional Staff";
        BidKeyStaffQual: Record "Bid Key Staff Qualification";
        VendKeyStaffQual: Record "Vendor Staff Qualification";
        BidStaffExperience: Record "Bid Key Staff Experience";
        VendStaffExperience: Record "Vendor Staff Experience";
        IFS: Record "Standard Purchase Code";
        IFSLines: Record "Standard Purchase Line";
        PurchLines: Record "Purchase Line";
        PurchHeader: Record "Purchase Header";
    begin
        /*PurchHeader.RESET;
        PurchHeader.SETRANGE("No.",Purch."No.");
        IF NOT PurchHeader.FINDSET THEN BEGIN
        
        
        IFS.RESET;
        IFS.SETRANGE(Code,Purch."Invitation For Supply No");
        IF IFS.FINDSET THEN BEGIN
         Purch.INIT;
         Purch."Document Type":=Purch."Document Type"::Quote;
         Purch."Invitation Notice Type":=IFS."Invitation Notice Type";
         Purch."Bid Envelope Type":=IFS."Bid Envelop Type";
         Purch."Tender Description":=IFS."Tender Summary";
         Purch."Responsibility Center":=IFS."Responsibility Center";
         Purch."Location Code":=IFS."Location Code";
         Purch."Language Code":=IFS."Language Code";
         Purch."Purchaser Code":=IFS."Purchaser Code";
         Purch."Currency Code":=IFS."Currency Code";
         //Purch.seal/Commended By Fred To enable testing
         Purch.INSERT(TRUE);
        END;
        END;
        IFSLines.RESET;
        IFSLines.SETRANGE("Standard Purchase Code",Purch."Invitation For Supply No");
        IF IFSLines.FINDSET THEN BEGIN
          REPEAT
        
          PurchLines.INIT;
          PurchLines."Document Type":=PurchLines."Document Type"::Quote;
          PurchLines."Document No.":=Purch."No.";
          PurchLines."Line No.":=IFSLines."Line No.";
          PurchLines."Buy-from Vendor No.":=Purch."Vendor No.";
          PurchLines.Type:=IFSLines.Type;
          PurchLines."No.":=IFSLines."No.";
          //PurchLines."Location Code":=IFSLines.
          //PurchLines."Posting Group":=IFSLines
          PurchLines.Description:=IFSLines.Description;
          PurchLines."Description 2":=IFSLines.Description;
          //PurchLines."Unit of Measure":=IFSLines."Unit of Measure Code";
          PurchLines.Quantity:=IFSLines.Quantity;
          PurchLines.Amount:=IFSLines."Amount Excl. VAT";
          PurchLines."Unit of Measure Code":=IFSLines."Unit of Measure Code";
          PurchLines."Shortcut Dimension 1 Code":=IFSLines."Shortcut Dimension 2 Code";
          PurchLines."Shortcut Dimension 2 Code":=IFSLines."Shortcut Dimension 2 Code";
          PurchLines."Variant Code":=IFSLines."Variant Code";
          PurchLines."Dimension Set ID":=IFSLines."Dimension Set ID";
          PurchLines."Item Category":=IFSLines."Item Category";
          PurchLines.INSERT(TRUE);
        
          UNTIL IFSLines.NEXT=0;
          END;
          */
        //END;

        Vendor.Reset;
        Vendor.SetRange("No.", Purch."Vendor No.");
        if Vendor.FindSet then begin
            //Purch.INIT;
            Purch."Building/House No" := Vendor."Building/House No";
            Purch."Plot No" := Vendor."Plot No";
            Purch.Street := Vendor.Street;
            Purch."Nature of Business" := Vendor."Nature of Business";
            Purch."Current Trade Licence No" := Vendor."Current Trade Licence No";
            Purch."Trade Licence Expiry Date" := Vendor."Trade Licence Expiry Date";
            Purch."Max Value of Business" := Vendor."Max Value of Business";
            Purch."Preferred Bank Account Code" := Vendor."Preferred Bank Account Code";
            Purch."Business Type" := Vendor."Business Type";
            Purch."Nominal Capital LCY" := Vendor."Nominal Capital LCY";
            Purch."Issued Capital LCY" := Vendor."Issued Capital LCY";
            Purch.Modify(true)
        end;

        //a)Owners/Directors
        BidOwner.Reset;
        BidOwner.SetRange(No, Purch."No.");
        if not BidOwner.FindSet then begin
            VendBusinessOwner.Reset;
            VendBusinessOwner.SetRange("Vendor No.", Purch."Vendor No.");
            VendBusinessOwner.SetRange(Blocked, false);
            if VendBusinessOwner.FindSet then begin
                repeat
                    BidOwner.Init;
                    BidOwner."Document Type" := Purch."Document Type";
                    BidOwner.No := Purch."No.";
                    BidOwner."Vendor No." := Purch."Vendor No.";
                    BidOwner."Entry No." := VendBusinessOwner."Entry No.";
                    BidOwner.Name := VendBusinessOwner.Name;
                    BidOwner.Address := VendBusinessOwner.Address;
                    BidOwner."Post Code" := VendBusinessOwner."Post Code";
                    BidOwner."Address 2" := VendBusinessOwner."Address 2";
                    BidOwner.City := VendBusinessOwner.City;
                    BidOwner."Phone No." := VendBusinessOwner."Phone No.";
                    BidOwner."Nationality ID" := VendBusinessOwner."Nationality ID";
                    BidOwner."Citizenship Type" := VendBusinessOwner."Citizenship Type";
                    BidOwner."ID/Passport No." := VendBusinessOwner."ID/Passport No.";
                    BidOwner."Entity Ownership %" := VendBusinessOwner."Entity Ownership %";
                    BidOwner."Share Types" := VendBusinessOwner."Share Types";
                    BidOwner."No. of Shares" := VendBusinessOwner."No. of Shares";
                    BidOwner."Nominal Value/Share" := VendBusinessOwner."Nominal Value/Share";
                    BidOwner."Total Nominal Value" := VendBusinessOwner."Total Nominal Value";
                    BidOwner."Ownership Effective Date" := VendBusinessOwner."Ownership Effective Date";
                    BidOwner.Blocked := VendBusinessOwner.Blocked;
                    BidOwner.Insert(true);
                until VendBusinessOwner.Next = 0;
            end;

        end;
        //b)Preference and Reservations

        BidPreferences.Reset;
        BidPreferences.SetRange("Document No.", Purch."No.");
        if not BidPreferences.FindSet then begin
            VendSpecialGroup.Reset;
            VendSpecialGroup.SetRange("Vendor No", Purch."Vendor No.");
            VendSpecialGroup.SetRange(Blocked, false);
            if VendSpecialGroup.FindSet then begin
                repeat
                    BidPreferences.Init;
                    BidPreferences."Document Type" := Purch."Document Type";
                    BidPreferences."Document No." := Purch."No.";
                    BidPreferences."Vendor No." := Purch."Vendor No.";
                    BidPreferences."AGPO Certificate No" := VendSpecialGroup."Certifcate No";
                    BidPreferences."Registered Special Group" := VendSpecialGroup."Registered Special Group";
                    BidPreferences."Products/Service Category" := VendSpecialGroup."Products/Service Category";
                    BidPreferences."Certificate Effective Date" := VendSpecialGroup."Effective Date";
                    BidPreferences."Certificate Expiry Date" := VendSpecialGroup."Certificate Expiry Date";
                    BidPreferences."Certifying Agency" := VendSpecialGroup."Certifying Agency";
                    BidPreferences.Insert(true);
                until VendSpecialGroup.Next = 0;
            end;
        end;

        //c)Litigation History

        BidLitigation.Reset;
        BidLitigation.SetRange("No.", Purch."No.");
        if not BidLitigation.FindSet then begin
            // VendLitigation.Reset;
            // VendLitigation.SetRange("Vendor No.", Purch."Vendor No.");
            // if VendLitigation.FindSet then begin
            //     repeat
            //         BidLitigation.Init;
            //         BidLitigation."Document Type" := Purch."Document Type";
            //         BidLitigation."No." := Purch."No.";
            //         BidLitigation."Vendor No." := Purch."Vendor No.";
            //         BidLitigation."Entry No." := VendLitigation."Entry No.";
            //         BidLitigation."Dispute Matter" := VendLitigation."Dispute Matter";
            //         BidLitigation."Other Dispute Party" := VendLitigation."Other Dispute Party";
            //         BidLitigation."Dispute Amount LCY" := VendLitigation."Dispute Amount LCY";
            //         BidLitigation."Category of Matter" := VendLitigation."Category of Matter";
            //         BidLitigation.Year := VendLitigation.Year;
            //         BidLitigation."Award Type" := VendLitigation."Award Type";
            //         BidLitigation.Insert(true);
            //     until VendLitigation.Next = 0;
            // end;
        end;

        //d)Past Experience

        BidPastExperience.Reset;
        BidPastExperience.SetRange("No.", Purch."No.");
        if not BidPastExperience.FindSet then begin
            VendPastExperience.Reset;
            VendPastExperience.SetRange("Vendor No.", Purch."Vendor No.");
            if VendPastExperience.FindSet then begin
                repeat
                    BidPastExperience.Init;
                    BidPastExperience."Document Type" := Purch."Document Type";
                    BidPastExperience."No." := Purch."No.";
                    BidPastExperience."Vendor No." := Purch."Vendor No.";
                    BidPastExperience."Entry No." := VendPastExperience."Entry No.";
                    BidPastExperience."Client Name" := VendPastExperience."Client Name";
                    BidPastExperience.Address := VendPastExperience.Address;
                    BidPastExperience."Address 2" := VendPastExperience."Address 2";
                    BidPastExperience."Country/Region Code" := VendPastExperience."Country/Region Code";
                    BidPastExperience."E-Mail" := VendPastExperience."E-Mail";
                    BidPastExperience."Primary Contact Person" := VendPastExperience."Primary Contact Person";
                    BidPastExperience."Primary Contact Designation" := VendPastExperience."Primary Contact Designation";
                    BidPastExperience."Primary Contact Tel" := VendPastExperience."Primary Contact Tel";
                    BidPastExperience."Primary Contact Email" := VendPastExperience."Primary Contact Email";
                    BidPastExperience."Assignment/Project Name" := VendPastExperience."Assignment Name";
                    BidPastExperience."Project Scope Summary" := VendPastExperience."Project Scope Summary";
                    BidPastExperience."Delivery Location" := VendPastExperience."Delivery Location";
                    BidPastExperience."Contract Ref No" := VendPastExperience."Contract Ref No";
                    BidPastExperience."Assignment Start Date" := VendPastExperience."Assignment Start Date";
                    BidPastExperience."Assignment End Date" := VendPastExperience."Assignment End Date";
                    BidPastExperience."Assignment Value LCY" := VendPastExperience."Assignment Value LCY";
                    BidPastExperience."Assignment Status" := VendPastExperience."Assignment Status";
                    BidPastExperience.Insert(true);
                until VendPastExperience.Next = 0;
            end;
        end;
        //e)Audited Balance Sheet-

        BidAuditedBal.Reset;
        BidAuditedBal.SetRange("No.", Purch."No.");
        if not BidAuditedBal.FindSet then begin
            VendAuditedBal.Reset;
            VendAuditedBal.SetRange("Vendor No.", Purch."Vendor No.");
            if VendAuditedBal.FindSet then begin
                repeat
                    BidAuditedBal.Init;
                    BidAuditedBal."Document Type" := Purch."Document Type";
                    BidAuditedBal."No." := Purch."No.";
                    BidAuditedBal."Vendor No." := Purch."Vendor No.";
                    BidAuditedBal."Audit Year Code Reference" := VendAuditedBal."Audit Year Code Reference";
                    BidAuditedBal."Current Assets (LCY)" := VendAuditedBal."Current Assets (LCY)";
                    BidAuditedBal."Fixed Assets (LCY)" := VendAuditedBal."Fixed Assets (LCY)";
                    BidAuditedBal."Total Assets (LCY)" := VendAuditedBal."Total Assets (LCY)";
                    BidAuditedBal."Current Liabilities (LCY)" := VendAuditedBal."Current Liabilities (LCY)";
                    BidAuditedBal."Long-term Liabilities (LCY)" := VendAuditedBal."Long-term Liabilities (LCY)";
                    BidAuditedBal."Total Liabilities (LCY)" := VendAuditedBal."Total Liabilities (LCY)";
                    BidAuditedBal."Owners Equity (LCY)" := VendAuditedBal."Owners Equity (LCY)";
                    BidAuditedBal."Total Liabilities & Equity(LCY" := VendAuditedBal."Total Liabilities & Equity(LCY";
                    BidAuditedBal."Debt Ratio" := VendAuditedBal."Debt Ratio";
                    BidAuditedBal."Current Ratio" := VendAuditedBal."Current Ratio";
                    BidAuditedBal."Working Capital (LCY)" := VendAuditedBal."Working Capital (LCY)";
                    BidAuditedBal."Assets-To-Equity Ratio" := VendAuditedBal."Assets-To-Equity Ratio";
                    BidAuditedBal."Debt-To-Equity Ratio" := VendAuditedBal."Debt-To-Equity Ratio";
                    BidAuditedBal.Insert(true);
                until VendAuditedBal.Next = 0;

            end;
        end;

        //f)Audited Income Statement-

        BidIncomeStat.Reset;
        BidIncomeStat.SetRange("No.", Purch."No.");
        if not BidIncomeStat.FindSet then begin
            VendIncomeStat.Reset;
            VendIncomeStat.SetRange("Vendor No.", Purch."Vendor No.");
            if VendIncomeStat.FindSet then begin
                repeat
                    BidIncomeStat.Init;
                    BidIncomeStat."Document Type" := Purch."Document Type";
                    BidIncomeStat."No." := Purch."No.";
                    BidIncomeStat."Vendor No." := Purch."Vendor No.";
                    BidIncomeStat."Audit Year Code Reference" := VendIncomeStat."Audit Year Code Reference";
                    BidIncomeStat."Total Revenue (LCY)" := VendIncomeStat."Total Revenue (LCY)";
                    BidIncomeStat."Total COGS (LCY)" := VendIncomeStat."Total COGS (LCY)";
                    BidIncomeStat."Gross Margin (LCY)" := VendIncomeStat."Gross Margin (LCY)";
                    BidIncomeStat."Total Operating Expenses (LCY)" := VendIncomeStat."Total Operating Expenses (LCY)";
                    BidIncomeStat."Operating Income/EBIT (LCY)" := VendIncomeStat."Operating Income/EBIT (LCY)";
                    BidIncomeStat."Other Non-operating Re/Exp LCY" := VendIncomeStat."Other Non-operating Re/Exp LCY";
                    BidIncomeStat."Interest Expense (LCY)" := VendIncomeStat."Interest Expense (LCY)";
                    BidIncomeStat."Income Before Taxes (LCY)" := VendIncomeStat."Income Before Taxes (LCY)";
                    BidIncomeStat."Income Tax Expense (LCY)" := VendIncomeStat."Income Tax Expense (LCY)";
                    BidIncomeStat."Net Income from Ops  (LCY)" := VendIncomeStat."Net Income from Ops  (LCY)";
                    BidIncomeStat."Below-the-line Items (LCY)" := VendIncomeStat."Below-the-line Items (LCY)";
                    BidIncomeStat."Net Income" := VendIncomeStat."Net Income";
                    BidIncomeStat.Insert(true);
                until VendIncomeStat.Next = 0;
            end;
        end;

        //g)Vendor Bank Accounts

        BidVendBankAccount.Reset;
        BidVendBankAccount.SetRange("No.", Purch."No.");
        if not BidVendBankAccount.FindSet then begin
            VendBankAccount.Reset;
            VendBankAccount.SetRange("Vendor No.", Purch."Vendor No.");
            if VendBankAccount.FindSet then begin
                repeat
                    BidVendBankAccount.Init;
                    BidVendBankAccount."Document Type" := Purch."Document Type";
                    BidVendBankAccount."No." := Purch."No.";
                    BidVendBankAccount."Vendor No." := Purch."Vendor No.";
                    BidVendBankAccount.Code := VendBankAccount.Code;
                    BidVendBankAccount.Name := VendBankAccount.Name;
                    BidVendBankAccount."Available Credit Line Valu" := VendBankAccount."Available Credit Line Valu";
                    BidVendBankAccount."Currency Code" := VendBankAccount."Currency Code";
                    BidVendBankAccount.Address := VendBankAccount.Address;
                    BidVendBankAccount."Address 2" := VendBankAccount."Address 2";
                    BidVendBankAccount."Post Code" := VendBankAccount."Post Code";
                    BidVendBankAccount.City := VendBankAccount.City;
                    BidVendBankAccount."Country/Region Code" := VendBankAccount."Country/Region Code";
                    BidVendBankAccount."Phone No." := VendBankAccount."Phone No.";
                    BidVendBankAccount."Bank Account No." := VendBankAccount."Bank Account No.";
                    BidVendBankAccount."Bank Branch No." := VendBankAccount."Bank Branch No.";
                    BidVendBankAccount.Contact := VendBankAccount.Contact;
                    BidVendBankAccount."Telex No." := VendBankAccount."Telex No.";
                    BidVendBankAccount."Transit No." := VendBankAccount."Transit No.";
                    BidVendBankAccount.County := VendBankAccount.County;
                    BidVendBankAccount."Fax No." := VendBankAccount."Fax No.";
                    BidVendBankAccount."Telex Answer Back" := VendBankAccount."Telex Answer Back";
                    BidVendBankAccount."Language Code" := VendBankAccount."Language Code";
                    BidVendBankAccount."E-Mail" := VendBankAccount."E-Mail";
                    BidVendBankAccount."Home Page" := VendBankAccount."Home Page";
                    BidVendBankAccount.Iban := VendBankAccount.Iban;
                    BidVendBankAccount."SWIFT Code" := VendBankAccount."SWIFT Code";
                    BidVendBankAccount."Bank Clearing Code" := VendBankAccount."Bank Clearing Code";
                    BidVendBankAccount."Bank Clearing Standard" := VendBankAccount."Bank Clearing Standard";
                    BidVendBankAccount.Insert(true);

                until VendBankAccount.Next = 0;
            end;

        end;

        //h)Key staff



        VendKeyStaff.Reset;
        VendKeyStaff.SetRange("Vendor No.", Purch."Vendor No.");
        if VendKeyStaff.FindSet then begin
            repeat
                BidKeyStaff.Init;
                BidKeyStaff."Document Type" := Purch."Document Type";
                BidKeyStaff."No." := Purch."No.";
                BidKeyStaff."Vendor No." := Purch."Vendor No.";
                BidKeyStaff."Staff No." := VendKeyStaff."Staff Number";
                BidKeyStaff."Staff Name" := VendKeyStaff."Staff Name";
                BidKeyStaff."Years with Firm" := VendKeyStaff."Years With the Firm";
                BidKeyStaff."Staff Category" := VendKeyStaff."Staff Category";
                BidKeyStaff."Phone No." := VendKeyStaff."Phone No.";
                BidKeyStaff.Nationality := VendKeyStaff.Nationality;
                BidKeyStaff."E-Mail" := VendKeyStaff."E-Mail";
                BidKeyStaff.Insert(true);
            until VendKeyStaff.Next = 0;
        end;

        //i)Key Staff Qualifications-

        VendKeyStaffQual.Reset;
        VendKeyStaffQual.SetRange("Vendor No", Purch."No.");
        if VendKeyStaffQual.FindSet then begin
            repeat
                BidKeyStaffQual.Init;
                BidKeyStaffQual."Document Type" := Purch."Document Type";
                BidKeyStaffQual."No." := Purch."No.";
                BidKeyStaffQual."Vendor No." := Purch."Vendor No.";
                BidKeyStaffQual."Staff No." := VendKeyStaffQual."Staff Id";
                BidKeyStaffQual."Entry No" := VendKeyStaffQual."Entry No";
                BidKeyStaffQual."Qualification Category" := VendKeyStaffQual."Qualification Category";
                BidKeyStaffQual."Qualification Name" := VendKeyStaffQual."Qualification Name";
                BidKeyStaffQual.Institution := VendKeyStaffQual.Institution;
                BidKeyStaffQual."Start Year" := VendKeyStaffQual."Start Year";
                BidKeyStaffQual."End Year" := VendKeyStaffQual."End Year";
                BidKeyStaffQual."Outstanding Achievements" := VendKeyStaffQual."Outstanding Achievements";
                BidKeyStaffQual.Insert(true);
            until VendKeyStaffQual.Next = 0;
        end;

        //j)Key Staff Experience-



        VendStaffExperience.Reset;
        VendStaffExperience.SetRange("Vendor No", Purch."No.");
        if VendStaffExperience.FindSet then begin
            repeat
                BidStaffExperience.Init;
                BidStaffExperience."Document Type" := Purch."Document Type";
                BidStaffExperience."No." := Purch."No.";
                BidStaffExperience."Vendor No." := Purch."Vendor No.";
                BidStaffExperience."Staff No." := VendStaffExperience."Staff ID";
                BidStaffExperience."Entry No" := VendStaffExperience."Entry No";
                BidStaffExperience."Experience Category" := VendStaffExperience."Experience Category";
                BidStaffExperience."Years of Experience" := VendStaffExperience."Years of Experience";
                BidStaffExperience."Experience Summary" := VendStaffExperience."Experience Summary";
                BidStaffExperience."Sample Assignments/Projects" := VendStaffExperience."Assignment Description";
                BidStaffExperience."Experience From Year" := VendStaffExperience."Start Year";
                BidStaffExperience."Experience To Year" := VendStaffExperience."End Year";
                BidStaffExperience.Insert(true);

            until VendStaffExperience.Next = 0;
        end;

    end;


    procedure SuggestBidEvaluationCriteria(EvaluationHeader: Record "Bid Evaluation Register")
    var
        Bidevaluationscore: Record "Bid Evaluation Score Entry";
        BidSCoreGuide: Record "Bid Score Requirement";
        LineNo: Integer;
        BidScore: Record "Bid Score Guide";
        BidEvaluationCriteria: Record "Bid Evaluation Criteria Group";
        EvaluationCriteria: Record "Bid Score Criteria Group";
        BidEvalScore: Record "Bid Evaluation Score Guide";
    begin

        EvaluationHeader.TestField("Bid Scoring Document No.");



        Bidevaluationscore.Reset;
        if Bidevaluationscore.FindLast then
            LineNo := Bidevaluationscore."Line No";

        Bidevaluationscore.Reset;
        Bidevaluationscore.SetRange("Bid Scoring Document No.", EvaluationHeader."Bid Scoring Document No.");
        Bidevaluationscore.SetRange(Code, EvaluationHeader.Code);
        if Bidevaluationscore.FindSet then begin
            Bidevaluationscore.DeleteAll;

        end;

        BidEvaluationCriteria.Reset;
        BidEvaluationCriteria.SetRange("Template ID", EvaluationHeader."Bid Scoring Document No.");
        BidEvaluationCriteria.SetRange("Document No", EvaluationHeader.Code);
        if BidEvaluationCriteria.FindSet then begin
            BidEvaluationCriteria.DeleteAll;
        end;

        BidEvalScore.Reset;
        BidEvalScore.SetRange("Template ID", EvaluationHeader."Bid Scoring Document No.");
        BidEvalScore.SetRange("Document No", EvaluationHeader.Code);
        if BidEvalScore.FindSet then begin
            BidEvalScore.DeleteAll;
        end;


        BidSCoreGuide.Reset;
        BidSCoreGuide.SetRange("Template ID", EvaluationHeader."Bid Scoring Document No.");
        BidSCoreGuide.SetRange("Evaluation Type", EvaluationHeader."Evaluation Type");
        if BidSCoreGuide.FindSet then begin
            repeat
                Bidevaluationscore.Init;
                Bidevaluationscore.Code := EvaluationHeader.Code;
                Bidevaluationscore."Line No" := LineNo + 1;
                ;
                Bidevaluationscore."Bid No." := EvaluationHeader."Bid No.";
                Bidevaluationscore."Vendor No." := EvaluationHeader."Vendor No.";
                Bidevaluationscore."Criteria Group" := BidSCoreGuide."Criteria Group ID";
                Bidevaluationscore."Requirement ID" := BidSCoreGuide."Requirement ID";
                Bidevaluationscore."Evaluation Requirement" := BidSCoreGuide."Evaluation Requirement";
                Bidevaluationscore."Rating Type" := BidSCoreGuide."Rating Type";
                Bidevaluationscore."Target Qty" := BidSCoreGuide."Target Qty";
                Bidevaluationscore."Target Value/KPI" := BidSCoreGuide."Target Value";
                Bidevaluationscore."Unit of Measure" := BidSCoreGuide."Unit of Measure";
                //Bidevaluationscore."Response Value":=Bid
                //Bidevaluationscore."Bid Response Actual Qty":=BidSCoreGuide.
                //Bidevaluationscore."Score %":=
                Bidevaluationscore."Assigned Weight %" := BidSCoreGuide."Assigned Weight %";
                //Bidevaluationscore."Weighted Line Score":=BidSCoreGuide.
                Bidevaluationscore."Equipment Type" := BidSCoreGuide."Equipment Type";
                Bidevaluationscore."Desired Perfomance Direction" := BidSCoreGuide."Desired Perfomance Direction";
                Bidevaluationscore."Bid Scoring Document No." := EvaluationHeader."Bid Scoring Document No.";
                Bidevaluationscore.Insert(true);
                LineNo += 1;
            until BidSCoreGuide.Next = 0;
        end;

        //add bid evaluation criteria
        EvaluationCriteria.Reset;
        EvaluationCriteria.SetRange("Template ID", EvaluationHeader."Bid Scoring Document No.");
        EvaluationCriteria.SetRange("Evaluation Type", EvaluationHeader."Evaluation Type");
        if EvaluationCriteria.FindSet then begin
            repeat
                BidEvaluationCriteria.Init;
                BidEvaluationCriteria."Template ID" := EvaluationCriteria."Template ID";
                BidEvaluationCriteria."Criteria Group ID" := EvaluationCriteria."Criteria Group ID";
                BidEvaluationCriteria."Document No" := EvaluationHeader.Code;
                BidEvaluationCriteria."Evaluation Type" := EvaluationCriteria."Evaluation Type";
                BidEvaluationCriteria.Description := EvaluationCriteria.Description;
                BidEvaluationCriteria."Total Weight %" := EvaluationCriteria."Total Weight %";
                BidEvaluationCriteria.Insert(true);
            until EvaluationCriteria.Next = 0;
        end;

        //add Bid Evaluation Score Guide
        BidScore.Reset;
        BidScore.SetRange("Template ID", EvaluationHeader."Bid Scoring Document No.");
        BidScore.SetRange("Evaluation Type", EvaluationHeader."Evaluation Type");
        if BidScore.FindSet then begin
            repeat
                BidEvalScore.Init;
                BidEvalScore."Template ID" := BidScore."Template ID";
                BidEvalScore."Criteria Group ID" := BidScore."Criteria Group ID";
                BidEvalScore."Requirement ID" := BidScore."Requirement ID";
                BidEvalScore."Entry No" := BidScore."Entry No";
                BidEvalScore."Response Value" := BidScore."Response Value";
                BidEvalScore."Document No" := EvaluationHeader.Code;
                BidEvalScore."Target Qty" := BidScore."Target Qty";
                BidEvalScore."Rating Type" := BidScore."Rating Type";
                BidEvalScore."Evaluation Type" := BidScore."Evaluation Type";
                BidEvalScore."Desired Perfomance Direction" := BidScore."Desired Perfomance Direction";
                BidEvalScore."Min Bid Value" := BidScore."Min Bid Value";
                BidEvalScore."Max Bid Value" := BidScore."Max Bid Value";
                BidEvalScore."Min Date Value" := BidScore."Min Date Value";
                BidEvalScore."Max Date Value" := BidScore."Max Date Value";
                BidEvalScore."Score %" := BidScore."Score %";
                BidEvalScore.Insert(true);
            until BidScore.Next = 0;
        end;
    end;


    procedure PostBidOpeningRegister(BidOpeningRegister: Record "Bid Opening Register")
    var
        IFSDetails: Record "Standard Vendor Purchase Code";
        BidOpeningLines: Record "Bid Opening Register Line";
        IFS: Record "Standard Purchase Code";
    begin
        // if not ConfirmManagement.ConfirmProcess(Text001, true) then
        //     exit;
        BidOpeningLines.Reset;
        BidOpeningLines.SetRange(Code, BidOpeningRegister.Code);
        if BidOpeningLines.FindSet then begin
            repeat
                IFSDetails.Reset;
                IFSDetails.SetRange(Code, BidOpeningLines."IFS Code");
                IFSDetails.SetRange("Vendor No.", BidOpeningLines."Vendor No.");
                if IFSDetails.FindSet then begin
                    IFSDetails."Bid Opening Register No." := BidOpeningRegister.Code;
                    IFSDetails."Bid No." := BidOpeningLines."Bid No.";
                    IFSDetails."Bid Opening Date (Technical)" := BidOpeningRegister."Bid Opening Date";
                    IFSDetails."Late Bid (Opening Stage)" := BidOpeningLines."Late Bid";
                    IFSDetails."Late Bid Submission Time" := BidOpeningLines."Late Bid Submission Time";
                    IFSDetails."Bid Security Amount (LCY)" := BidOpeningLines."Bid Security Amount (LCY)";
                    IFSDetails."Bid Security Amount Pass" := BidOpeningLines."Bid Security Amount Pass";
                    BidOpeningLines.CalcFields("Bid Sum 1(LCY)");
                    BidOpeningLines.CalcFields("Bid Sum 2(LCY)");
                    IFSDetails."Bid Sum 1(LCY)" := BidOpeningLines."Bid Sum 1(LCY)";
                    IFSDetails."Bid Sum 2(LCY)" := BidOpeningLines."Bid Sum 2(LCY)";
                    IFSDetails."Bid Security Issuer" := BidOpeningLines."Bid Security Issuer";
                    //IFSDetails."Bid Opening Result":=IFSDetails."Bid Opening Result"::
                    IFSDetails."Final Evaluated Bid Price" := BidOpeningLines."Total Tender Price (LCY)";
                    IFSDetails."Read-out Bid Price (A)" := BidOpeningLines."Total Tender Price (LCY)";
                    IFSDetails."Valid Bid Security Provided" := BidOpeningLines."Valid Bid Security Provided";
                    IFSDetails."Complete Bid Doc Submitted" := BidOpeningLines."Complete Bid Doc Submitted";
                    IFSDetails."Bid Opening Ranking" := BidOpeningLines.Rank;
                    IFSDetails."Assigned Bid No" := BidOpeningLines."Assigned Bid No.";
                    IFSDetails.Responded := true;
                    IFSDetails.Modify(true);
                end;
                Bids.Reset;
                Bids.SetRange("No.", BidOpeningLines."Bid No.");
                if Bids.FindSet then begin
                    // REPEAT
                    Bids."Document Status" := Bids."document status"::Opened;
                    Bids."Bid Opening Register No." := BidOpeningRegister.Code;
                    Bids."Bid Opening Date" := Today;
                    Bids.Modify(true);
                    //UNTIL Bids.NEXT=0;
                end;

            //FnNotifyBidOpeningAttendees(BidOpeningLines);
            until BidOpeningLines.Next = 0;

        end;

        IFS.Reset;
        IFS.SetRange(Code, BidOpeningRegister."IFS Code");
        if IFS.FindSet then begin
            IFS."Bid Opening Register" := BidOpeningRegister.Code;
            IFS."IFS Opening Date" := Today;
            IFS."IFS Evaluation Start Date" := Today;
            //    ifs."Bid Opening Date"
            IFS.Modify(true);

        end;

        BidOpeningRegister.Posted := true;
        BidOpeningRegister."Posted By" := UserId;
        BidOpeningRegister."Posted Date" := Today;
        BidOpeningRegister."Bid Opening End Time" := Time;
        BidOpeningRegister.Modify(true);
        Message('%1 Opened Successfully', BidOpeningRegister."Tender Name");
    end;


    procedure FnNotifyBidOpeningAttendees(BidOpening: Record "Bid Opening Register Line")
    var
        SupplierReq: Record Contact;
        LastFieldNo: Integer;
        FooterPrinted: Boolean;
        FileDirectory: Text[100];
        FileName: Text[100];
        ReportID: Integer;
        // //"Object": Record "Object";
        Window: Dialog;
        RunOnceFile: Text[1000];
        TimeOut: Integer;
        Customer2: Record Customer;
        Cust: Record Customer;
        cr: Integer;
        lf: Integer;
        EmailBody: array[2] of Text[30];
        BodyText: Text[250];
        mymail: Codeunit Mail;
        DefaultPrinter: Text[200];
        WindowisOpen: Boolean;
        FileDialog: Codeunit Mail;
        SendingDate: Date;
        SendingTime: Time;
        Counter: Integer;
        cu400: Codeunit Mail;
        DocLog: Record "Document E-mail Log";
        BranchName: Code[80];
        DimValue: Record "Dimension Value";
        SenderAddress: Text[100];
        CustEmail: Text[100];
        UserSetup: Record "User Setup";
        HRSetup: Record "Company Information";
        Emp: Record Vendor;
        PayrollMonth: Date;
        PayrollMonthText: Text[30];
        PayPeriodtext: Text;
        PayPeriod: Record "Payroll PeriodX";
        CompInfo: Record "Company Information";
        DateFilter: Text;
        FromDate: Date;
        ToDate: Date;
        FromDateS: Text;
        ToDateS: Text;
        vend: Record Vendor;
        StartDate: Date;
        EndDAte: Date;
        EmailVerifier: Codeunit Payroll3;
        IsEmailValid: Boolean;
        PPayableSetup: Record "Procurement Setup";
        RequesterName: Text[100];
        RequesterEmail: Text[100];
        emailhdr: Text[100];
        CompanyDetails: Text[250];
        SupplierDetails: Text[1000];
        SenderMessage: Text[1000];
        ProcNote: Text[1000];
        LoginDetails: Text[1000];
        PortalUser: Record "Dynasoft Portal User";
        Password: Text[50];
        ActivationDetails: Text[1000];
        IFSPrebidAttendees: Record "Bid Opening Bidder Attendance";
        BidopeningRegister: Record "Bid Opening Register";
    begin
        ///Notifying Procurement Team on supplier Request
        vend.Reset;
        vend.SetRange("No.", BidOpening."Vendor No.");
        if vend.FindSet then begin
            BidopeningRegister.Reset;
            BidopeningRegister.SetRange(Code, BidOpening.Code);

            CompInfo.Get;
            HRSetup.Get;
            PPayableSetup.Get;

            vend.TestField("E-Mail");
            RequesterEmail := vend."E-Mail";
            RequesterName := vend.Name;

            Window.Open('Notifying the Sender...');

            WindowisOpen := true;


            Counter := Counter + 1;

            //Create message
            if HRSetup."E-Mail" = '' then
                Error('Please Contact the IT Admin to specify the E-mail address under Company Information Setup page!!');
            SenderAddress := HRSetup."E-Mail";

            if PPayableSetup."Default Proc Email Contact" = '' then
                Error('Please Contact the IT Admin to specify the Procurement Manager E-mail address under Purchases&Payable Setup page!!');
            CustEmail := PPayableSetup."Default Proc Email Contact";

            CompanyDetails := 'Dear,  ' + RequesterName + '<BR>' + vend."No.";
            SenderMessage := '<BR>Thank You for participating in the Bid Opening meeting (Meeting Reference No:' + BidOpening.Code + ') held on ' + Format(BidopeningRegister."Bid Opening Date") +
            'as summarized below: </BR>';
            SupplierDetails := '<BR>Tender invitation Notice No:' + BidopeningRegister."IFS Code" + '</BR>' + '<BR> Tender Name:' + BidopeningRegister."Tender Name" + '</BR>' +
            '<BR>Bid Opening Meeting Time and Venue:' + Format(BidopeningRegister."Bid Opening Start Time") + ' To ' + Format(BidopeningRegister."Bid Opening End Time") + ' ,' + BidopeningRegister."Bid Opening Venue" + '</BR>';
            LoginDetails := 'Attached herein, please find summarized minutes of the Bid Opening meeting';


            ProcNote := '<BR> If you require any assistance, please contact our Procurement team by Phone ' + HRSetup."Phone No." + ' or vendor support team via Email: ' + PPayableSetup."Default Proc Email Contact";

            FileDirectory := 'C:\DOCS\';
            FileName := 'BidOpening_' + BidopeningRegister.Code + '.pdf';
            /// //Report.SaveAsPdf(70040, FileDirectory + FileName, BidopeningRegister);


            if CustEmail = '' then
                exit;

            //MESSAGE:='This is to notify you that there has been a request for Registration ' +  SupplierRequest."No." + ' From Supplier'+ SupplierRequest.Name;
            emailhdr := 'Bid Opening Register (Reference No: ' + BidopeningRegister.Code + ')';

            // //cu400.CreateMessage(CompInfo.Name, SenderAddress, RequesterEmail, emailhdr,
            // //CompanyDetails + '<BR></BR>' + SenderMessage + SupplierDetails + LoginDetails + ActivationDetails, true);
            // //cu400.AddAttachment(FileDirectory + FileName, FileName);
            IFSPrebidAttendees.Reset;
            IFSPrebidAttendees.SetRange("Vendor No.", vend."No.");
            IFSPrebidAttendees.SetRange(Code, BidOpening.Code);
            // if IFSPrebidAttendees.FindSet then begin
            //     repeat
            //         //cu400.AddCC(IFSPrebidAttendees."Representative Email");
            //         IFSPrebidAttendees."Notified By Email" := true;
            //         IFSPrebidAttendees."Date/Time Notified" := Today;
            //         IFSPrebidAttendees.Modify(true);
            //     until IFSPrebidAttendees.Next = 0;
            // end;
            // //cu400.AddCC(CustEmail);

            // //cu400.AddBodyline(ProcNote);


            // //cu400.Send;
            SendingDate := Today;
            SendingTime := Time;
            BidOpening.Notified := true;
            BidOpening."Date/Time Notified" := Today;
            BidOpening.Modify(true);



            Sleep(1000);
            Window.Close;

            //UNTIL vend.NEXT=0;
        end;
    end;


    procedure PostIFPOpeningRegister(BidOpeningRegister: Record "Bid Opening Register")
    var
        IFSDetails: Record "Standard Vendor Purchase Code";
        BidOpeningLines: Record "Bid Opening Register Line";
        IFS: Record "Standard Purchase Code";
        IFPResponseLine: Record "IFP Response Line";
        RFI: Record "Request For Information";
    begin
        // if not ConfirmManagement.ConfirmProcess(Text001, true) then
        //     exit;
        IFPResponseLine.Reset;
        IFPResponseLine.SetRange("RFI Document No.", BidOpeningRegister."IFP Code");
        if IFPResponseLine.FindSet then begin
            repeat
                IFPResponseLine."Response Stage" := IFPResponseLine."response stage"::"Opening Stage";
                IFPResponseLine."IFP Opening Register No" := BidOpeningRegister.Code;
                IFPResponseLine.Modify(true);
            until IFPResponseLine.Next = 0;
        end;
        BidOpeningRegister.Posted := true;
        BidOpeningRegister."Posted By" := UserId;
        BidOpeningRegister."Posted Date" := Today;
        BidOpeningRegister."Bid Opening End Time" := Time;
        BidOpeningRegister.Modify(true);
        RFI.Reset;
        RFI.SetRange(Code, BidOpeningRegister."IFP Code");
        if RFI.FindSet then begin
            RFI."Document Status" := RFI."document status"::Opened;
            RFI."RFI Document Status" := RFI."rfi document status"::"Submissions Closed";
            RFI.Modify(true);
        end;
        Message('%1 Opened Successfully', BidOpeningRegister."IFP Code");
    end;


    procedure UnsealBid(BidOpeningRegister: Record "Bid Opening Register"; BidOpeningRegisterLine1: Record "Bid Opening Register Line")
    var
        IFSDetails: Record "Standard Vendor Purchase Code";
        BidOpeningLines: Record "Bid Opening Register Line";
        Bids: Record "Purchase Header";
        BidsSecurity: Record "Bid_Contract Security Register";
        Bids21: Record "Purchase Header";
        BidOpeningReg: Record "Bid Opening Register";
        BidOpen: Record "Bid Opening Register Line";
        SerialNamba: Integer;
        StandardPur: Record "Standard Purchase Code";
    begin
        BidOpeningRegister.TestField("Opening Person 1");
        BidOpeningRegister.TestField("Opening Person 2");
        BidOpeningRegister.TestField("Opening Person 3");
        //BidOpeningRegister.TESTFIELD("Opening Person 4");
        Bids.Reset;
        Bids.SetRange("Invitation For Supply No", BidOpeningRegister."IFS Code");
        Bids.SetRange("Document Type", Bids."document type"::Quote);
        if (Bids.Count < 3) and (BidOpeningRegister.Type = BidOpeningRegister.Type::Technical) then begin
            Error('The must be atleast 3 Submitted Bids to Open');
        end;

        //Bids.SETRANGE("Responsive Bid (Evaluation)",TRUE);
        if Bids.FindSet then begin
            // RankingNo:=0;
            SerialNamba := 0;
            // BidOpeningLines.RESET;
            // BidOpeningLines.SETRANGE("Bid No.",Bids."No.");
            // BidOpeningLines.SETRANGE("IFS Code",BidOpeningRegister."IFS Code");
            // BidOpeningLines.SETRANGE(Code,BidOpeningRegister.Code);
            // IF BidOpeningLines.FINDFIRST THEN
            //  BidOpeningLines.DELETEALL;
            repeat
                BidOpeningLines.Reset;
                BidOpeningLines.SetRange("Vendor No.", Bids."Buy-from Vendor No.");
                //BidOpeningLines.SETRANGE("Bid No.",Bids."No.");
                BidOpeningLines.SetRange("IFS Code", BidOpeningRegister."IFS Code");
                BidOpeningLines.SetRange(Code, BidOpeningRegister.Code);
                if not BidOpeningLines.FindSet then begin
                    BidOpeningLines.Init;
                    BidOpeningLines.Code := BidOpeningRegister.Code;
                    BidOpeningLines."Vendor No." := Bids."Buy-from Vendor No.";
                    BidOpeningLines."IFS Code" := BidOpeningRegister."IFS Code";
                    BidOpeningLines."Bidder Name" := Bids."Buy-from Vendor Name";
                    BidOpeningLines."Bid No." := Bids."No.";
                    BidOpeningLines."Auto Assigned No" := SerialNamba + 1;
                    BidOpeningLines."Assigned Bid No." := 'B' + Format(BidOpeningLines."Auto Assigned No");
                    BidOpeningLines."External Bid Reference No" := BidOpeningRegister."IFS Code";
                    BidsSecurity.Reset;
                    BidsSecurity.SetRange("No.", Bids."No.");
                    if BidsSecurity.FindSet then begin
                        if BidsSecurity."Security Amount (LCY)" > 0 then
                            BidOpeningLines."Valid Bid Security Provided" := true;
                        BidOpeningLines."Bid Security Issuer" := BidsSecurity."Issuer/Guarantor Name";
                        BidOpeningLines."Bid Security Amount (LCY)" := BidsSecurity."Security Amount (LCY)";
                        //MESSAGE('%1 %2',BidsSecurity."Security Amount (LCY)",BidsSecurity."Issuer/Guarantor Name");
                        if BidOpeningLines."Bid Security Amount (LCY)" >= BidsSecurity."Security Amount (LCY)" then
                            BidOpeningLines."Bid Security Amount Pass" := true
                        else
                            BidOpeningLines."Bid Security Amount Pass" := false;
                    end;
                    Bids.CalcFields("Amount Including VAT");
                    BidOpeningLines."Total Tender Price (LCY)" := Bids."Amount Including VAT";


                    //BidOpeningLines."Complete Bid Doc Submitted":=
                    //BidOpeningLines."Late Bid":=
                    // BidOpeningLines."Late Bid Submission Time":=
                    BidOpeningLines."Bid Withdrawal Notice No." := Bids."Withdrawal Notice No";
                    //BidOpeningLines."Bid Modification Notice No.":=Bids.bid
                    BidOpeningLines."Bid Withdrawal Notice No." := Bids."Withdrawal Notice No";
                    if BidOpeningLines."Bid Modification Notice No." <> '' then
                        BidOpeningLines."Bid Modification Exists" := true
                    else
                        BidOpeningLines."Bid Modification Exists" := false;
                    if BidOpeningLines."Bid Withdrawal Notice No." <> '' then
                        BidOpeningLines."Bid Withdrawal Exists" := true
                    else
                        BidOpeningLines."Bid Withdrawal Exists" := false;
                    //BidOpeningLines."Final Bid Opening Result":=
                    //BidOpeningLines."Tender Opening Com Remarks":=
                    BidOpeningLines.Insert(true);
                    // RankingNo:=RankingNo+1;
                    SerialNamba := SerialNamba + 1;
                end;

            until Bids.Next = 0;
        end;
        BidOpeningReg.Reset;
        BidOpeningReg.SetRange(Code, BidOpeningRegister.Code);
        if BidOpeningReg.FindSet then begin
            RankingNo := 0;
            BidOpeningRegisterLine1.Reset;
            BidOpeningRegisterLine1.SetRange(Code, BidOpeningReg.Code);
            //BidOpeningRegisterLine1.SETFILTER(Rank,'=%1',0);
            BidOpeningRegisterLine1.SetCurrentkey("Total Tender Price (LCY)");
            BidOpeningRegisterLine1.SetAscending("Total Tender Price (LCY)", true);
            if BidOpeningRegisterLine1.FindSet then begin
                repeat
                    //BidOpeningRegisterLine1.Rank:=RankingNo+1;
                    BidOpen.Reset;
                    BidOpen.SetRange(Code, BidOpeningReg.Code);
                    BidOpen.SetFilter(Rank, '<>%1', 0);
                    BidOpen.SetRange("Total Tender Price (LCY)", BidOpeningRegisterLine1."Total Tender Price (LCY)");
                    if BidOpen.FindFirst then begin
                        BidOpeningRegisterLine1.Rank := BidOpen.Rank;
                        BidOpeningRegisterLine1.Modify(true);
                        RankingNo := BidOpen.Rank;
                    end else begin
                        BidOpeningRegisterLine1.Rank := RankingNo + 1;
                        BidOpeningRegisterLine1.Modify(true);
                        RankingNo := RankingNo + 1;
                    end;

                // BidOpeningRegisterLine1.MODIFY(TRUE);
                // RankingNo:=RankingNo+1;
                until BidOpeningRegisterLine1.Next = 0;

            end;

        end;
        StandardPur.Reset;
        StandardPur.SetRange(Code, BidOpeningRegister."IFS Code");
        if StandardPur.FindSet then begin
            BidOpeningRegister."Job No" := StandardPur.Job;
            BidOpeningRegister."Job Task No" := StandardPur."Job Task No.";
            BidOpeningRegister.Modify(true);
        end;
        Message('Unsealed Successfully');

        /*BidOpeningRegister.Posted:=TRUE;
        BidOpeningRegister."Posted By":=USERID;
        BidOpeningRegister."Posted Date":=TODAY;*/

    end;


    procedure UnsealIFP(BidOpeningRegister: Record "Bid Opening Register"; BidOpeningRegisterLine1: Record "Bid Opening Register Line")
    var
        IFSDetails: Record "Standard Vendor Purchase Code";
        BidOpeningLines: Record "Bid Opening Register Line";
        Bids: Record "Purchase Header";
        BidsSecurity: Record "Bid_Contract Security Register";
        RFIResponse: Record "RFI Response";
    begin
        BidOpeningRegister.TestField("Opening Person 1");
        BidOpeningRegister.TestField("Opening Person 2");
        BidOpeningRegister.TestField("Opening Person 3");
        //BidOpeningRegister.TESTFIELD("Opening Person 4");
        RFIResponse.Reset;
        RFIResponse.SetRange("RFI Document No.", BidOpeningRegister."IFP Code");
        if (RFIResponse.Count < 3) then begin
            Error('The must be atleast 3 Submissions to Open');
        end;
        //RankingNo:=0;
        //Bids.SETRANGE("Responsive Bid (Evaluation)",TRUE);
        if RFIResponse.FindSet then begin
            repeat
                RFIResponse."Document Status" := RFIResponse."document status"::Opened;
                RFIResponse.Modify(true);
            //RankingNo:=RankingNo+1;

            until RFIResponse.Next = 0;
            Message('Unsealed Successfully');
        end;
    end;


    procedure PostPreliminaryEvaluation(EvaluationHeader: Record "Bid Evaluation Register")
    var
        Bidevaluationscore: Record "Bid Evaluation Score Entry";
        BidSCoreGuide: Record "Bid Score Requirement";
        LineNo: Integer;
        IFSDetails: Record "Standard Vendor Purchase Code";
        ProcuremnetSetup: Record "Procurement Setup";
        IFS: Record "Standard Purchase Code";
        Bids: Record "Purchase Header";
    begin
        // if not ConfirmManagement.ConfirmProcess(Text001, true) then
        //     exit;

        EvaluationHeader.TestField("IFS Code");
        EvaluationHeader.TestField("Bid No.");
        EvaluationHeader.TestField("Evaluation Date");
        EvaluationHeader.TestField("Evaluation Lead");
        EvaluationHeader.TestField("Preliminary Evaluation Score");
        EvaluationHeader.Posted := true;
        EvaluationHeader."Posted By" := UserId;
        EvaluationHeader."Posted Date" := Today;
        EvaluationHeader.Modify(true);
        Bids.Reset;
        Bids.SetRange("No.", EvaluationHeader."Bid No.");
        Bids.SetRange("IFS Code", EvaluationHeader."IFS Code");
        if Bids.FindFirst() then begin
            if EvaluationHeader."Preliminary Evaluation Score" = EvaluationHeader."preliminary evaluation score"::Responsive then
                Bids."Responsive Bid (Evaluation)" := true;
            Bids."Preliminary Evaluation Date" := EvaluationHeader."Evaluation Date";
            if EvaluationHeader."Evaluator Category" = EvaluationHeader."evaluator category"::"Individual Evaluator" then begin
                Bids."Bid  Committee Evaluated" := true;//Control Multiple Evaluation
                IndividualEvaluationMatrix.Init;
                IndividualEvaluationMatrix."Bid Evaluation Register No" := EvaluationHeader.Code;
                IndividualEvaluationMatrix."Bid No" := EvaluationHeader."Bid No.";
                IndividualEvaluationMatrix."Entry No" := IndividualEvaluationMatrix.Count + 1;
                IndividualEvaluationMatrix."Vendor No" := EvaluationHeader."Vendor No.";
                IndividualEvaluationMatrix."Evaluation Decision" := EvaluationHeader."Preliminary Evaluation Score";
                // IndividualEvaluationMatrix."Evaluation Score":=EvaluationHeader.PRE
                IndividualEvaluationMatrix."Evaluator No" := EvaluationHeader."Evaluation Lead";
                IndividualEvaluationMatrix."Evaluator Name" := EvaluationHeader."Evaluation Lead Name";
                //IndividualEvaluationMatrix."Evaluation Results":='';
                IndividualEvaluationMatrix."Evaluation Date" := Today;
                if not IndividualEvaluationMatrix.Get(IndividualEvaluationMatrix."Bid Evaluation Register No", IndividualEvaluationMatrix."Bid No",
                  IndividualEvaluationMatrix."Entry No") then
                    IndividualEvaluationMatrix.Insert;
            end else
                Bids."Bid  Committee Evaluated" := false;
            Bids.Modify;
        end;

        IFSDetails.Reset;
        IFSDetails.SetRange(Code, EvaluationHeader."IFS Code");
        IFSDetails.SetRange("Vendor No.", EvaluationHeader."Vendor No.");
        if IFSDetails.FindFirst() then begin
            IFSDetails."Preliminary Evaluation Reg" := EvaluationHeader.Code;
            IFSDetails."Preliminary Evaluation Date" := EvaluationHeader."Created Date";
            IFSDetails."Preliminary Evaluation Outcome" := Format(EvaluationHeader."Preliminary Evaluation Score");
            IFSDetails."Preminary Evaluation Committee" := EvaluationHeader."Tender Evaluation Comm Remarks";
            IFSDetails.Modify(true);
        end else begin

            IFSDetails.Init;
            IFSDetails."Vendor No." := EvaluationHeader."Vendor No.";
            IFSDetails.Code := EvaluationHeader."IFS Code";
            IFS.Reset;
            IFS.SetRange(Code, EvaluationHeader."IFS Code");
            if IFS.FindSet then begin
                IFSDetails.Description := IFS."Tender Name";
                IFSDetails."IFS Code" := IFS.Code;
            end;
            IFSDetails."Bid No." := EvaluationHeader."Bid No.";
            IFSDetails."Vendor Name" := EvaluationHeader."Bidder Name";
            IFSDetails."Preliminary Evaluation Reg" := EvaluationHeader.Code;
            IFSDetails."Preliminary Evaluation Date" := EvaluationHeader."Created Date";
            IFSDetails."Preliminary Evaluation Outcome" := Format(EvaluationHeader."Preliminary Evaluation Score");
            IFSDetails."Preminary Evaluation Committee" := EvaluationHeader."Tender Evaluation Comm Remarks";
            if EvaluationHeader."Preliminary Evaluation Score" = EvaluationHeader."preliminary evaluation score"::"Non-Responsive" then begin
                IFSDetails."Evaluation Committee Recomm" := IFSDetails."evaluation committee recomm"::Unsuccesful;
            end;
            if EvaluationHeader."Preliminary Evaluation Score" = EvaluationHeader."preliminary evaluation score"::Responsive then begin
                IFSDetails."Passed Preliminary  Evaluation" := true;
            end;
            IFSDetails.Insert(true);
        end;
       
        ProcuremnetSetup.Get;
        if ProcuremnetSetup."Notify Committe Members" = true then
            FnSendBidEvaluationNotification(EvaluationHeader);

        IFS.Reset;
        IFS.SetRange(Code, EvaluationHeader."IFS Code");
        if IFS.FindFirst() then begin
            IFS."Document Status" := IFS."document status"::Evaluation;
            if IFS.Modify then
             Message('Submitted Successfully');
        end;
    end;


    procedure FnSendBidEvaluationNotification(evaluationHeaader: Record "Bid Evaluation Register")
    var
        SupplierReq: Record Contact;
        LastFieldNo: Integer;
        FooterPrinted: Boolean;
        FileDirectory: Text[100];
        FileName: Text[100];
        ReportID: Integer;
        //  //"Object": Record "Object";
        Window: Dialog;
        RunOnceFile: Text[1000];
        TimeOut: Integer;
        Customer2: Record Customer;
        Cust: Record Customer;
        cr: Integer;
        lf: Integer;
        EmailBody: array[2] of Text[30];
        BodyText: Text[250];
        mymail: Codeunit Mail;
        DefaultPrinter: Text[200];
        WindowisOpen: Boolean;
        FileDialog: Codeunit Mail;
        SendingDate: Date;
        SendingTime: Time;
        Counter: Integer;
        cu400: Codeunit Mail;
        DocLog: Record "Document E-mail Log";
        BranchName: Code[80];
        DimValue: Record "Dimension Value";
        SenderAddress: Text[100];
        CustEmail: Text[100];
        UserSetup: Record "User Setup";
        HRSetup: Record "Company Information";
        Emp: Record Vendor;
        PayrollMonth: Date;
        PayrollMonthText: Text[30];
        PayPeriodtext: Text;
        PayPeriod: Record "Payroll PeriodX";
        CompInfo: Record "Company Information";
        DateFilter: Text;
        FromDate: Date;
        ToDate: Date;
        FromDateS: Text;
        ToDateS: Text;
        vend: Record Vendor;
        StartDate: Date;
        EndDAte: Date;
        EmailVerifier: Codeunit Payroll3;
        IsEmailValid: Boolean;
        PPayableSetup: Record "Procurement Setup";
        RequesterName: Text[100];
        RequesterEmail: Text[100];
        emailhdr: Text[100];
        CompanyDetails: Text[250];
        SupplierDetails: Text[1000];
        SenderMessage: Text[1000];
        ProcNote: Text[1000];
        LoginDetails: Text[1000];
        PortalUser: Record "Dynasoft Portal User";
        Password: Text[50];
        ActivationDetails: Text[1000];
        IFSCommitteMembers: Record "Bid Evaluation Committee";
        IFSTenderCommitte: Record "IFS Tender Committee";
        EvaluationRegister: Record "Bid Evaluation Register";
    begin
        ///Notifying Procurement Team on supplier Request


        CompInfo.Get;
        HRSetup.Get;
        PPayableSetup.Get;


        IFSCommitteMembers.Reset;
        IFSCommitteMembers.SetRange("Document No.", evaluationHeaader.Code);
        if IFSCommitteMembers.FindSet then begin
            repeat
                IFSCommitteMembers.TestField(Email);
                RequesterEmail := IFSCommitteMembers.Email;
                RequesterName := IFSCommitteMembers."Member Name";
                Window.Open('Notifying...');
                WindowisOpen := true;

                IFSTenderCommitte.Reset;
                IFSTenderCommitte.SetRange("Document No.", evaluationHeaader."Appointed Bid Evaluation Commi");
                if IFSTenderCommitte.FindSet then
                    Counter := Counter + 1;

                //Create message
                if HRSetup."E-Mail" = '' then
                    Error('Please Contact the IT Admin to specify the E-mail address under Company Information Setup page!!');
                SenderAddress := HRSetup."E-Mail";

                if PPayableSetup."Default Proc Email Contact" = '' then
                    Error('Please Contact the IT Admin to specify the Procurement Manager E-mail address under Purchases&Payable Setup page!!');
                CustEmail := PPayableSetup."Default Proc Email Contact";

                CompanyDetails := 'Dear,  ' + RequesterName;
                SenderMessage := '<BR>Please find attached summary of the Evaluation No:' + evaluationHeaader.Code + '</BR>';
                SupplierDetails := '<BR>Appointment Reference No:' + IFSCommitteMembers."Appointed Bid Opening Com" + '</BR>' + '<BR> Committee Type:' + IFSTenderCommitte."Committee Type" + '</BR>' +
                '<BR>Membership Role:' + Format(IFSCommitteMembers."Role Type") + '</BR>' +
                '<BR>Appointment Effective Date:' + Format(IFSTenderCommitte."Appointment Effective Date") + '</BR>' +
                '<BR>Invitation For Supply No:' + IFSCommitteMembers."IFS Code" + '</BR>' +
                '<BR>Tender Name:' + IFSTenderCommitte."Tender Name" + '</BR>' +
                '<BR>Appointing Authority:' + IFSTenderCommitte."Appointing Authority" + '</BR>';
                LoginDetails := 'Attached herein, please find an e-copy of Tender Evaluation Summary';


                ProcNote := '<BR> If you require any assistance, please contact our Procurement team by Phone ' + HRSetup."Phone No." + ' or vendor support team via Email: ' + PPayableSetup."Default Proc Email Contact";

                EvaluationRegister.Reset;
                EvaluationRegister.SetRange(Code, evaluationHeaader.Code);
                if EvaluationRegister.FindSet then
                    FileDirectory := 'C:\DOCS\';
                FileName := 'BidEvaluation_' + evaluationHeaader.Code + '.pdf';
                // //Report.SaveAsPdf(70041, FileDirectory + FileName, EvaluationRegister);
                if EvaluationRegister."Evaluation Type" = evaluationHeaader."evaluation type"::"Financial Evaluation" then
                    // //Report.SaveAsPdf(70042, FileDirectory + FileName, EvaluationRegister);

                    if CustEmail = '' then
                        exit;

                //MESSAGE:='This is to notify you that there has been a request for Registration ' +  SupplierRequest."No." + ' From Supplier'+ SupplierRequest.Name;
                emailhdr := 'Tender/Procurement Evaluation Summary (Reference No: ' + evaluationHeaader.Code + ')';

                // //cu400.CreateMessage(CompInfo.Name, SenderAddress, CustEmail, emailhdr,
                // //CompanyDetails + '<BR></BR>' + SenderMessage + SupplierDetails + LoginDetails + ActivationDetails, true);

                // //cu400.AddCC(RequesterEmail);

                // //cu400.AddBodyline(ProcNote);

                // //cu400.AddAttachment(FileDirectory + FileName, FileName);
                // //cu400.Send;
                SendingDate := Today;
                SendingTime := Time;

                IFSCommitteMembers."Notified on Email" := true;
                IFSCommitteMembers."Date/Time Notified" := CurrentDatetime;
                IFSCommitteMembers.Modify(true);


                Sleep(1000);
                Window.Close;

            until IFSCommitteMembers.Next = 0;
        end;
    end;


    procedure SuggestFinanceEvaluationCriteria(EvaluationHeader: Record "Bid Evaluation Register")
    var
        Bidevaluationscore: Record "Bid Evaluation Score Entry";
        BidSCoreGuide: Record "Bid Score Requirement";
        LineNo: Integer;
        BidScore: Record "Bid Score Guide";
        BidEvaluationCriteria: Record "Bid Evaluation Criteria Group";
        EvaluationCriteria: Record "Bid Score Criteria Group";
        BidEvalScore: Record "Bid Evaluation Score Guide";
        BidRegister: Record "Bid Evaluation Register";
        FinEvaluationLine: Record "Finance Evaluation Line";
        Bids: Record "Purchase Header";
        RankingNo: Integer;
        FinEvalLine: Record "Finance Evaluation Line";
        FinEvalnHeader: Record "Bid Evaluation Register";
        FinEvalLine1: Record "Finance Evaluation Line";
    begin

        EvaluationHeader.TestField("Bid Scoring Document No.");

        FinEvaluationLine.Reset;
        FinEvaluationLine.SetRange("Document ID", EvaluationHeader.Code);
        if FinEvaluationLine.FindSet then begin
            FinEvaluationLine.DeleteAll;
        end;

        //add finance evaluation line
        BidRegister.Reset;
        BidRegister.SetRange("IFS Code", EvaluationHeader."IFS Code");
        BidRegister.SetRange("Evaluation Type", BidRegister."evaluation type"::"Technical Evaluation");
        BidRegister.SetRange("Technical Evaluation  Decision", BidRegister."technical evaluation  decision"::Pass);
        BidRegister.SetRange("Last Evaluation Version No.", EvaluationHeader."Last Evaluation Version No.");
        // RankingNo:=0;
        // RankingNo2:=0;
        if BidRegister.FindSet then begin
            repeat
                FinEvaluationLine.Init;
                FinEvaluationLine."Document ID" := EvaluationHeader.Code;
                FinEvaluationLine."Document Type" := FinEvaluationLine."document type"::Quote;
                FinEvaluationLine."No." := BidRegister."Bid No.";
                FinEvaluationLine."Bidder Name" := BidRegister."Bidder Name";
                FinEvaluationLine."Bidder No" := BidRegister."Vendor No.";
                FinEvaluationLine."Invitation For Supply No" := BidRegister."IFS Code";
                Bids.Reset;
                Bids.SetRange("No.", BidRegister."Bid No.");
                //insert on ascending order
                // Bids.SETCURRENTKEY("Amount Including VAT");
                // Bids.SETASCENDING("Amount Including VAT",TRUE);
                if Bids.FindSet then begin
                    FinEvaluationLine."Bid Currency Code" := Bids."Currency Code";
                    FinEvaluationLine."Read-out Bid Price (A)" := Bids."Amount Including VAT";
                    //FinEvaluationLine."Weighted Tech Score %":=BidRegister."Weighted Technical Eval Score";
                end;
                //if same value maintain the ranking no.
                // FinanceEvaluationLine1.RESET;
                // FinanceEvaluationLine1.SETRANGE("Document ID",EvaluationHeader.Code);
                // IF FinanceEvaluationLine1.FINDLAST THEN BEGIN
                //  IF FinanceEvaluationLine1."Read-out Bid Price (A)"=FinEvaluationLine."Read-out Bid Price (A)" THEN
                //     FinEvaluationLine."Financial Evaluation Ranking":=FinanceEvaluationLine1."Financial Evaluation Ranking"
                // ELSE
                //    FinEvaluationLine."Financial Evaluation Ranking":=FORMAT(RankingNo+1);
                // END ELSE
                // FinEvaluationLine."Financial Evaluation Ranking":=FORMAT(RankingNo+1);

                //Technical evaluation ranking..................................................
                // Bids.SETCURRENTKEY("Weighted Tech Score %");
                // Bids.SETASCENDING("Weighted Tech Score %",TRUE);
                // FinEvaluationLine."Weighted Tech Score %":=Bids."Weighted Tech Score %";
                //  //MESSAGE('%1',Bids."Weighted Tech Score %");
                // FinanceEvaluationLine1.RESET;
                // FinanceEvaluationLine1.SETRANGE("Document ID",EvaluationHeader.Code);
                // IF FinanceEvaluationLine1.FINDLAST THEN BEGIN
                //  IF FinanceEvaluationLine1."Weighted Tech Score %"=FinEvaluationLine."Weighted Tech Score %" THEN
                //     FinEvaluationLine."Tech Evaluation Ranking":=FinanceEvaluationLine1."Tech Evaluation Ranking"
                // ELSE
                //    FinEvaluationLine."Tech Evaluation Ranking":=FORMAT(RankingNo2+1);
                // END ELSE
                // FinEvaluationLine."Tech Evaluation Ranking":=FORMAT(RankingNo2+1);
                //FinEvaluationLine."Bid Currency Code":=BidRegister
                BidRegister.CalcFields(BidRegister."Weighted Technical Eval Score");
                FinEvaluationLine."Preliminary Evaluation Date" := BidRegister."Evaluation Date";
                FinEvaluationLine."Responsive Bid" := true;
                FinEvaluationLine."Technical Evaluation Date" := BidRegister."Evaluation Date";
                FinEvaluationLine."Weighted Tech Score %" := BidRegister."Weighted Technical Eval Score";
                Bids.CalcFields(Bids."Amount Including VAT");
                FinEvaluationLine."Final Evaluated Bid Price" := Bids."Amount Including VAT";
                FinEvaluationLine."Read-out Bid Price (A)" := Bids."Amount Including VAT";
                FinEvaluationLine."Passed Tech Evaluation" := true;
                FinEvaluationLine."Tech Evaluation Ranking" := BidRegister."Tech Evaluation Ranking";
                FinEvaluationLine."Financial Evaluation Date" := Today;
                if not FinEvaluationLine.Insert(true) then
                    FinEvaluationLine.Modify(true);
            // RankingNo:=RankingNo+1;
            // RankingNo2:=RankingNo2+1;
            until BidRegister.Next = 0;
        end;



        Bidevaluationscore.Reset;
        if Bidevaluationscore.FindLast then
            LineNo := Bidevaluationscore."Line No";

        Bidevaluationscore.Reset;
        Bidevaluationscore.SetRange("Bid Scoring Document No.", EvaluationHeader."Bid Scoring Document No.");
        Bidevaluationscore.SetRange(Code, EvaluationHeader.Code);
        if Bidevaluationscore.FindSet then begin
            Bidevaluationscore.DeleteAll;

        end;

        BidEvaluationCriteria.Reset;
        BidEvaluationCriteria.SetRange("Template ID", EvaluationHeader."Bid Scoring Document No.");
        BidEvaluationCriteria.SetRange("Document No", EvaluationHeader.Code);
        if BidEvaluationCriteria.FindSet then begin
            BidEvaluationCriteria.DeleteAll;
        end;

        BidEvalScore.Reset;
        BidEvalScore.SetRange("Template ID", EvaluationHeader."Bid Scoring Document No.");
        BidEvalScore.SetRange("Document No", EvaluationHeader.Code);
        if BidEvalScore.FindSet then begin
            BidEvalScore.DeleteAll;
        end;


        BidSCoreGuide.Reset;
        BidSCoreGuide.SetRange("Template ID", EvaluationHeader."Bid Scoring Document No.");
        BidSCoreGuide.SetRange("Evaluation Type", EvaluationHeader."Evaluation Type");
        if BidSCoreGuide.FindSet() then begin
            repeat
                Bidevaluationscore.Init;
                Bidevaluationscore.Code := EvaluationHeader.Code;
                Bidevaluationscore."Line No" := LineNo + 1;
                Bidevaluationscore."Bid No." := EvaluationHeader."Bid No.";
                Bidevaluationscore."Vendor No." := EvaluationHeader."Vendor No.";
                Bidevaluationscore."Criteria Group" := BidSCoreGuide."Criteria Group ID";
                Bidevaluationscore."Requirement ID" := BidSCoreGuide."Requirement ID";
                Bidevaluationscore."Evaluation Requirement" := BidSCoreGuide."Evaluation Requirement";
                Bidevaluationscore."Rating Type" := BidSCoreGuide."Rating Type";
                Bidevaluationscore."Target Qty" := BidSCoreGuide."Target Qty";
                Bidevaluationscore."Target Value/KPI" := BidSCoreGuide."Target Value";
                Bidevaluationscore."Unit of Measure" := BidSCoreGuide."Unit of Measure";
                //Bidevaluationscore."Response Value":=Bid
                //Bidevaluationscore."Bid Response Actual Qty":=BidSCoreGuide.
                //Bidevaluationscore."Score %":=
                Bidevaluationscore."Assigned Weight %" := BidSCoreGuide."Assigned Weight %";
                //Bidevaluationscore."Weighted Line Score":=BidSCoreGuide.
                Bidevaluationscore."Equipment Type" := BidSCoreGuide."Equipment Type";
                Bidevaluationscore."Desired Perfomance Direction" := BidSCoreGuide."Desired Perfomance Direction";
                Bidevaluationscore."Bid Scoring Document No." := EvaluationHeader."Bid Scoring Document No.";
                Bidevaluationscore.Insert(true);
                LineNo += 1;
            until BidSCoreGuide.Next = 0;
        end;

        //add bid evaluation criteria
        EvaluationCriteria.Reset;
        EvaluationCriteria.SetRange("Template ID", EvaluationHeader."Bid Scoring Document No.");
        EvaluationCriteria.SetRange("Evaluation Type", EvaluationHeader."Evaluation Type");
        if EvaluationCriteria.FindSet then begin
            repeat
                BidEvaluationCriteria.Init;
                BidEvaluationCriteria."Template ID" := EvaluationCriteria."Template ID";
                BidEvaluationCriteria."Criteria Group ID" := EvaluationCriteria."Criteria Group ID";
                BidEvaluationCriteria."Document No" := EvaluationHeader.Code;
                BidEvaluationCriteria."Evaluation Type" := EvaluationCriteria."Evaluation Type";
                BidEvaluationCriteria.Description := EvaluationCriteria.Description;
                BidEvaluationCriteria."Total Weight %" := EvaluationCriteria."Total Weight %";
                BidEvaluationCriteria.Insert(true);
            until EvaluationCriteria.Next = 0;
        end;

        //add Bid Evaluation Score Guide
        BidScore.Reset;
        BidScore.SetRange("Template ID", EvaluationHeader."Bid Scoring Document No.");
        BidScore.SetRange("Evaluation Type", EvaluationHeader."Evaluation Type");
        if BidScore.FindSet then begin
            repeat
                BidEvalScore.Init;
                BidEvalScore."Template ID" := BidScore."Template ID";
                BidEvalScore."Criteria Group ID" := BidScore."Criteria Group ID";
                BidEvalScore."Requirement ID" := BidScore."Requirement ID";
                BidEvalScore."Entry No" := BidScore."Entry No";
                BidEvalScore."Response Value" := BidScore."Response Value";
                BidEvalScore."Document No" := EvaluationHeader.Code;
                BidEvalScore."Target Qty" := BidScore."Target Qty";
                BidEvalScore."Rating Type" := BidScore."Rating Type";
                BidEvalScore."Evaluation Type" := BidScore."Evaluation Type";
                BidEvalScore."Desired Perfomance Direction" := BidScore."Desired Perfomance Direction";
                BidEvalScore."Min Bid Value" := BidScore."Min Bid Value";
                BidEvalScore."Max Bid Value" := BidScore."Max Bid Value";
                BidEvalScore."Min Date Value" := BidScore."Min Date Value";
                BidEvalScore."Max Date Value" := BidScore."Max Date Value";
                BidEvalScore."Score %" := BidScore."Score %";
                BidEvalScore.Insert(true);
            until BidScore.Next = 0;
        end;
        //Financial Rankng
        FinEvalnHeader.Reset;
        FinEvalnHeader.SetRange(Code, EvaluationHeader.Code);
        if FinEvalnHeader.FindFirst() then begin
            RankingNo := 0;
            FinEvalLine.Reset;
            FinEvalLine.SetRange("Document ID", FinEvalnHeader.Code);
            //BidOpeningRegisterLine1.SETFILTER(Rank,'=%1',0);
            FinEvalLine.SetCurrentkey("Final Evaluated Bid Price");
            FinEvalLine.SetAscending("Final Evaluated Bid Price", true);
            if FinEvalLine.FindSet then begin
                repeat
                    //BidOpeningRegisterLine1.Rank:=RankingNo+1;
                    FinEvalLine1.Reset;
                    FinEvalLine1.SetRange("Document ID", FinEvalnHeader.Code);
                    FinEvalLine1.SetFilter("Finacial Auto-Ranking", '<>%1', 0);
                    FinEvalLine1.SetRange("Final Evaluated Bid Price", FinEvalLine."Final Evaluated Bid Price");
                    if FinEvalLine1.FindFirst then begin
                        FinEvalLine."Finacial Auto-Ranking" := FinEvalLine."Finacial Auto-Ranking";
                        FinEvalLine.Modify(true);
                        RankingNo := FinEvalLine1."Finacial Auto-Ranking";
                    end else begin
                        RankingNo := RankingNo + 1;
                        FinEvalLine."Finacial Auto-Ranking" := RankingNo + 1;
                        FinEvalLine.Modify(true);
                    end;
                until FinEvalLine.Next = 0;

            end;

        end;
        //end of financial Ranking
    end;


    procedure PosTechnicalEvaluation(EvaluationHeader: Record "Bid Evaluation Register")
    var
        Bidevaluationscore: Record "Bid Evaluation Score Entry";
        BidSCoreGuide: Record "Bid Score Requirement";
        LineNo: Integer;
        IFSDetails: Record "Standard Vendor Purchase Code";
        ProcuremnetSetup: Record "Procurement Setup";
        IFS: Record "Standard Purchase Code";
        Bids: Record "Purchase Header";
        FinanceLine: Record "Finance Evaluation Line";
    begin
        // if not ConfirmManagement.ConfirmProcess(Text001, true) then
        //     exit;
        EvaluationHeader.TestField("IFS Code");
        EvaluationHeader.TestField("Bid No.");
        EvaluationHeader.TestField("Evaluation Date");
        EvaluationHeader.TestField("Evaluation Lead");
        EvaluationHeader.TestField("Technical Evaluation  Decision");
        // EvaluationHeader.TESTFIELD("Weighted Technical Eval Score");



        EvaluationHeader.CalcFields(EvaluationHeader."Weighted Technical Eval Score");

        Bids.Reset;
        Bids.SetRange("No.", EvaluationHeader."Bid No.");
        Bids.SetRange("IFS Code", EvaluationHeader."IFS Code");
        if Bids.FindSet then begin
            Bids."Tech Evaluation Ranking" := EvaluationHeader."Tech Evaluation Ranking";
            Bids."Technical Evaluation Date" := EvaluationHeader."Evaluation Date";
            if EvaluationHeader."Technical Evaluation  Decision" = EvaluationHeader."technical evaluation  decision"::Pass then
                Bids."Passed Tech Evaluation" := true;
            Bids."Weighted Tech Score %" := EvaluationHeader."Weighted Technical Eval Score";
            Bids."Responsive Bid (Evaluation)" := true;
            Bids.Modify(true);
        end;

        IFSDetails.Reset;
        IFSDetails.SetRange(Code, EvaluationHeader."IFS Code");
        IFSDetails.SetRange("Vendor No.", EvaluationHeader."Vendor No.");
        if IFSDetails.FindSet then begin
            IFSDetails."Technical Evaluation Reg" := EvaluationHeader.Code;
            IFSDetails."Technical Evaluation Date" := EvaluationHeader."Created Date";
            IFSDetails."Technical Evaluation  Outcome" := Format(EvaluationHeader."Technical Evaluation  Decision");
            IFSDetails."Evaluation Committee Rem" := EvaluationHeader."Tender Evaluation Comm Remarks";
            IFSDetails."Technical Evaluation Committee" := EvaluationHeader."Appointed Bid Evaluation Commi";
            EvaluationHeader.CalcFields("Weighted Technical Eval Score");
            IFSDetails."Weighted Technical  Score %" := EvaluationHeader."Weighted Technical Eval Score";
            // IF IFSDetails."Technical Evaluation  Outcome"=IFSDetails."Technical Evaluation  Outcome"::
            if EvaluationHeader."Technical Evaluation  Decision" = EvaluationHeader."technical evaluation  decision"::Pass then begin
                IFSDetails."Passed Tech Evaluation" := true;
                IFSDetails."Responsive Bid" := true;
            end;
            Message('Submitted Successfuly');
            ProcurementSetup.Get;
            IFSDetails.Modify(true);
        end else begin

            IFSDetails.Init;
            IFSDetails."Vendor No." := EvaluationHeader."Vendor No.";
            IFSDetails.Code := EvaluationHeader."IFS Code";
            IFS.Reset;
            IFS.SetRange(Code, EvaluationHeader."IFS Code");
            if IFS.FindSet then begin
                IFSDetails.Description := IFS."Tender Name";
                IFSDetails."IFS Code" := IFS.Code;
            end;

            IFSDetails."Bid No." := EvaluationHeader."Bid No.";
            IFSDetails."Vendor Name" := EvaluationHeader."Bidder Name";
            IFSDetails."Preliminary Evaluation Reg" := EvaluationHeader.Code;
            IFSDetails."Preliminary Evaluation Date" := EvaluationHeader."Created Date";
            IFSDetails."Preliminary Evaluation Outcome" := Format(EvaluationHeader."Preliminary Evaluation Score");
            IFSDetails."Preminary Evaluation Committee" := EvaluationHeader."Tender Evaluation Comm Remarks";
            IFSDetails."Technical Evaluation Reg" := EvaluationHeader.Code;
            IFSDetails."Technical Evaluation Date" := EvaluationHeader."Created Date";
            IFSDetails."Technical Evaluation  Outcome" := Format(EvaluationHeader."Technical Evaluation  Decision");
            IFSDetails."Evaluation Committee Rem" := EvaluationHeader."Tender Evaluation Comm Remarks";
            IFSDetails."Technical Evaluation Committee" := EvaluationHeader."Appointed Bid Evaluation Commi";
            EvaluationHeader.CalcFields("Weighted Technical Eval Score");
            IFSDetails."Weighted Technical  Score %" := EvaluationHeader."Weighted Technical Eval Score";
            if EvaluationHeader."Technical Evaluation  Decision" = EvaluationHeader."technical evaluation  decision"::Pass then begin
                IFSDetails."Passed Tech Evaluation" := true;
            end;
            IFSDetails.Insert(true);
        end;
        ProcuremnetSetup.Get;
        if ProcuremnetSetup."Notify Committe Members" = true then
            FnSendBidEvaluationNotification(EvaluationHeader);

        IFS.Reset;
        IFS.SetRange(Code, EvaluationHeader."IFS Code");
        if IFS.FindSet then begin
            IFS."Document Status" := IFS."document status"::Evaluation;
            IFS.Modify(true);
        end;
        EvaluationHeader.Posted := true;
        EvaluationHeader."Posted By" := UserId;
        EvaluationHeader."Posted Date" := Today;
        EvaluationHeader.Modify(true);
    end;


    procedure PosFinanceEvaluation(EvaluationHeader: Record "Bid Evaluation Register")
    var
        Bidevaluationscore: Record "Bid Evaluation Score Entry";
        BidSCoreGuide: Record "Bid Score Requirement";
        LineNo: Integer;
        IFSDetails: Record "Standard Vendor Purchase Code";
        ProcuremnetSetup: Record "Procurement Setup";
        IFS: Record "Standard Purchase Code";
        Bids: Record "Purchase Header";
        FinanceLine: Record "Finance Evaluation Line";
        FinalEvalReport: Record "Bid Tabulation Header";
        FinalEvalLine: Record "Bid Tabulation Line";
        BidEvaluationRegister: Record "Bid Evaluation Register";
    begin
        // if not ConfirmManagement.ConfirmProcess(Text001, true) then
        //     exit;
        EvaluationHeader.TestField("IFS Code");
        EvaluationHeader.TestField("Tender Evaluation Comm Remarks");
        EvaluationHeader.TestField("Evaluation Date");
        EvaluationHeader.TestField("Evaluation Lead");
        //EvaluationHeader.TESTFIELD("Weighted Financial Eval Score");
        //EvaluationHeader.TESTFIELD("Award Decision");


        EvaluationHeader.Posted := true;
        EvaluationHeader."Posted By" := UserId;
        EvaluationHeader."Posted Date" := Today;

        FinanceLine.Reset;
        FinanceLine.SetRange("Document ID", EvaluationHeader.Code);
        if FinanceLine.FindSet then begin
            repeat
                Bids.Reset;
                Bids.SetRange("No.", FinanceLine."No.");
                Bids.SetRange("IFS Code", EvaluationHeader."IFS Code");
                if Bids.FindSet then begin
                    Bids."Final Evaluated Bid Price" := FinanceLine."Final Evaluated Bid Price";
                    Bids."Financial Evaluation Date" := EvaluationHeader."Evaluation Date";
                    Bids."Financial Evaluation Ranking" := FinanceLine."Financial Evaluation Ranking";
                    Bids."Aggregate Ranking" := FinanceLine."Aggregate Ranking";
                    Bids."Aggregate Weighted Score %" := FinanceLine."Aggregate Weighted Score %";
                    Bids."Weighted Financial Score %" := FinanceLine."Weighted Financial Score %";
                    Bids."Weighted Tech Score %" := FinanceLine."Weighted Tech Score %";
                    Bids."Read-out Bid Price (A)" := FinanceLine."Read-out Bid Price (A)";
                    Bids."Arithmetic Corrections (B)" := FinanceLine."Arithmetic Corrections (B)";
                    Bids."Corrected Bid Price (C=A+B)" := FinanceLine."Corrected Bid Price";
                    //Bids."Unconditional Discount % (D)":=
                    //Bids."Unconditional Disc Amount (E)":=
                    Bids."Corrected & Disc Bid Price" := FinanceLine."Corrected Bid Price";
                    ////Bids."Any Additional Adjustments (G)":=
                    //Bids."Any Priced Deviations (H))":=
                    //IF EvaluationHeader."Technical Evaluation  Decision"=EvaluationHeader."Technical Evaluation  Decision"::Pass THEN
                    Bids."Final Tender Outcome" := FinanceLine."Final Tender Outcome";
                    Bids."Document Status" := Bids."document status"::Evaluation;
                    //Bids."Weighted Tech Score %":=EvaluationHeader."Weighted Technical Eval Score";
                    Bids.Modify;

                    IFSDetails.Reset;
                    IFSDetails.SetRange(Code, EvaluationHeader."IFS Code");
                    IFSDetails.SetRange("Vendor No.", Bids."Buy-from Vendor No.");
                    if IFSDetails.FindSet then begin
                        IFSDetails."Bid Opening Finance Register" := EvaluationHeader."Finance Opening Register No.";
                        IFSDetails."Bid Opening Date (Financial)" := EvaluationHeader."Finance Opening Date";
                        IFSDetails."Financial Eval Register No" := EvaluationHeader."Bid Scoring Document No.";
                        IFSDetails."Financial Evaluation Date" := EvaluationHeader."Evaluation Date";
                        IFSDetails."Read-out Bid Price (A)" := FinanceLine."Read-out Bid Price (A)";
                        IFSDetails."Arithmetic Corrections (B)" := FinanceLine."Arithmetic Corrections (B)";
                        IFSDetails."Corrected Bid Price (C=A+B)" := FinanceLine."Corrected Bid Price";
                        IFSDetails."Unconditional Discount % (D)" := FinanceLine."Unconditional Discount % (D)";
                        IFSDetails."Unconditional Disc Amount (E)" := FinanceLine."Unconditional Disc Amount (E)";
                        IFSDetails."Corrected & Disc Bid Price" := FinanceLine."Corrected & Disc Bid Price";
                        IFSDetails."Any Additional Adjustments (G)" := FinanceLine."Any Additional Adjustments (G)";
                        IFSDetails."Any Priced Deviations (H))" := FinanceLine."Any Priced Deviations (H))";
                        IFSDetails."Final Evaluated Bid Price" := FinanceLine."Final Evaluated Bid Price";
                        IFSDetails."Weighted Financial Score %" := FinanceLine."Weighted Financial Score %";
                        IFSDetails."Weighted Technical  Score %" := FinanceLine."Weighted Tech Score %";
                        IFSDetails."Evaluation Committee Rem" := FinanceLine."Evaluation Committee Remarks";
                        IFSDetails."Evaluation Committee Recomm" := FinanceLine."Evaluation Committee Recomm";
                        IFSDetails."Financial Evaluation Comm Rem" := FinanceLine."Evaluation Committee Remarks";
                        IFSDetails."Aggregate Weighted Score %" := FinanceLine."Aggregate Weighted Score %";
                        IFSDetails."Financial Evaluation Ranking" := Format(FinanceLine."Finacial Auto-Ranking");
                        IFSDetails.Modify(true);
                    end else begin

                        IFSDetails.Init;
                        IFSDetails."Vendor No." := FinanceLine."Bidder No";
                        IFSDetails.Code := EvaluationHeader."IFS Code";
                        IFS.Reset;
                        IFS.SetRange(Code, EvaluationHeader."IFS Code");
                        if IFS.FindSet then begin
                            IFSDetails.Description := IFS."Tender Name";
                            IFSDetails."IFS Code" := IFS.Code;
                        end;

                        IFSDetails."Bid No." := FinanceLine."No.";
                        IFSDetails."Vendor Name" := FinanceLine."Bidder Name";
                        //eIFSDetails."Primary Email":=Bids.
                        //IFSDetails."Invitation Email Sent":=
                        IFSDetails."Bid Opening Finance Register" := EvaluationHeader."Finance Opening Register No.";
                        IFSDetails."Bid Opening Date (Financial)" := EvaluationHeader."Finance Opening Date";
                        IFSDetails."Financial Eval Register No" := EvaluationHeader."Bid Scoring Document No.";
                        IFSDetails."Financial Evaluation Date" := EvaluationHeader."Evaluation Date";
                        IFSDetails."Read-out Bid Price (A)" := FinanceLine."Read-out Bid Price (A)";
                        IFSDetails."Arithmetic Corrections (B)" := FinanceLine."Arithmetic Corrections (B)";
                        IFSDetails."Corrected Bid Price (C=A+B)" := FinanceLine."Corrected Bid Price";
                        IFSDetails."Unconditional Discount % (D)" := FinanceLine."Unconditional Discount % (D)";
                        IFSDetails."Unconditional Disc Amount (E)" := FinanceLine."Unconditional Disc Amount (E)";
                        IFSDetails."Corrected & Disc Bid Price" := FinanceLine."Corrected & Disc Bid Price";
                        IFSDetails."Any Additional Adjustments (G)" := FinanceLine."Any Additional Adjustments (G)";
                        IFSDetails."Any Priced Deviations (H))" := FinanceLine."Any Priced Deviations (H))";
                        IFSDetails."Final Evaluated Bid Price" := FinanceLine."Final Evaluated Bid Price";
                        IFSDetails."Weighted Financial Score %" := FinanceLine."Weighted Financial Score %";
                        IFSDetails."Weighted Technical  Score %" := FinanceLine."Weighted Tech Score %";
                        IFSDetails."Evaluation Committee Rem" := FinanceLine."Evaluation Committee Remarks";
                        IFSDetails."Evaluation Committee Recomm" := FinanceLine."Evaluation Committee Recomm";
                        IFSDetails."Financial Evaluation Comm Rem" := FinanceLine."Evaluation Committee Remarks";
                        IFSDetails."Aggregate Weighted Score %" := FinanceLine."Aggregate Weighted Score %";
                        IFSDetails."Financial Evaluation Ranking" := Format(FinanceLine."Finacial Auto-Ranking");
                        IFSDetails.Insert(true);
                    end;
                end;
            until FinanceLine.Next = 0;
        end;




        /*ProcuremnetSetup.GET;
        IF ProcuremnetSetup."Notify Committe Members"=TRUE THEN
        FnSendBidEvaluationNotification(EvaluationHeader);*/

        IFS.Reset;
        IFS.SetRange(Code, EvaluationHeader."IFS Code");
        if IFS.FindSet then begin
            IFS."Document Status" := IFS."document status"::Evaluation;
            IFS.Modify;
        end;

        //Generate Final Evaluation Report
        FinalEvalReport.Reset;
        FinalEvalReport.SetRange("IFS Code", EvaluationHeader."IFS Code");
        if not FinalEvalReport.FindSet then begin
            FinalEvalReport.Init;
            FinalEvalReport."Document Type" := FinalEvalReport."document type"::"Evaluation Report";
            FinalEvalReport."IFS Code" := EvaluationHeader."IFS Code";
            FinalEvalReport."Document Date" := EvaluationHeader."Evaluation Date";
            FinalEvalReport."Financial Evaluation ID" := EvaluationHeader.Code;
            FinalEvalReport.Description := 'Final Tender evaluation Report' + EvaluationHeader."IFS Code";
            IFS.Reset;
            IFS.SetRange(Code, EvaluationHeader."IFS Code");
            if IFS.FindSet then begin
                FinalEvalReport."Tender Name" := IFS."Tender Name";
            end;
            FinalEvalReport."Raised By" := EvaluationHeader."Evaluation Lead";
            FinalEvalReport.Name := EvaluationHeader."Evaluation Lead Name";
            FinalEvalReport."Tender Committee Role" := FinalEvalReport."tender committee role"::Chairperson;
            FinalEvalReport."Bid Opening Date" := EvaluationHeader."Bid Opening Date";
            FinalEvalReport."Evaluation Completion Date" := EvaluationHeader."Evaluation Date";
            FinalEvalReport."Appointed Bid Opening Comm" := IFS."Bid Opening Committe";
            FinalEvalReport."Appointed Bid Evaluation Com" := EvaluationHeader."Appointed Bid Evaluation Commi";
            FinalEvalReport."Primary Region" := EvaluationHeader."Primary Region";
            FinalEvalReport."Bid Opening Register(Tech)" := EvaluationHeader."Bid Opening Register No.";
            FinalEvalReport."Process Type" := FinalEvalReport."process type"::IFS;
            FinalEvalReport."Bid Opening Register(Finance)" := EvaluationHeader."Finance Opening Register No.";
            if FinalEvalReport.Insert(true) then begin
                FinalEvalReport.Validate(FinalEvalReport."Appointed Bid Opening Comm");
                FinalEvalReport.Validate(FinalEvalReport."Appointed Bid Evaluation Com");

                FinanceLine.Reset;
                FinanceLine.SetRange("Document ID", EvaluationHeader.Code);
                if FinanceLine.FindSet then begin
                    repeat
                        FinalEvalLine.Init;
                        FinalEvalLine."Tabulation ID" := FinalEvalReport.Code;
                        FinalEvalLine."Tabulation Type" := FinalEvalLine."tabulation type"::"Evaluation Report";
                        FinalEvalLine."Document Type" := FinalEvalLine."document type"::Quote;
                        FinalEvalLine."No." := FinanceLine."No.";
                        FinalEvalLine."Bidder Name" := FinanceLine."Bidder Name";
                        FinalEvalLine."Bidder No" := FinanceLine."Bidder No";
                        FinalEvalLine."Invitation For Supply No" := FinanceLine."Invitation For Supply No";
                        FinalEvalLine."Bid Currency Code" := FinanceLine."Bid Currency Code";
                        // FinalEvalLine.ReFinanceLine."Read-out Bid Price (A)"
                        FinalEvalLine."Preliminary Evaluation Date" := FinanceLine."Preliminary Evaluation Date";
                        FinalEvalLine."Responsive Bid" := FinanceLine."Responsive Bid";
                        FinalEvalLine."Technical Evaluation Date" := FinanceLine."Technical Evaluation Date";
                        FinalEvalLine."Weighted Tech Score %" := FinanceLine."Weighted Tech Score %";
                        FinalEvalLine."Passed Tech Evaluation" := FinanceLine."Passed Tech Evaluation";
                        FinalEvalLine."Tech Evaluation Ranking" := FinanceLine."Tech Evaluation Ranking";
                        //FinalEvalLine.  IFSDetails."Bid Opening Finance Register"
                        //FinalEvalLine."Bid Opening Date":=FinanceLine.ope
                        //FinalEvalLine.finaIFSDetails."Financial Eval Register No"
                        FinalEvalLine."Financial Evaluation Date" := FinanceLine."Financial Evaluation Date";
                        FinalEvalLine."Read-out Bid Price (A)" := FinanceLine."Read-out Bid Price (A)";
                        FinalEvalLine."Arithmetic Corrections (B)" := FinanceLine."Arithmetic Corrections (B)";
                        FinalEvalLine."Corrected Bid Price (C=A+B)" := FinanceLine."Corrected Bid Price";
                        FinalEvalLine."Unconditional Discount % (D)" := FinanceLine."Unconditional Discount % (D)";
                        FinalEvalLine."Unconditional Disc Amount (E)" := FinanceLine."Unconditional Disc Amount (E)";
                        FinalEvalLine."Corrected & Disc Bid Price" := FinanceLine."Corrected & Disc Bid Price";
                        FinalEvalLine."Any Additional Adjustments (G)" := FinanceLine."Any Additional Adjustments (G)";
                        FinalEvalLine."Any Priced Deviations (H))" := FinanceLine."Any Priced Deviations (H))";
                        FinalEvalLine."Final Evaluated Bid Price" := FinanceLine."Final Evaluated Bid Price";
                        FinalEvalLine."Weighted Financial Score %" := FinanceLine."Weighted Financial Score %";
                        FinalEvalLine."Weighted Tech Score %" := FinanceLine."Weighted Tech Score %";
                        FinalEvalLine."Evaluation Committee Recomm" := FinanceLine."Evaluation Committee Recomm";
                        FinalEvalLine."Financial Evaluation Comm Rem" := FinanceLine."Evaluation Committee Remarks";
                        FinalEvalLine."Aggregate Weighted Score %" := FinanceLine."Aggregate Weighted Score %";
                        IFSDetails.Reset;
                        IFSDetails.SetRange(Code, EvaluationHeader."IFS Code");
                        IFSDetails.SetRange("Vendor No.", Bids."Buy-from Vendor No.");
                        if IFSDetails.FindSet then begin
                            FinalEvalLine."Pre-bid Register No." := IFSDetails."Prebid Register No.";
                            FinalEvalLine."Prebid Conference Date" := IFSDetails."Prebid Meeting Date";
                            FinalEvalLine."Bid Opening Date" := IFSDetails."Bid Opening Date (Technical)";
                            FinalEvalLine."Bid Opening Committee Remarks" := IFSDetails."Bid Opening Committee Remarks";
                            FinalEvalLine."Bid Opening Date (Financial)" := IFSDetails."Bid Opening Date (Financial)";
                            FinalEvalLine."Bid Opening Finance Register" := IFSDetails."Bid Opening Finance Register";
                            FinalEvalLine."Bid Opening Register No." := IFSDetails."Bid Opening Register No.";
                            FinalEvalLine."Bid Opening Result" := IFSDetails."Bid Opening Result";
                            FinalEvalLine."Preliminary Evaluation Date" := IFSDetails."Preliminary Evaluation Date";
                            FinalEvalLine."Preliminary Evaluation Outcome" := IFSDetails."Preliminary Evaluation Outcome";
                            FinalEvalLine."Preliminary Evaluation Reg" := IFSDetails."Preliminary Evaluation Reg";
                            FinalEvalLine."Preminary Evaluation Committee" := IFSDetails."Preminary Evaluation Committee";
                            //FinalEvalLine."Tech Evaluation Ranking":=IFSDetails.;
                            FinalEvalLine."Technical Evaluation Date" := IFSDetails."Technical Evaluation Date";
                        end;


                        FinalEvalLine.Insert(true);
                    until FinanceLine.Next = 0;

                end;
                //ELSE BEGIN
                //added for other Bids that failed in Technical and Preliminary
                BidEvaluationRegister.Reset;
                BidEvaluationRegister.SetRange("IFS Code", EvaluationHeader."IFS Code");
                if BidEvaluationRegister.FindSet then begin
                    repeat
                        if BidEvaluationRegister."Preliminary Evaluation Score" = BidEvaluationRegister."preliminary evaluation score"::"Non-Responsive" then
                            BidEvaluationRegister.SetRange("Preliminary Evaluation Score", BidEvaluationRegister."preliminary evaluation score"::"Non-Responsive")
                        else
                            BidEvaluationRegister.SetRange("Technical Evaluation  Decision", BidEvaluationRegister."technical evaluation  decision"::Fail);
                        FinalEvalLine.Init;
                        FinalEvalLine."Tabulation ID" := FinalEvalReport.Code;
                        FinalEvalLine."Tabulation Type" := FinalEvalLine."tabulation type"::"Evaluation Report";
                        FinalEvalLine."Document Type" := FinalEvalLine."document type"::Quote;
                        FinalEvalLine."No." := BidEvaluationRegister."Bid No.";
                        FinalEvalLine."Bidder Name" := BidEvaluationRegister."Bidder Name";
                        FinalEvalLine."Bidder No" := BidEvaluationRegister."Vendor No.";
                        FinalEvalLine."Invitation For Supply No" := BidEvaluationRegister."IFS Code";
                        //FinalEvalLine."Bid Currency Code":=BidEvaluationRegister.bi;
                        // FinalEvalLine.ReFinanceLine."Read-out Bid Price (A)"
                        FinalEvalLine."Preliminary Evaluation Date" := BidEvaluationRegister."Evaluation Date";
                        FinalEvalLine."Responsive Bid" := false;
                        FinalEvalLine."Technical Evaluation Date" := BidEvaluationRegister."Evaluation Date";
                        FinalEvalLine."Weighted Tech Score %" := BidEvaluationRegister."Weighted Technical Eval Score";
                        FinalEvalLine."Passed Tech Evaluation" := false;
                        FinalEvalLine."Tech Evaluation Ranking" := BidEvaluationRegister."Tech Evaluation Ranking";
                        //FinalEvalLine.  IFSDetails."Bid Opening Finance Register"
                        //FinalEvalLine."Bid Opening Date":=FinanceLine.ope
                        //FinalEvalLine.finaIFSDetails."Financial Eval Register No"
                        FinalEvalLine."Financial Evaluation Date" := 0D;
                        Bids.Reset;
                        Bids.SetRange("No.", BidEvaluationRegister."Bid No.");
                        if Bids.FindSet then begin
                            FinalEvalLine."Read-out Bid Price (A)" := Bids."Read-out Bid Price (A)";
                            FinalEvalLine."Arithmetic Corrections (B)" := Bids."Arithmetic Corrections (B)";
                            FinalEvalLine."Corrected Bid Price (C=A+B)" := Bids."Corrected Bid Price (C=A+B)";
                            FinalEvalLine."Unconditional Discount % (D)" := Bids."Unconditional Discount % (D)";
                            FinalEvalLine."Unconditional Disc Amount (E)" := Bids."Unconditional Disc Amount (E)";
                            FinalEvalLine."Corrected & Disc Bid Price" := Bids."Corrected & Disc Bid Price";
                            FinalEvalLine."Any Additional Adjustments (G)" := Bids."Any Additional Adjustments (G)";
                            FinalEvalLine."Any Priced Deviations (H))" := Bids."Any Priced Deviations (H))";
                            FinalEvalLine."Final Evaluated Bid Price" := Bids."Final Evaluated Bid Price";
                            FinalEvalLine."Weighted Financial Score %" := Bids."Weighted Financial Score %";
                            FinalEvalLine."Weighted Tech Score %" := Bids."Weighted Tech Score %";
                            //FinalEvalLine."Evaluation Committee Recomm":=Bids.com;
                            //FinalEvalLine."Financial Evaluation Comm Rem":=BidEvaluationRegister."Evaluation Committee Remarks";
                            FinalEvalLine."Aggregate Weighted Score %" := Bids."Aggregate Weighted Score %";
                        end;
                        IFSDetails.Reset;
                        IFSDetails.SetRange(Code, BidEvaluationRegister."IFS Code");
                        IFSDetails.SetRange("Vendor No.", BidEvaluationRegister."Vendor No.");
                        if IFSDetails.FindSet then begin
                            FinalEvalLine."Pre-bid Register No." := IFSDetails."Prebid Register No.";
                            FinalEvalLine."Prebid Conference Date" := IFSDetails."Prebid Meeting Date";
                            FinalEvalLine."Bid Opening Date" := IFSDetails."Bid Opening Date (Technical)";
                            FinalEvalLine."Bid Opening Committee Remarks" := IFSDetails."Bid Opening Committee Remarks";
                            FinalEvalLine."Bid Opening Date (Financial)" := IFSDetails."Bid Opening Date (Financial)";
                            FinalEvalLine."Bid Opening Finance Register" := IFSDetails."Bid Opening Finance Register";
                            FinalEvalLine."Bid Opening Register No." := IFSDetails."Bid Opening Register No.";
                            FinalEvalLine."Bid Opening Result" := IFSDetails."Bid Opening Result";
                            FinalEvalLine."Preliminary Evaluation Date" := IFSDetails."Preliminary Evaluation Date";
                            FinalEvalLine."Preliminary Evaluation Outcome" := IFSDetails."Preliminary Evaluation Outcome";
                            FinalEvalLine."Preliminary Evaluation Reg" := IFSDetails."Preliminary Evaluation Reg";
                            FinalEvalLine."Preminary Evaluation Committee" := IFSDetails."Preminary Evaluation Committee";
                            //FinalEvalLine."Tech Evaluation Ranking":=IFSDetails.;
                            FinalEvalLine."Technical Evaluation Date" := IFSDetails."Technical Evaluation Date";
                        end;
                    until BidEvaluationRegister.Next = 0;
                end;
                // END;
            end;
            Message('Finance Evaluation Completed, Proceed to Evaluation Report');
            Page.Run(75275, FinalEvalReport)
        end;

    end;


    procedure FnSendFinBidEvaluationNotification(evaluationHeaader: Record "Bid Evaluation Register")
    var
        SupplierReq: Record Contact;
        LastFieldNo: Integer;
        FooterPrinted: Boolean;
        FileDirectory: Text[100];
        FileName: Text[100];
        ReportID: Integer;
        // //"Object": Record "Object";
        Window: Dialog;
        RunOnceFile: Text[1000];
        TimeOut: Integer;
        Customer2: Record Customer;
        Cust: Record Customer;
        cr: Integer;
        lf: Integer;
        EmailBody: array[2] of Text[30];
        BodyText: Text[250];
        mymail: Codeunit Mail;
        DefaultPrinter: Text[200];
        WindowisOpen: Boolean;
        FileDialog: Codeunit Mail;
        SendingDate: Date;
        SendingTime: Time;
        Counter: Integer;
        cu400: Codeunit Mail;
        DocLog: Record "Document E-mail Log";
        BranchName: Code[80];
        DimValue: Record "Dimension Value";
        SenderAddress: Text[100];
        CustEmail: Text[100];
        UserSetup: Record "User Setup";
        HRSetup: Record "Company Information";
        Emp: Record Vendor;
        PayrollMonth: Date;
        PayrollMonthText: Text[30];
        PayPeriodtext: Text;
        PayPeriod: Record "Payroll PeriodX";
        CompInfo: Record "Company Information";
        DateFilter: Text;
        FromDate: Date;
        ToDate: Date;
        FromDateS: Text;
        ToDateS: Text;
        vend: Record Vendor;
        StartDate: Date;
        EndDAte: Date;
        EmailVerifier: Codeunit Payroll3;
        IsEmailValid: Boolean;
        PPayableSetup: Record "Procurement Setup";
        RequesterName: Text[100];
        RequesterEmail: Text[100];
        emailhdr: Text[100];
        CompanyDetails: Text[250];
        SupplierDetails: Text[1000];
        SenderMessage: Text[1000];
        ProcNote: Text[1000];
        LoginDetails: Text[1000];
        PortalUser: Record "Dynasoft Portal User";
        Password: Text[50];
        ActivationDetails: Text[1000];
        IFSCommitteMembers: Record "Bid Evaluation Committee";
        IFSTenderCommitte: Record "IFS Tender Committee";
        EvaluationRegister: Record "Bid Evaluation Register";
    begin
        ///Notifying Procurement Team on supplier Request


        CompInfo.Get;
        HRSetup.Get;
        PPayableSetup.Get;


        IFSCommitteMembers.Reset;
        IFSCommitteMembers.SetRange("Document No.", evaluationHeaader.Code);
        if IFSCommitteMembers.FindSet then begin
            repeat
                IFSCommitteMembers.TestField(Email);
                RequesterEmail := IFSCommitteMembers.Email;
                RequesterName := IFSCommitteMembers."Member Name";
                Window.Open('Notifying the Sender...');
                WindowisOpen := true;

                IFSTenderCommitte.Reset;
                IFSTenderCommitte.SetRange("Document No.", evaluationHeaader."Appointed Bid Evaluation Commi");
                if IFSTenderCommitte.FindSet then
                    Counter := Counter + 1;

                //Create message
                if HRSetup."E-Mail" = '' then
                    Error('Please Contact the IT Admin to specify the E-mail address under Company Information Setup page!!');
                SenderAddress := HRSetup."E-Mail";

                if PPayableSetup."Default Proc Email Contact" = '' then
                    Error('Please Contact the IT Admin to specify the Procurement Manager E-mail address under Purchases&Payable Setup page!!');
                CustEmail := PPayableSetup."Default Proc Email Contact";

                CompanyDetails := 'Dear,  ' + RequesterName;
                SenderMessage := '<BR>Please find attached summary of the Evaluation No:' + evaluationHeaader.Code + '</BR>';
                SupplierDetails := '<BR>Appointment Reference No:' + IFSCommitteMembers."Appointed Bid Opening Com" + '</BR>' + '<BR> Committee Type:' + IFSTenderCommitte."Committee Type" + '</BR>' +
                '<BR>Membership Role:' + Format(IFSCommitteMembers."Role Type") + '</BR>' +
                '<BR>Appointment Effective Date:' + Format(IFSTenderCommitte."Appointment Effective Date") + '</BR>' +
                '<BR>Invitation For Supply No:' + IFSCommitteMembers."IFS Code" + '</BR>' +
                '<BR>Tender Name:' + IFSTenderCommitte."Tender Name" + '</BR>' +
                '<BR>Appointing Authority:' + IFSTenderCommitte."Appointing Authority" + '</BR>';
                LoginDetails := 'Attached herein, please find an e-copy of Tender Evaluation Summary';


                ProcNote := '<BR> If you require any assistance, please contact our Procurement team by Phone ' + HRSetup."Phone No." + ' or vendor support team via Email: ' + PPayableSetup."Default Proc Email Contact";

                EvaluationRegister.Reset;
                EvaluationRegister.SetRange(Code, evaluationHeaader.Code);
                if EvaluationRegister.FindSet then
                    FileDirectory := 'C:\DOCS\';
                FileName := 'BidEvaluation_' + evaluationHeaader.Code + '.pdf';
                // //Report.SaveAsPdf(70042, FileDirectory + FileName, EvaluationRegister);

                if CustEmail = '' then
                    exit;

                //MESSAGE:='This is to notify you that there has been a request for Registration ' +  SupplierRequest."No." + ' From Supplier'+ SupplierRequest.Name;
                emailhdr := 'Tender/Procurement Evaluation Summary (Reference No: ' + evaluationHeaader.Code + ')';

                // //cu400.CreateMessage(CompInfo.Name, SenderAddress, CustEmail, emailhdr,
                // //CompanyDetails + '<BR></BR>' + SenderMessage + SupplierDetails + LoginDetails + ActivationDetails, true);

                // //cu400.AddCC(RequesterEmail);

                // //cu400.AddBodyline(ProcNote);

                // //cu400.AddAttachment(FileDirectory + FileName, FileName);
                // //cu400.Send;
                SendingDate := Today;
                SendingTime := Time;

                IFSCommitteMembers."Notified on Email" := true;
                IFSCommitteMembers."Date/Time Notified" := CurrentDatetime;
                IFSCommitteMembers.Modify(true);


                Sleep(1000);
                Window.Close;

            until IFSCommitteMembers.Next = 0;
        end;
    end;


    procedure SuggestFinalEvalReport(FinalEvalReport: Record "Bid Tabulation Header")
    var
        Bidevaluationscore: Record "Bid Evaluation Score Entry";
        BidSCoreGuide: Record "Bid Score Requirement";
        LineNo: Integer;
        IFSDetails: Record "Standard Vendor Purchase Code";
        ProcuremnetSetup: Record "Procurement Setup";
        IFS: Record "Standard Purchase Code";
        Bids: Record "Purchase Header";
        FinanceLine: Record "Finance Evaluation Line";
        FinalEvalLine: Record "Bid Tabulation Line";
        EvaluationHeader: Record "Bid Evaluation Register";
    begin


        //Generate Final Evaluation Report
        EvaluationHeader.Reset;
        EvaluationHeader.SetRange(Code, FinalEvalReport."Financial Evaluation ID");
        if EvaluationHeader.FindSet then begin
            //FinalEvalReport.INIT;
            FinalEvalReport."Document Type" := FinalEvalReport."document type"::"Evaluation Report";
            FinalEvalReport."IFS Code" := EvaluationHeader."IFS Code";
            FinalEvalReport."Document Date" := EvaluationHeader."Evaluation Date";
            FinalEvalReport.Description := 'Final Tender evaluation Report' + EvaluationHeader."IFS Code";
            IFS.Reset;
            IFS.SetRange(Code, EvaluationHeader."IFS Code");
            if IFS.FindSet then begin
                FinalEvalReport."Tender Name" := IFS."Tender Name";
            end;
            FinalEvalReport."Raised By" := EvaluationHeader."Evaluation Lead";
            FinalEvalReport.Name := EvaluationHeader."Evaluation Lead Name";
            FinalEvalReport."Tender Committee Role" := FinalEvalReport."tender committee role"::Chairperson;
            FinalEvalReport."Bid Opening Date" := EvaluationHeader."Bid Opening Date";
            FinalEvalReport."Evaluation Completion Date" := EvaluationHeader."Evaluation Date";
            FinalEvalReport.Validate(FinalEvalReport."Appointed Bid Opening Comm", EvaluationHeader."Bid Opening Register No.");
            FinalEvalReport.Validate(FinalEvalReport."Appointed Bid Evaluation Com", EvaluationHeader."Bid Scoring Document No.");
            FinalEvalReport."Primary Region" := EvaluationHeader."Primary Region";
            if FinalEvalReport.Modify(true) then begin
                FinanceLine.Reset;
                FinanceLine.SetRange("Document ID", EvaluationHeader.Code);
                if FinanceLine.FindSet then begin
                    repeat
                        FinalEvalLine.Init;
                        FinalEvalLine."Tabulation ID" := FinalEvalReport.Code;
                        FinalEvalLine."Tabulation Type" := FinalEvalLine."tabulation type"::"Evaluation Report";
                        FinalEvalLine."Document Type" := FinalEvalLine."document type"::Quote;
                        FinalEvalLine."No." := FinanceLine."No.";
                        FinalEvalLine."Bidder Name" := FinanceLine."Bidder Name";
                        FinalEvalLine."Bidder No" := FinanceLine."Bidder No";
                        FinalEvalLine."Invitation For Supply No" := FinanceLine."Invitation For Supply No";
                        FinalEvalLine."Bid Currency Code" := FinanceLine."Bid Currency Code";
                        // FinalEvalLine.ReFinanceLine."Read-out Bid Price (A)"
                        FinalEvalLine."Preliminary Evaluation Date" := FinanceLine."Preliminary Evaluation Date";
                        FinalEvalLine."Responsive Bid" := FinanceLine."Responsive Bid";
                        FinalEvalLine."Technical Evaluation Date" := FinanceLine."Technical Evaluation Date";
                        FinalEvalLine."Weighted Tech Score %" := FinanceLine."Weighted Tech Score %";
                        FinalEvalLine."Passed Tech Evaluation" := FinanceLine."Passed Tech Evaluation";
                        FinalEvalLine."Tech Evaluation Ranking" := FinanceLine."Tech Evaluation Ranking";
                        //FinalEvalLine.  IFSDetails."Bid Opening Finance Register"
                        //FinalEvalLine."Bid Opening Date":=FinanceLine.ope
                        //FinalEvalLine.finaIFSDetails."Financial Eval Register No"
                        FinalEvalLine."Financial Evaluation Date" := FinanceLine."Financial Evaluation Date";
                        FinalEvalLine."Read-out Bid Price (A)" := FinanceLine."Read-out Bid Price (A)";
                        FinalEvalLine."Arithmetic Corrections (B)" := FinanceLine."Arithmetic Corrections (B)";
                        FinalEvalLine."Corrected Bid Price (C=A+B)" := FinanceLine."Corrected Bid Price";
                        FinalEvalLine."Unconditional Discount % (D)" := FinanceLine."Unconditional Discount % (D)";
                        FinalEvalLine."Unconditional Disc Amount (E)" := FinanceLine."Unconditional Disc Amount (E)";
                        FinalEvalLine."Corrected & Disc Bid Price" := FinanceLine."Corrected & Disc Bid Price";
                        FinalEvalLine."Any Additional Adjustments (G)" := FinanceLine."Any Additional Adjustments (G)";
                        FinalEvalLine."Any Priced Deviations (H))" := FinanceLine."Any Priced Deviations (H))";
                        FinalEvalLine."Final Evaluated Bid Price" := FinanceLine."Final Evaluated Bid Price";
                        FinalEvalLine."Weighted Financial Score %" := FinanceLine."Weighted Financial Score %";
                        FinalEvalLine."Weighted Tech Score %" := FinanceLine."Weighted Tech Score %";
                        FinalEvalLine."Evaluation Committee Recomm" := FinanceLine."Evaluation Committee Recomm";
                        FinalEvalLine."Financial Evaluation Comm Rem" := FinanceLine."Evaluation Committee Remarks";
                        FinalEvalLine."Aggregate Weighted Score %" := FinanceLine."Aggregate Weighted Score %";
                        IFSDetails.Reset;
                        IFSDetails.SetRange(Code, EvaluationHeader."IFS Code");
                        IFSDetails.SetRange("Vendor No.", Bids."Buy-from Vendor No.");
                        if IFSDetails.FindSet then begin
                            FinalEvalLine."Pre-bid Register No." := IFSDetails."Prebid Register No.";
                            FinalEvalLine."Prebid Conference Date" := IFSDetails."Prebid Meeting Date";
                            FinalEvalLine."Bid Opening Date" := IFSDetails."Bid Opening Date (Technical)";
                            FinalEvalLine."Bid Opening Committee Remarks" := IFSDetails."Bid Opening Committee Remarks";
                            FinalEvalLine."Bid Opening Date (Financial)" := IFSDetails."Bid Opening Date (Financial)";
                            FinalEvalLine."Bid Opening Finance Register" := IFSDetails."Bid Opening Finance Register";
                            FinalEvalLine."Bid Opening Register No." := IFSDetails."Bid Opening Register No.";
                            FinalEvalLine."Bid Opening Result" := IFSDetails."Bid Opening Result";
                            FinalEvalLine."Preliminary Evaluation Date" := IFSDetails."Preliminary Evaluation Date";
                            FinalEvalLine."Preliminary Evaluation Outcome" := IFSDetails."Preliminary Evaluation Outcome";
                            FinalEvalLine."Preliminary Evaluation Reg" := IFSDetails."Preliminary Evaluation Reg";
                            FinalEvalLine."Preminary Evaluation Committee" := IFSDetails."Preminary Evaluation Committee";
                            //FinalEvalLine."Tech Evaluation Ranking":=IFSDetails.;
                            FinalEvalLine."Technical Evaluation Date" := IFSDetails."Technical Evaluation Date";
                        end;


                        FinalEvalLine.Insert(true);
                    until FinanceLine.Next = 0;

                end;
            end;
            //PAGE.RUN(75274,FinalEvalReport)
        end;
    end;


    procedure PostIFPEvaluationReport(FinalEvalReport: Record "Bid Tabulation Header")
    var
        Bidevaluationscore: Record "Bid Evaluation Score Entry";
        BidSCoreGuide: Record "Bid Score Requirement";
        LineNo: Integer;
        IFSDetails: Record "Standard Vendor Purchase Code";
        ProcuremnetSetup: Record "Procurement Setup";
        IFS: Record "Standard Purchase Code";
        Bids: Record "Purchase Header";
        FinanceLine: Record "Bid Tabulation Line";
        FinalEvalLine: Record "Bid Tabulation Line";
        FinalEvalReport1: Record "Bid Tabulation Header";
        IFPResponseLine: Record "IFP Response Line";
    begin

        FinalEvalReport.TestField("General Procurement Remarks");
        // if not ConfirmManagement.ConfirmProcess(Text001, true) then
        //     exit;


        //FinalEvalReport."Document Status":=FinalEvalReport."Document Status"::

        // FinalEvalLine.RESET;
        // FinalEvalLine.SETRANGE("Tabulation ID",FinalEvalReport.Code);
        // IF FinalEvalLine.FINDSET THEN BEGIN
        //  REPEAT
        //
        // Bids.RESET;
        // Bids.SETRANGE("No.",FinalEvalLine."No.");
        // Bids.SETRANGE("IFS Code",FinalEvalReport."IFS Code");
        // IF Bids.FINDSET THEN BEGIN
        //
        //  Bids."Final Evaluation Report":=FinalEvalReport.Code;
        //  Bids."Final Evaluation Report Date":=FinalEvalReport."Document Date";
        //  Bids.MODIFY(TRUE);
        //
        //    IFSDetails.RESET;
        //    IFSDetails.SETRANGE(Code,FinalEvalReport."IFS Code");
        //    IFSDetails.SETRANGE("Vendor No.",FinalEvalLine."Bidder No");
        //    IFSDetails.SETRANGE("Bid No.",FinalEvalLine."No.");
        //    IF IFSDetails.FINDSET THEN BEGIN
        //    IFSDetails."Final Evaluation Report":=FinalEvalReport.Code;
        //    IFSDetails."Final Evaluation Date":=FinalEvalReport."Document Date";;
        //      IFSDetails.MODIFY(TRUE);
        //    END;
        //  END;
        // UNTIL FinalEvalLine.NEXT=0;
        // END;




        ProcuremnetSetup.Get;
        if ProcuremnetSetup."Notify Committe Members" = true then
            FnSendBidTabulationNotification(FinalEvalReport);

        //Generate PP
        FinalEvalReport1.Reset;
        FinalEvalReport1.SetRange("IFS Code", FinalEvalReport."IFS Code");
        FinalEvalReport1.SetRange("Document Type", FinalEvalReport."document type"::"Professional Opinion");
        if not FinalEvalReport1.FindSet then begin
            FinalEvalReport1.Init;
            FinalEvalReport1."Document Type" := FinalEvalReport."document type"::"Professional Opinion";
            FinalEvalReport1."Process Type" := FinalEvalReport."Process Type";
            FinalEvalReport1."IFP Code" := FinalEvalReport."IFP Code";
            FinalEvalReport1."Prequalification Category" := FinalEvalReport."Prequalification Category";
            FinalEvalReport1."Category Name" := FinalEvalReport."Category Name";
            FinalEvalReport1."IFS Code" := FinalEvalReport."IFS Code";
            FinalEvalReport1."Document Date" := FinalEvalReport."Document Date";
            FinalEvalReport1."Final Evaluation Report ID" := FinalEvalReport.Code;
            FinalEvalReport1.Description := 'Proffesion Opinion';
            FinalEvalReport1."Tender Name" := FinalEvalReport."Tender Name";
            FinalEvalReport1."Raised By" := FinalEvalReport."Raised By";
            FinalEvalReport1.Name := FinalEvalReport.Name;
            FinalEvalReport1."Bid Opening Register(Tech)" := FinalEvalReport."Bid Opening Register(Tech)";
            FinalEvalReport1."Bid Opening Register(Finance)" := FinalEvalReport."Bid Opening Register(Finance)";
            FinalEvalReport1."Tender Committee Role" := FinalEvalReport."tender committee role"::Chairperson;
            FinalEvalReport1."Bid Opening Date" := FinalEvalReport."Bid Opening Date";
            FinalEvalReport1."Evaluation Completion Date" := FinalEvalReport."Evaluation Completion Date";

            FinalEvalReport1."Primary Region" := FinalEvalReport."Primary Region";
            IFS.Reset;
            IFS.SetRange(Code, FinalEvalReport."IFS Code");
            if IFS.FindSet then begin
                FinalEvalReport1."Annual Procurement Plan ID" := IFS."Procurement Plan ID";
                //FinalEvalReport1."Procurement Plan Date":=IFS.
                FinalEvalReport1."Financial Year Code" := IFS."Financial Year Code";
                FinalEvalReport1."Procurement Plan Line No." := IFS."Procurement Plan Line No.";
                FinalEvalReport1."Procurement Plan Entry No" := IFS."Procurement Plan Entry No";
                FinalEvalReport1."Available Procurement Budget" := IFS."Available Procurement Budget";
                FinalEvalReport1."Budget Narration" := IFS."Budget Narration";
                FinalEvalReport1."Procurement Method" := Format(IFS."Procurement Method");
            end;
            if FinalEvalReport1.Insert(true) then begin
                FinalEvalReport1.Validate(FinalEvalReport1."Appointed Bid Opening Comm", FinalEvalReport."Appointed Bid Opening Comm");
                FinalEvalReport1.Validate(FinalEvalReport1."Appointed Bid Evaluation Com", FinalEvalReport."Appointed Bid Evaluation Com");
                FinalEvalReport1.Modify(true);

            end;
            // PAGE.RUN(75337,FinalEvalReport1);
        end;
        IFPResponseLine.Reset;
        IFPResponseLine.SetRange("RFI Document No.", FinalEvalReport."IFP Code");
        if IFPResponseLine.FindSet then begin
            repeat
                IFPResponseLine."Response Stage" := IFPResponseLine."response stage"::"Evaluation Report Stage";
                IFPResponseLine."Evaluation Report No" := FinalEvalReport.Code;
                IFPResponseLine.Modify(true);
            until IFPResponseLine.Next = 0;
        end;
        FinalEvalReport.Posted := true;
        FinalEvalReport."Posted By" := UserId;
        FinalEvalReport."Posted Date" := Today;
        FinalEvalReport.Modify(true);
        //PAGE.RUN(75337,FinalEvalReport1);
        Message('professional opinion no %1 has been created', FinalEvalReport1.Code);
    end;

    procedure PostFinalEvaluationReport1(FinalEvalReport: Record "Standard Purchase Code")

    var

        Bidevaluationscore: Record "Bid Evaluation Score Entry";

        BidSCoreGuide: Record "Bid Score Requirement";

        LineNo: Integer;

        IFSDetails: Record "Standard Vendor Purchase Code";

        ProcuremnetSetup: Record "Procurement Setup";

        IFS: Record "Standard Purchase Code";

        Bids: Record "Purchase Header";

        FinanceLine: Record "Bid Tabulation Line";

        FinalEvalLine: Record "Bid Tabulation Line";

        FinalEvalReport1: Record "Bid Tabulation Header";

        IFPResponseLine: Record "IFP Response Line";

    begin

        FinalEvalReport.Posted := true;

        FinalEvalReport."Posted By" := UserId;

        IFS.Reset;

        IFS.SetRange(Code, FinalEvalReport.Code);

        if IFS.FindSet then begin

            IFS."Document Status" := IFS."document status"::Evaluation;

            IFS.Modify;

        end;

        FinalEvalReport1.Init;

        FinalEvalReport1."Document Type" := FinalEvalReport1."Document Type"::"Professional Opinion";

        FinalEvalReport1."IFS Code" := FinalEvalReport.Code;

        FinalEvalReport1."Document Date" := FinalEvalReport."Document Date";

        FinalEvalReport1."Final Evaluation Report ID" := FinalEvalReport.Code;

        FinalEvalReport1.Description := 'Proffesion Opinion: ' + FinalEvalReport.Code;

        FinalEvalReport1."Awarded Bid No" := FinalEvalReport."Awarded Quote No";

        FinalEvalReport1."Awarded Bidder No." := FinalEvalReport."Awarded Bidder No";

        FinalEvalReport1."Awarded Bidder Name" := FinalEvalReport."Awarded Bidder Name";

        FinalEvalReport1."Award Tender Sum Inc Taxes" := FinalEvalReport."Awarded Bid Amount";

        FinalEvalReport1."Tender Name" := FinalEvalReport."Tender Name";

        FinalEvalReport1."Raised By" := FinalEvalReport."Created by";

        FinalEvalReport1.Name := FinalEvalReport.Name;

        FinalEvalReport1."Bid Opening Date" := FinalEvalReport."Document Date";

        FinalEvalReport1."Process Type" := FinalEvalReport1."process type"::IFS;

        IFS.Reset;

        IFS.SetRange(Code, FinalEvalReport.code);

        if IFS.FindSet then begin

            FinalEvalReport1."Annual Procurement Plan ID" := IFS."Procurement Plan ID";

            FinalEvalReport1."Financial Year Code" := IFS."Financial Year Code";

            FinalEvalReport1."Procurement Plan Line No." := IFS."Procurement Plan Line No.";

            FinalEvalReport1."Procurement Plan Entry No" := IFS."Procurement Plan Entry No";

            FinalEvalReport1."Available Procurement Budget" := IFS."PP Total Available Budget";

            FinalEvalReport1."Budget Narration" := IFS."Budget Narration";

            FinalEvalReport1."Procurement Method" := Format(IFS."Procurement Method");

        end;

        if FinalEvalReport1.Insert(true) then begin

            FinalEvalLine.Init;

            FinalEvalLine."Tabulation ID" := FinalEvalReport1.Code;

            FinalEvalLine."No." := FinalEvalReport."Awarded Quote No";

            FinalEvalLine."Bidder No" := FinalEvalReport."Awarded Bidder No";

            FinalEvalLine."Bidder Name" := FinalEvalReport."Awarded Bidder Name";

            FinalEvalLine."Final Evaluated Bid Price" := FinalEvalReport."Awarded Bid Amount";

            FinalEvalLine."Tabulation Type" := FinalEvalLine."tabulation type"::"Professional Opinion";

            FinalEvalLine."Document Type" := FinalEvalLine."document type"::Quote;

            FinalEvalLine.Insert(true);

        end;

        Message('professional opinion no %1 has been created', FinalEvalReport1.Code);

        Page.Run(75278, FinalEvalReport1)

    end;

    procedure PostFinalEvaluationReport(FinalEvalReport: Record "Bid Tabulation Header")
    var
        Bidevaluationscore: Record "Bid Evaluation Score Entry";
        BidSCoreGuide: Record "Bid Score Requirement";
        LineNo: Integer;
        IFSDetails: Record "Standard Vendor Purchase Code";
        ProcuremnetSetup: Record "Procurement Setup";
        IFS: Record "Standard Purchase Code";
        Bids: Record "Purchase Header";
        FinanceLine: Record "Bid Tabulation Line";
        FinalEvalLine: Record "Bid Tabulation Line";
        FinalEvalReport1: Record "Bid Tabulation Header";
        IFPResponseLine: Record "IFP Response Line";
        EvalReport: Record "Bid Tabulation Header";
        ConfirmMangement: Codeunit "Confirm Management";
    begin
        FinalEvalReport.TestField("General Procurement Remarks");
        EvalReport.Reset();
        EvalReport.SetRange("Financial Evaluation ID", FinalEvalReport."Code");
        EvalReport.SetRange("document type", EvalReport."document type"::"Professional Opinion");
        if EvalReport.FindFirst() then begin
            if ConfirmMangement.GetResponseOrDefault(StrSubstNo('Professional opinion %1 for Evaluation report %2 already exists. Do you want to open it?', EvalReport."Code", FinalEvalReport."Code"), true) then
                Page.Run(Page::"Proffesion Opinion Card",EvalReport);
            exit;
        end;

        FinalEvalReport.Posted := true;
        FinalEvalReport."Posted By" := UserId;
        FinalEvalReport."Posted Date" := Today;

        FinalEvalLine.Reset;
        FinalEvalLine.SetRange("Tabulation ID", FinalEvalReport.Code);
        if FinalEvalLine.FindSet then begin
            repeat
                //awarded winner Details
                if FinalEvalLine."Evaluation Committee Recomm" = FinalEvalLine."evaluation committee recomm"::Award then begin
                    FinalEvalReport."Awarded Bid No" := FinalEvalLine."No.";
                    FinalEvalReport."Awarded Bidder No." := FinalEvalLine."Bidder No";
                    FinalEvalReport."Awarded Bidder Name" := FinalEvalLine."Bidder Name";
                    FinalEvalReport."Award Tender Sum Inc Taxes" := FinalEvalLine."Final Evaluated Bid Price";


                end;

                Bids.Reset;
                Bids.SetRange("No.", FinalEvalLine."No.");
                Bids.SetRange("IFS Code", FinalEvalReport."IFS Code");
                if Bids.FindSet then begin

                    Bids."Final Evaluation Report" := FinalEvalReport.Code;
                    Bids."Final Evaluation Report Date" := FinalEvalReport."Document Date";
                    Bids.Modify(true);

                    IFSDetails.Reset;
                    IFSDetails.SetRange(Code, FinalEvalReport."IFS Code");
                    IFSDetails.SetRange("Vendor No.", FinalEvalLine."Bidder No");
                    IFSDetails.SetRange("Bid No.", FinalEvalLine."No.");
                    if IFSDetails.FindSet then begin
                        IFSDetails."Final Evaluation Report" := FinalEvalReport.Code;
                        IFSDetails."Final Evaluation Date" := FinalEvalReport."Document Date";
                        IFSDetails.Modify(true);
                    end;
                end;
            until FinalEvalLine.Next = 0;
        end;
        ProcuremnetSetup.Get;
        if ProcuremnetSetup."Notify Committe Members" = true then
            FnSendBidTabulationNotification(FinalEvalReport);

        IFS.Reset;
        IFS.SetRange(Code, FinalEvalReport."IFS Code");
        if IFS.Findfirst() then begin
            IFS."Document Status" := IFS."document status"::Evaluation;
            IFS.Modify;
        end;

        //Generate PP
        // FinalEvalReport1.RESET;
        // FinalEvalReport1.SETRANGE("IFS Code",FinalEvalReport."IFS Code");
        // FinalEvalReport1.SETRANGE("Document Type",FinalEvalReport."Document Type"::"Professional Opinion");
        // IF NOT FinalEvalReport1.FINDSET THEN BEGIN
        FinalEvalReport1.Init;
        FinalEvalReport1."Document Type" := FinalEvalReport."document type"::"Professional Opinion";
        FinalEvalReport1."IFS Code" := FinalEvalReport."IFS Code";
        FinalEvalReport1."Document Date" := FinalEvalReport."Document Date";
        //FinalEvalReport1."Final Evaluation Report ID" := FinalEvalReport.Code;
        FinalEvalReport1.Description := 'Proffesion Opinion: ' + FinalEvalReport."IFS Code";
        FinalEvalReport1."Tender Name" := FinalEvalReport."Tender Name";
        FinalEvalReport1."Raised By" := FinalEvalReport."Raised By";
        FinalEvalReport1.Name := FinalEvalReport.Name;
        FinalEvalReport1."Final Evaluation Report ID" := FinalEvalReport."Code";
        FinalEvalReport1."Bid Evaluation Criteria" := FinalEvalReport."Bid Evaluation Criteria";
        FinalEvalReport1."Tender Committee Role" := FinalEvalReport."tender committee role"::Chairperson;
        FinalEvalReport1."Bid Opening Date" := FinalEvalReport."Bid Opening Date";
        FinalEvalReport1."Evaluation Completion Date" := FinalEvalReport."Evaluation Completion Date";
        FinalEvalReport1."Process Type" := FinalEvalReport1."process type"::IFS;
        FinalEvalReport1.Validate(FinalEvalReport1."Appointed Bid Opening Comm", FinalEvalReport."Appointed Bid Opening Comm");
        FinalEvalReport1.Validate(FinalEvalReport1."Appointed Bid Evaluation Com", FinalEvalReport."Appointed Bid Evaluation Com");
        FinalEvalReport1."Primary Region" := FinalEvalReport."Primary Region";
        IFS.Reset;
        IFS.SetRange(Code, FinalEvalReport."IFS Code");
        if IFS.FindSet then begin
            FinalEvalReport1."Annual Procurement Plan ID" := IFS."Procurement Plan ID";
            //FinalEvalReport1."Procurement Plan Date":=IFS.
            FinalEvalReport1."Financial Year Code" := IFS."Financial Year Code";
            FinalEvalReport1."Procurement Plan Line No." := IFS."Procurement Plan Line No.";
            FinalEvalReport1."Procurement Plan Entry No" := IFS."Procurement Plan Entry No";
            FinalEvalReport1."Available Procurement Budget" := IFS."PP Total Available Budget";
            FinalEvalReport1."Budget Narration" := IFS."Budget Narration";
            FinalEvalReport1."Procurement Method" := Format(IFS."Procurement Method");
        end;
        if FinalEvalReport1.Insert(true) then begin
            FinanceLine.Reset;
            FinanceLine.SetRange("Tabulation ID", FinalEvalReport.Code);
            if FinanceLine.FindSet then begin
                repeat
                    FinalEvalLine.Init;
                    FinalEvalLine."Tabulation ID" := FinalEvalReport1.Code;
                    FinalEvalLine."Tabulation Type" := FinalEvalLine."tabulation type"::"Professional Opinion";
                    FinalEvalLine."Document Type" := FinalEvalLine."document type"::Quote;
                    FinalEvalLine."No." := FinanceLine."No.";
                    FinalEvalLine."Bidder Name" := FinanceLine."Bidder Name";
                    FinalEvalLine."Bidder No" := FinanceLine."Bidder No";
                    FinalEvalLine."Invitation For Supply No" := FinanceLine."Invitation For Supply No";
                    FinalEvalLine."Bid Currency Code" := FinanceLine."Bid Currency Code";
                    // FinalEvalLine.ReFinanceLine."Read-out Bid Price (A)"
                    FinalEvalLine."Preliminary Evaluation Date" := FinanceLine."Preliminary Evaluation Date";
                    FinalEvalLine."Responsive Bid" := FinanceLine."Responsive Bid";
                    FinalEvalLine."Technical Evaluation Date" := FinanceLine."Technical Evaluation Date";
                    FinalEvalLine."Weighted Tech Score %" := FinanceLine."Weighted Tech Score %";
                    FinalEvalLine."Passed Tech Evaluation" := FinanceLine."Passed Tech Evaluation";
                    FinalEvalLine."Tech Evaluation Ranking" := FinanceLine."Tech Evaluation Ranking";
                    FinalEvalLine."Final Evaluation Remarks" := FinanceLine."Final Evaluation Remarks";
                    //FinalEvalLine.  IFSDetails."Bid Opening Finance Register"
                    //FinalEvalLine."Bid Opening Date":=FinanceLine.ope
                    //FinalEvalLine.finaIFSDetails."Financial Eval Register No"
                    FinalEvalLine."Financial Evaluation Date" := FinanceLine."Financial Evaluation Date";
                    FinalEvalLine."Read-out Bid Price (A)" := FinanceLine."Read-out Bid Price (A)";
                    FinalEvalLine."Arithmetic Corrections (B)" := FinanceLine."Arithmetic Corrections (B)";
                    FinalEvalLine."Corrected Bid Price (C=A+B)" := FinanceLine."Corrected Bid Price (C=A+B)";
                    FinalEvalLine."Unconditional Discount % (D)" := FinanceLine."Unconditional Discount % (D)";
                    FinalEvalLine."Unconditional Disc Amount (E)" := FinanceLine."Unconditional Disc Amount (E)";
                    FinalEvalLine."Corrected & Disc Bid Price" := FinanceLine."Corrected & Disc Bid Price";
                    FinalEvalLine."Any Additional Adjustments (G)" := FinanceLine."Any Additional Adjustments (G)";
                    FinalEvalLine."Any Priced Deviations (H))" := FinanceLine."Any Priced Deviations (H))";
                    FinalEvalLine."Final Evaluated Bid Price" := FinanceLine."Final Evaluated Bid Price";
                    FinalEvalLine."Weighted Financial Score %" := FinanceLine."Weighted Financial Score %";
                    FinalEvalLine."Weighted Tech Score %" := FinanceLine."Weighted Tech Score %";
                    FinalEvalLine."Evaluation Committee Recomm" := FinanceLine."Evaluation Committee Recomm";
                    FinalEvalLine."Financial Evaluation Comm Rem" := FinanceLine."Financial Evaluation Comm Rem";
                    FinalEvalLine."Aggregate Weighted Score %" := FinanceLine."Aggregate Weighted Score %";
                    FinalEvalLine."Pre-bid Register No." := FinanceLine."Pre-bid Register No.";
                    FinalEvalLine."Prebid Conference Date" := FinanceLine."Prebid Conference Date";
                    FinalEvalLine."Bid Opening Date" := FinanceLine."Bid Opening Date";
                    FinalEvalLine."Bid Opening Committee Remarks" := FinanceLine."Bid Opening Committee Remarks";
                    FinalEvalLine."Bid Opening Date (Financial)" := FinanceLine."Bid Opening Date (Financial)";
                    FinalEvalLine."Bid Opening Finance Register" := FinanceLine."Bid Opening Finance Register";
                    FinalEvalLine."Bid Opening Register No." := FinanceLine."Bid Opening Register No.";
                    FinalEvalLine."Bid Opening Result" := FinanceLine."Bid Opening Result";
                    FinalEvalLine."Preliminary Evaluation Date" := FinanceLine."Preliminary Evaluation Date";
                    FinalEvalLine."Preliminary Evaluation Outcome" := FinanceLine."Preliminary Evaluation Outcome";
                    FinalEvalLine."Preliminary Evaluation Reg" := FinanceLine."Preliminary Evaluation Reg";
                    FinalEvalLine."Preminary Evaluation Committee" := FinanceLine."Preminary Evaluation Committee";
                    //FinalEvalLine."Tech Evaluation Ranking":=IFSDetails.;
                    FinalEvalLine."Technical Evaluation Date" := FinanceLine."Technical Evaluation Date";
                    if FinanceLine."Evaluation Committee Recomm" = FinanceLine."evaluation committee recomm"::Award then begin
                        FinalEvalReport1."Awarded Bid No" := FinanceLine."No.";
                        FinalEvalReport1."Awarded Bidder No." := FinanceLine."Bidder No";
                        FinalEvalReport1."Awarded Bidder Name" := FinanceLine."Bidder Name";
                        FinalEvalReport1."Award Tender Sum Inc Taxes" := FinanceLine."Final Evaluated Bid Price";
                        FinalEvalReport1.Modify;
                    end;


                    FinalEvalLine.Insert(true);
                until FinanceLine.Next = 0;

            end;
        end;
        Page.Run(75278, FinalEvalReport1);
        //  END ELSE
        //  PAGE.RUN(75278,FinalEvalReport1)
    end;


    procedure SuggestProffesionOpinion(FinalEvalReport1: Record "Bid Tabulation Header")
    var
        Bidevaluationscore: Record "Bid Evaluation Score Entry";
        BidSCoreGuide: Record "Bid Score Requirement";
        LineNo: Integer;
        IFSDetails: Record "Standard Vendor Purchase Code";
        ProcuremnetSetup: Record "Procurement Setup";
        IFS: Record "Standard Purchase Code";
        Bids: Record "Purchase Header";
        FinanceLine: Record "Bid Tabulation Line";
        FinalEvalLine: Record "Bid Tabulation Line";
        EvaluationHeader: Record "Bid Evaluation Register";
        FinalEvalReport: Record "Bid Tabulation Header";
    begin
        //Generate PP
        FinalEvalReport.Reset;
        FinalEvalReport.SetRange(Code, FinalEvalReport1."Final Evaluation Report ID");
        //FinalEvalReport1.SETRANGE("Document Type",FinalEvalReport."Document Type"::"Professional Opinion");
        if FinalEvalReport.FindSet then begin
            FinalEvalReport1.Init;

            FinalEvalReport1."Document Type" := FinalEvalReport."document type"::"Professional Opinion";
            FinalEvalReport1."IFS Code" := FinalEvalReport."IFS Code";
            FinalEvalReport1."IFP Code" := FinalEvalReport."IFP Code";
            FinalEvalReport1."Prequalification Category" := FinalEvalReport."Prequalification Category";
            FinalEvalReport1."Category Name" := FinalEvalReport."Category Name";
            FinalEvalReport1."Process Type" := FinalEvalReport."Process Type";
            FinalEvalReport1."Document Date" := FinalEvalReport."Document Date";
            FinalEvalReport1."Financial Evaluation ID" := FinalEvalReport.Code;
            FinalEvalReport1.Description := Format(FinalEvalReport1."Document Type") + ' ' + FinalEvalReport."IFS Code";
            FinalEvalReport1."Tender Name" := FinalEvalReport."Tender Name";
            FinalEvalReport1."Raised By" := FinalEvalReport."Raised By";
            FinalEvalReport1.Name := FinalEvalReport.Name;
            FinalEvalReport1."Document Date" := Today;
            FinalEvalReport1."Created By" := UserId;
            FinalEvalReport1."Procurement Officer License No" := FinalEvalReport."Procurement Officer License No";
            FinalEvalReport1."Created Date" := Today;
            FinalEvalReport1."Created Time" := Time;
            FinalEvalReport1."Tender Committee Role" := FinalEvalReport."tender committee role"::Chairperson;
            FinalEvalReport1."Bid Opening Date" := FinalEvalReport."Bid Opening Date";
            FinalEvalReport1."Evaluation Completion Date" := FinalEvalReport."Evaluation Completion Date";
            FinalEvalReport1.Validate(FinalEvalReport1."Appointed Bid Opening Comm", FinalEvalReport."Appointed Bid Opening Comm");
            FinalEvalReport1.Validate(FinalEvalReport1."Appointed Bid Evaluation Com", FinalEvalReport."Appointed Bid Evaluation Com");
            FinalEvalReport1."Primary Region" := FinalEvalReport."Primary Region";
            IFS.Reset;
            IFS.SetRange(Code, FinalEvalReport."IFS Code");
            if IFS.FindSet then begin
                FinalEvalReport1."Annual Procurement Plan ID" := IFS."Procurement Plan ID";
                //FinalEvalReport1."Procurement Plan Date":=IFS.
                FinalEvalReport1."Financial Year Code" := IFS."Financial Year Code";
                FinalEvalReport1."Procurement Plan Line No." := IFS."Procurement Plan Line No.";
                FinalEvalReport1."Procurement Plan Entry No" := IFS."Procurement Plan Entry No";
                FinalEvalReport1."Available Procurement Budget" := IFS."Available Procurement Budget";
                FinalEvalReport1."Budget Narration" := IFS."Budget Narration";
            end;
            if FinalEvalReport1.Modify(true) then begin
                FinanceLine.Reset;
                FinanceLine.SetRange("Tabulation ID", FinalEvalReport.Code);
                if FinanceLine.FindSet then begin
                    repeat
                        FinalEvalLine.Init;
                        FinalEvalLine."Tabulation ID" := FinalEvalReport1.Code;
                        FinalEvalLine."Tabulation Type" := FinalEvalLine."tabulation type"::"Professional Opinion";
                        FinalEvalLine."Document Type" := FinalEvalLine."document type"::Quote;
                        FinalEvalLine."No." := FinanceLine."No.";
                        FinalEvalLine."Bidder Name" := FinanceLine."Bidder Name";
                        FinalEvalLine."Bidder No" := FinanceLine."Bidder No";
                        FinalEvalLine."Invitation For Supply No" := FinanceLine."Invitation For Supply No";
                        FinalEvalLine."Bid Currency Code" := FinanceLine."Bid Currency Code";
                        // FinalEvalLine.ReFinanceLine."Read-out Bid Price (A)"
                        FinalEvalLine."Preliminary Evaluation Date" := FinanceLine."Preliminary Evaluation Date";
                        FinalEvalLine."Responsive Bid" := FinanceLine."Responsive Bid";
                        FinalEvalLine."Technical Evaluation Date" := FinanceLine."Technical Evaluation Date";
                        FinalEvalLine."Weighted Tech Score %" := FinanceLine."Weighted Tech Score %";
                        FinalEvalLine."Passed Tech Evaluation" := FinanceLine."Passed Tech Evaluation";
                        FinalEvalLine."Tech Evaluation Ranking" := FinanceLine."Tech Evaluation Ranking";
                        //FinalEvalLine.  IFSDetails."Bid Opening Finance Register"
                        //FinalEvalLine."Bid Opening Date":=FinanceLine.ope
                        //FinalEvalLine.finaIFSDetails."Financial Eval Register No"
                        FinalEvalLine."Financial Evaluation Date" := FinanceLine."Financial Evaluation Date";
                        FinalEvalLine."Read-out Bid Price (A)" := FinanceLine."Read-out Bid Price (A)";
                        FinalEvalLine."Arithmetic Corrections (B)" := FinanceLine."Arithmetic Corrections (B)";
                        FinalEvalLine."Corrected Bid Price (C=A+B)" := FinanceLine."Corrected Bid Price (C=A+B)";
                        FinalEvalLine."Unconditional Discount % (D)" := FinanceLine."Unconditional Discount % (D)";
                        FinalEvalLine."Unconditional Disc Amount (E)" := FinanceLine."Unconditional Disc Amount (E)";
                        FinalEvalLine."Corrected & Disc Bid Price" := FinanceLine."Corrected & Disc Bid Price";
                        FinalEvalLine."Any Additional Adjustments (G)" := FinanceLine."Any Additional Adjustments (G)";
                        FinalEvalLine."Any Priced Deviations (H))" := FinanceLine."Any Priced Deviations (H))";
                        FinalEvalLine."Final Evaluated Bid Price" := FinanceLine."Final Evaluated Bid Price";
                        FinalEvalLine."Weighted Financial Score %" := FinanceLine."Weighted Financial Score %";
                        FinalEvalLine."Weighted Tech Score %" := FinanceLine."Weighted Tech Score %";
                        FinalEvalLine."Evaluation Committee Recomm" := FinanceLine."Evaluation Committee Recomm";
                        FinalEvalLine."Financial Evaluation Comm Rem" := FinanceLine."Financial Evaluation Comm Rem";
                        FinalEvalLine."Aggregate Weighted Score %" := FinanceLine."Aggregate Weighted Score %";
                        FinalEvalLine."Pre-bid Register No." := FinanceLine."Pre-bid Register No.";
                        FinalEvalLine."Prebid Conference Date" := FinanceLine."Prebid Conference Date";
                        FinalEvalLine."Bid Opening Date" := FinanceLine."Bid Opening Date";
                        FinalEvalLine."Bid Opening Committee Remarks" := FinanceLine."Bid Opening Committee Remarks";
                        FinalEvalLine."Bid Opening Date (Financial)" := FinanceLine."Bid Opening Date (Financial)";
                        FinalEvalLine."Bid Opening Finance Register" := FinanceLine."Bid Opening Finance Register";
                        FinalEvalLine."Bid Opening Register No." := FinanceLine."Bid Opening Register No.";
                        FinalEvalLine."Bid Opening Result" := FinanceLine."Bid Opening Result";
                        FinalEvalLine."Preliminary Evaluation Date" := FinanceLine."Preliminary Evaluation Date";
                        FinalEvalLine."Preliminary Evaluation Outcome" := FinanceLine."Preliminary Evaluation Outcome";
                        FinalEvalLine."Preliminary Evaluation Reg" := FinanceLine."Preliminary Evaluation Reg";
                        FinalEvalLine."Preminary Evaluation Committee" := FinanceLine."Preminary Evaluation Committee";
                        //FinalEvalLine."Tech Evaluation Ranking":=IFSDetails.;
                        FinalEvalLine."Technical Evaluation Date" := FinanceLine."Technical Evaluation Date";



                        FinalEvalLine.Insert(true);
                    until FinanceLine.Next = 0;

                end;
            end;
            //PAGE.RUN(75278,FinalEvalReport)
        end;
    end;


    procedure SuggestNoticeOfAward(FinalEvalReport1: Record "Bid Tabulation Header")
    var
        Bidevaluationscore: Record "Bid Evaluation Score Entry";
        BidSCoreGuide: Record "Bid Score Requirement";
        LineNo: Integer;
        IFSDetails: Record "Standard Vendor Purchase Code";
        ProcuremnetSetup: Record "Procurement Setup";
        IFS: Record "Standard Purchase Code";
        Bids: Record "Purchase Header";
        FinanceLine: Record "Bid Tabulation Line";
        FinalEvalLine: Record "Bid Tabulation Line";
        EvaluationHeader: Record "Bid Evaluation Register";
        FinalEvalReport: Record "Bid Tabulation Header";
    begin
        //Generate PP
        FinalEvalReport.Reset;
        FinalEvalReport.SetRange(Code, FinalEvalReport1."Professional Opinion ID");
        //FinalEvalReport1.SETRANGE("Document Type",FinalEvalReport."Document Type"::"Professional Opinion");
        if FinalEvalReport.FindSet then begin
            //FinalEvalReport1.INIT;

            // FinalEvalReport1."Document Type":=FinalEvalReport."Document Type"::"Professional Opinion";
            FinalEvalReport1."IFS Code" := FinalEvalReport."IFS Code";
            FinalEvalReport1."IFP Code" := FinalEvalReport."IFP Code";
            FinalEvalReport1."Final Evaluation Report ID" := FinalEvalReport."Final Evaluation Report ID";
            FinalEvalReport1."Prequalification Category" := FinalEvalReport."Prequalification Category";
            FinalEvalReport1."Category Name" := FinalEvalReport."Category Name";
            FinalEvalReport1."Process Type" := FinalEvalReport."Process Type";
            FinalEvalReport1."Document Date" := FinalEvalReport."Document Date";
            FinalEvalReport1."Financial Evaluation ID" := FinalEvalReport.Code;
            FinalEvalReport1.Description := Format(FinalEvalReport1."Document Type") + ' ' + FinalEvalReport."IFS Code";
            FinalEvalReport1."Tender Name" := FinalEvalReport."Tender Name";
            FinalEvalReport1."Raised By" := FinalEvalReport."Raised By";
            FinalEvalReport1.Name := FinalEvalReport.Name;
            FinalEvalReport1."Document Date" := Today;
            FinalEvalReport1."Created By" := UserId;
            FinalEvalReport1."Procurement Officer License No" := FinalEvalReport."Procurement Officer License No";
            FinalEvalReport1."Created Date" := Today;
            FinalEvalReport1."Created Time" := Time;
            FinalEvalReport1."Tender Committee Role" := FinalEvalReport."tender committee role"::Chairperson;
            FinalEvalReport1."Bid Opening Date" := FinalEvalReport."Bid Opening Date";
            FinalEvalReport1."Evaluation Completion Date" := FinalEvalReport."Evaluation Completion Date";
            FinalEvalReport1.Validate(FinalEvalReport1."Appointed Bid Opening Comm", FinalEvalReport."Appointed Bid Opening Comm");
            FinalEvalReport1.Validate(FinalEvalReport1."Appointed Bid Evaluation Com", FinalEvalReport."Appointed Bid Evaluation Com");
            FinalEvalReport1."Primary Region" := FinalEvalReport."Primary Region";
            IFS.Reset;
            IFS.SetRange(Code, FinalEvalReport."IFS Code");
            if IFS.FindSet then begin
                FinalEvalReport1."Annual Procurement Plan ID" := IFS."Procurement Plan ID";
                //FinalEvalReport1."Procurement Plan Date":=IFS.
                FinalEvalReport1."Financial Year Code" := IFS."Financial Year Code";
                FinalEvalReport1."Procurement Plan Line No." := IFS."Procurement Plan Line No.";
                FinalEvalReport1."Procurement Plan Entry No" := IFS."Procurement Plan Entry No";
                FinalEvalReport1."Available Procurement Budget" := IFS."Available Procurement Budget";
                FinalEvalReport1."Budget Narration" := IFS."Budget Narration";
            end;
            if FinalEvalReport1.Modify(true) then begin
                FinanceLine.Reset;
                FinanceLine.SetRange("Tabulation ID", FinalEvalReport.Code);
                if FinanceLine.FindSet then begin
                    repeat
                        FinalEvalLine.Init;
                        FinalEvalLine."Tabulation ID" := FinalEvalReport1.Code;
                        FinalEvalLine."Tabulation Type" := FinalEvalLine."tabulation type"::"Professional Opinion";
                        FinalEvalLine."Document Type" := FinalEvalLine."document type"::Quote;
                        FinalEvalLine."No." := FinanceLine."No.";
                        FinalEvalLine."Bidder Name" := FinanceLine."Bidder Name";
                        FinalEvalLine."Bidder No" := FinanceLine."Bidder No";
                        FinalEvalLine."Invitation For Supply No" := FinanceLine."Invitation For Supply No";
                        FinalEvalLine."Bid Currency Code" := FinanceLine."Bid Currency Code";
                        // FinalEvalLine.ReFinanceLine."Read-out Bid Price (A)"
                        FinalEvalLine."Preliminary Evaluation Date" := FinanceLine."Preliminary Evaluation Date";
                        FinalEvalLine."Responsive Bid" := FinanceLine."Responsive Bid";
                        FinalEvalLine."Technical Evaluation Date" := FinanceLine."Technical Evaluation Date";
                        FinalEvalLine."Weighted Tech Score %" := FinanceLine."Weighted Tech Score %";
                        FinalEvalLine."Passed Tech Evaluation" := FinanceLine."Passed Tech Evaluation";
                        FinalEvalLine."Tech Evaluation Ranking" := FinanceLine."Tech Evaluation Ranking";
                        //FinalEvalLine.  IFSDetails."Bid Opening Finance Register"
                        //FinalEvalLine."Bid Opening Date":=FinanceLine.ope
                        //FinalEvalLine.finaIFSDetails."Financial Eval Register No"
                        FinalEvalLine."Financial Evaluation Date" := FinanceLine."Financial Evaluation Date";
                        FinalEvalLine."Read-out Bid Price (A)" := FinanceLine."Read-out Bid Price (A)";
                        FinalEvalLine."Arithmetic Corrections (B)" := FinanceLine."Arithmetic Corrections (B)";
                        FinalEvalLine."Corrected Bid Price (C=A+B)" := FinanceLine."Corrected Bid Price (C=A+B)";
                        FinalEvalLine."Unconditional Discount % (D)" := FinanceLine."Unconditional Discount % (D)";
                        FinalEvalLine."Unconditional Disc Amount (E)" := FinanceLine."Unconditional Disc Amount (E)";
                        FinalEvalLine."Corrected & Disc Bid Price" := FinanceLine."Corrected & Disc Bid Price";
                        FinalEvalLine."Any Additional Adjustments (G)" := FinanceLine."Any Additional Adjustments (G)";
                        FinalEvalLine."Any Priced Deviations (H))" := FinanceLine."Any Priced Deviations (H))";
                        FinalEvalLine."Final Evaluated Bid Price" := FinanceLine."Final Evaluated Bid Price";
                        FinalEvalLine."Weighted Financial Score %" := FinanceLine."Weighted Financial Score %";
                        FinalEvalLine."Weighted Tech Score %" := FinanceLine."Weighted Tech Score %";
                        FinalEvalLine."Evaluation Committee Recomm" := FinanceLine."Evaluation Committee Recomm";
                        FinalEvalLine."Financial Evaluation Comm Rem" := FinanceLine."Financial Evaluation Comm Rem";
                        FinalEvalLine."Aggregate Weighted Score %" := FinanceLine."Aggregate Weighted Score %";
                        FinalEvalLine."Pre-bid Register No." := FinanceLine."Pre-bid Register No.";
                        FinalEvalLine."Prebid Conference Date" := FinanceLine."Prebid Conference Date";
                        FinalEvalLine."Bid Opening Date" := FinanceLine."Bid Opening Date";
                        FinalEvalLine."Bid Opening Committee Remarks" := FinanceLine."Bid Opening Committee Remarks";
                        FinalEvalLine."Bid Opening Date (Financial)" := FinanceLine."Bid Opening Date (Financial)";
                        FinalEvalLine."Bid Opening Finance Register" := FinanceLine."Bid Opening Finance Register";
                        FinalEvalLine."Bid Opening Register No." := FinanceLine."Bid Opening Register No.";
                        FinalEvalLine."Bid Opening Result" := FinanceLine."Bid Opening Result";
                        FinalEvalLine."Preliminary Evaluation Date" := FinanceLine."Preliminary Evaluation Date";
                        FinalEvalLine."Preliminary Evaluation Outcome" := FinanceLine."Preliminary Evaluation Outcome";
                        FinalEvalLine."Preliminary Evaluation Reg" := FinanceLine."Preliminary Evaluation Reg";
                        FinalEvalLine."Preminary Evaluation Committee" := FinanceLine."Preminary Evaluation Committee";
                        //FinalEvalLine."Tech Evaluation Ranking":=IFSDetails.;
                        FinalEvalLine."Technical Evaluation Date" := FinanceLine."Technical Evaluation Date";



                        FinalEvalLine.Insert(true);
                    until FinanceLine.Next = 0;

                end;
            end;
            //PAGE.RUN(75278,FinalEvalReport)
        end;
    end;


    procedure PostIFPProffesionOpinion(FinalEvalReport: Record "Bid Tabulation Header")
    var
        Bidevaluationscore: Record "Bid Evaluation Score Entry";
        BidSCoreGuide: Record "Bid Score Requirement";
        LineNo: Integer;
        IFSDetails: Record "Standard Vendor Purchase Code";
        ProcuremnetSetup: Record "Procurement Setup";
        IFS: Record "Standard Purchase Code";
        Bids: Record "Purchase Header";
        FinanceLine: Record "Bid Tabulation Line";
        FinalEvalLine: Record "Bid Tabulation Line";
        FinalEvalReport1: Record "Bid Tabulation Header";
        IFPResponseLine: Record "IFP Response Line";
    begin

        //FinalEvalReport.TESTFIELD("General Procurement Remarks");
        // if not ConfirmManagement.ConfirmProcess(Text001, true) then
        //     exit;

        IFPResponseLine.Reset;
        IFPResponseLine.SetRange("RFI Document No.", FinalEvalReport."IFP Code");
        if IFPResponseLine.FindSet then begin
            repeat
                IFPResponseLine."Response Stage" := IFPResponseLine."response stage"::"Opinion Stage";
                IFPResponseLine."Professional Opinion No" := FinalEvalReport.Code;
                IFPResponseLine.Modify(true);
            until IFPResponseLine.Next = 0;
        end;
        FinalEvalReport.Posted := true;
        FinalEvalReport."Posted By" := UserId;
        FinalEvalReport."Posted Date" := Today;
        FinalEvalReport.Modify(true);


        //Generate PP
        FinalEvalReport1.Reset;
        FinalEvalReport1.SetRange("IFP Code", FinalEvalReport."IFP Code");
        FinalEvalReport1.SetRange("Document Type", FinalEvalReport."document type"::"Notice of Award");
        if not FinalEvalReport1.FindSet then begin
            FinalEvalReport1.Init;
            FinalEvalReport1."Document Type" := FinalEvalReport."document type"::"Notice of Award";
            FinalEvalReport1."IFS Code" := FinalEvalReport."IFS Code";
            FinalEvalReport1."Process Type" := FinalEvalReport."Process Type";
            FinalEvalReport1."IFP Code" := FinalEvalReport."IFP Code";
            FinalEvalReport1."Procurement Officer License No" := FinalEvalReport."Procurement Officer License No";
            FinalEvalReport1."Prequalification Category" := FinalEvalReport."Prequalification Category";
            FinalEvalReport1."Category Name" := FinalEvalReport."Category Name";
            FinalEvalReport1."Document Date" := FinalEvalReport."Document Date";
            FinalEvalReport1."Final Evaluation Report ID" := FinalEvalReport."Final Evaluation Report ID";
            //FinalEvalReport1."Professional Opinion ID":=FinalEvalReport.Code;
            FinalEvalReport1.Description := 'Notice of Award: ' + FinalEvalReport."IFS Code";
            FinalEvalReport1.Validate("Professional Opinion ID", FinalEvalReport.Code);
            FinalEvalReport1."Tender Name" := FinalEvalReport."Tender Name";
            FinalEvalReport1."Raised By" := FinalEvalReport."Raised By";
            FinalEvalReport1.Name := FinalEvalReport.Name;
            FinalEvalReport1."Bid Opening Register(Tech)" := FinalEvalReport."Bid Opening Register(Tech)";
            FinalEvalReport1."Bid Opening Register(Finance)" := FinalEvalReport."Bid Opening Register(Finance)";
            FinalEvalReport1."Tender Committee Role" := FinalEvalReport."tender committee role"::Chairperson;
            FinalEvalReport1."Bid Opening Date" := FinalEvalReport."Bid Opening Date";
            FinalEvalReport1."Evaluation Completion Date" := FinalEvalReport."Evaluation Completion Date";
            FinalEvalReport1.Validate(FinalEvalReport1."Appointed Bid Opening Comm", FinalEvalReport."Appointed Bid Opening Comm");
            FinalEvalReport1.Validate(FinalEvalReport1."Appointed Bid Evaluation Com", FinalEvalReport."Appointed Bid Evaluation Com");
            FinalEvalReport1."Professional Opinion ID" := FinalEvalReport."Professional Opinion ID";
            FinalEvalReport1."Final Evaluation Report ID" := FinalEvalReport."Final Evaluation Report ID";
            FinalEvalReport1."Primary Region" := FinalEvalReport."Primary Region";
            //FinalEvalReport1."Process Type":=FinalEvalReport."Process Type";
            FinalEvalReport1."Professional Opinion ID" := FinalEvalReport.Code;
            IFS.Reset;
            IFS.SetRange(Code, FinalEvalReport."IFS Code");
            if IFS.FindSet then begin
                FinalEvalReport1."Annual Procurement Plan ID" := IFS."Procurement Plan ID";
                //FinalEvalReport1."Procurement Plan Date":=IFS.
                FinalEvalReport1."Financial Year Code" := IFS."Financial Year Code";
                FinalEvalReport1."Procurement Plan Line No." := IFS."Procurement Plan Line No.";
                FinalEvalReport1."Procurement Plan Entry No" := IFS."Procurement Plan Entry No";
                FinalEvalReport1."Available Procurement Budget" := IFS."Available Procurement Budget";
                FinalEvalReport1."Budget Narration" := IFS."Budget Narration";
            end;

            if FinalEvalReport1.Insert(true) then begin
                FinanceLine.Reset;
                FinanceLine.SetRange("Tabulation ID", FinalEvalReport.Code);
                if FinanceLine.FindSet then begin
                    repeat
                        FinalEvalLine.Init;
                        FinalEvalLine."Tabulation ID" := FinalEvalReport1.Code;
                        FinalEvalLine."Tabulation Type" := FinalEvalLine."tabulation type"::"Notice of Award";
                        FinalEvalLine."Document Type" := FinalEvalLine."document type"::Quote;
                        FinalEvalLine."No." := FinanceLine."No.";
                        FinalEvalLine."Bidder Name" := FinanceLine."Bidder Name";
                        FinalEvalLine."Bidder No" := FinanceLine."Bidder No";
                        FinalEvalLine."Invitation For Supply No" := FinanceLine."Invitation For Supply No";
                        FinalEvalLine."Bid Currency Code" := FinanceLine."Bid Currency Code";
                        // FinalEvalLine.ReFinanceLine."Read-out Bid Price (A)"
                        FinalEvalLine."Preliminary Evaluation Date" := FinanceLine."Preliminary Evaluation Date";
                        FinalEvalLine."Responsive Bid" := FinanceLine."Responsive Bid";
                        FinalEvalLine."Technical Evaluation Date" := FinanceLine."Technical Evaluation Date";
                        FinalEvalLine."Weighted Tech Score %" := FinanceLine."Weighted Tech Score %";
                        FinalEvalLine."Passed Tech Evaluation" := FinanceLine."Passed Tech Evaluation";
                        FinalEvalLine."Tech Evaluation Ranking" := FinanceLine."Tech Evaluation Ranking";
                        //FinalEvalLine.  IFSDetails."Bid Opening Finance Register"
                        //FinalEvalLine."Bid Opening Date":=FinanceLine.ope
                        //FinalEvalLine.finaIFSDetails."Financial Eval Register No"
                        FinalEvalLine."Financial Evaluation Date" := FinanceLine."Financial Evaluation Date";
                        FinalEvalLine."Read-out Bid Price (A)" := FinanceLine."Read-out Bid Price (A)";
                        FinalEvalLine."Arithmetic Corrections (B)" := FinanceLine."Arithmetic Corrections (B)";
                        FinalEvalLine."Corrected Bid Price (C=A+B)" := FinanceLine."Corrected Bid Price (C=A+B)";
                        FinalEvalLine."Unconditional Discount % (D)" := FinanceLine."Unconditional Discount % (D)";
                        FinalEvalLine."Unconditional Disc Amount (E)" := FinanceLine."Unconditional Disc Amount (E)";
                        FinalEvalLine."Corrected & Disc Bid Price" := FinanceLine."Corrected & Disc Bid Price";
                        FinalEvalLine."Any Additional Adjustments (G)" := FinanceLine."Any Additional Adjustments (G)";
                        FinalEvalLine."Any Priced Deviations (H))" := FinanceLine."Any Priced Deviations (H))";
                        FinalEvalLine."Final Evaluated Bid Price" := FinanceLine."Final Evaluated Bid Price";
                        FinalEvalLine."Weighted Financial Score %" := FinanceLine."Weighted Financial Score %";
                        FinalEvalLine."Weighted Tech Score %" := FinanceLine."Weighted Tech Score %";
                        FinalEvalLine."Evaluation Committee Recomm" := FinanceLine."Evaluation Committee Recomm";
                        FinalEvalLine."Financial Evaluation Comm Rem" := FinanceLine."Financial Evaluation Comm Rem";
                        FinalEvalLine."Aggregate Weighted Score %" := FinanceLine."Aggregate Weighted Score %";
                        FinalEvalLine."Pre-bid Register No." := FinanceLine."Pre-bid Register No.";
                        FinalEvalLine."Prebid Conference Date" := FinanceLine."Prebid Conference Date";
                        FinalEvalLine."Bid Opening Date" := FinanceLine."Bid Opening Date";
                        FinalEvalLine."Bid Opening Committee Remarks" := FinanceLine."Bid Opening Committee Remarks";
                        FinalEvalLine."Bid Opening Date (Financial)" := FinanceLine."Bid Opening Date (Financial)";
                        FinalEvalLine."Bid Opening Finance Register" := FinanceLine."Bid Opening Finance Register";
                        FinalEvalLine."Bid Opening Register No." := FinanceLine."Bid Opening Register No.";
                        FinalEvalLine."Bid Opening Result" := FinanceLine."Bid Opening Result";
                        FinalEvalLine."Preliminary Evaluation Date" := FinanceLine."Preliminary Evaluation Date";
                        FinalEvalLine."Preliminary Evaluation Outcome" := FinanceLine."Preliminary Evaluation Outcome";
                        FinalEvalLine."Preliminary Evaluation Reg" := FinanceLine."Preliminary Evaluation Reg";
                        FinalEvalLine."Preminary Evaluation Committee" := FinanceLine."Preminary Evaluation Committee";
                        //FinalEvalLine."Tech Evaluation Ranking":=IFSDetails.;
                        FinalEvalLine."Technical Evaluation Date" := FinanceLine."Technical Evaluation Date";
                        if FinanceLine."Evaluation Committee Recomm" = FinanceLine."evaluation committee recomm"::Award then begin
                            FinalEvalReport1."Awarded Bid No" := FinanceLine."No.";
                            FinalEvalReport1."Awarded Bidder No." := FinanceLine."Bidder No";
                            FinalEvalReport1."Awarded Bidder Name" := FinanceLine."Bidder Name";
                            FinalEvalReport1."Award Tender Sum Inc Taxes" := FinanceLine."Final Evaluated Bid Price";
                            FinalEvalReport1.Modify;
                        end;


                        FinalEvalLine.Insert(true);
                    until FinanceLine.Next = 0;

                end;
            end;
            Page.Run(75339, FinalEvalReport1)
        end else
            Page.Run(75339, FinalEvalReport1)
    end;


    procedure PostProffesionOpinion(FinalEvalReport: Record "Bid Tabulation Header")
    var
        Bidevaluationscore: Record "Bid Evaluation Score Entry";
        BidSCoreGuide: Record "Bid Score Requirement";
        LineNo: Integer;
        IFSDetails: Record "Standard Vendor Purchase Code";
        ProcuremnetSetup: Record "Procurement Setup";
        IFS: Record "Standard Purchase Code";
        Bids: Record "Purchase Header";
        FinanceLine: Record "Bid Tabulation Line";
        FinalEvalLine: Record "Bid Tabulation Line";
        FinalEvalReport1: Record "Bid Tabulation Header";
        FinalEvalReport2: Record "Bid Tabulation Header";
        ConfirmManagement: Codeunit "Confirm Management";
    begin
        FinalEvalReport.TestField("Approval Status",FinalEvalReport."Approval Status"::Released);
        //FinalEvalReport.TESTFIELD("General Procurement Remarks");
        // if not ConfirmManagement.ConfirmProcess(Text001, true) then
        //     exit;
        FinalEvalReport2.Reset();
        FinalEvalReport2.SetRange("Professional Opinion ID",FinalEvalReport."Code");
        FinalEvalReport2.SetRange("Document Type",FinalEvalReport2."Document Type"::"Notice of Award");
        if FinalEvalReport2.FindFirst() then begin
            if  ConfirmManagement.GetResponseOrDefault(StrSubstNo('Notice of award %1 already exists for profesional opinion %2. Do you want to open %1?',FinalEvalReport2.Code,FinalEvalReport2."Professional Opinion ID",FinalEvalReport2.Code),true) then
            Page.Run(75281, FinalEvalReport2);
            exit;
    end;

        FinalEvalReport.Posted := true;
        FinalEvalReport."Posted By" := UserId;
        FinalEvalReport."Posted Date" := Today;
        FinalEvalReport.Modify(true);
        FinalEvalLine.Reset;
        FinalEvalLine.SetRange("Tabulation ID", FinalEvalReport.Code);
        if FinalEvalLine.FindSet then begin
            repeat
                //awarded winner Details
                /*IF FinalEvalLine."Evaluation Committee Recomm"=FinalEvalLine."Evaluation Committee Recomm"::Award THEN BEGIN
                  FinalEvalReport."Awarded Bid No":=FinalEvalLine."No.";
                  FinalEvalReport."Awarded Bidder No.":=FinalEvalLine."Bidder No";
                  FinalEvalReport."Awarded Bidder Name":=FinalEvalLine."Bidder Name";
                  FinalEvalReport."Award Tender Sum Inc Taxes":=FinalEvalLine."Final Evaluated Bid Price";


                  END;*/

                Bids.Reset;
                Bids.SetRange("No.", FinalEvalLine."No.");
                Bids.SetRange("IFS Code", FinalEvalReport."IFS Code");
                if Bids.FindSet then begin

                    Bids."Proffesion Opinion No" := FinalEvalReport.Code;
                    Bids."Proffesion Opinion Date" := FinalEvalReport."Document Date";
                    Bids.Modify(true);

                    IFSDetails.Reset;
                    IFSDetails.SetRange(Code, FinalEvalReport."IFS Code");
                    IFSDetails.SetRange("Vendor No.", FinalEvalLine."Bidder No");
                    IFSDetails.SetRange("Bid No.", FinalEvalLine."No.");
                    if IFSDetails.FindSet then begin
                        IFSDetails."Professional Opion ID" := FinalEvalReport.Code;
                        IFSDetails."Professional Opion Date" := FinalEvalReport."Document Date";
                        ;
                        IFSDetails.Modify(true);
                    end;
                end;
            until FinalEvalLine.Next = 0;
        end;




        ProcuremnetSetup.Get;
        if ProcuremnetSetup."Notify Committe Members" = true then
            FnSendBidTabulationNotification(FinalEvalReport);

        IFS.Reset;
        IFS.SetRange(Code, FinalEvalReport."IFS Code");
        if IFS.FindSet then begin
            IFS."Document Status" := IFS."document status"::Evaluation;
            IFS.Modify;
        end;

        //Generate PP
        // FinalEvalReport1.RESET;
        // FinalEvalReport1.SETRANGE("IFS Code",FinalEvalReport."IFS Code");
        // FinalEvalReport1.SETRANGE("Document Type",FinalEvalReport."Document Type"::"Notice of Award");
        // IF NOT FinalEvalReport1.FINDSET THEN BEGIN
        FinalEvalReport1.Init;
        FinalEvalReport1."Document Type" := FinalEvalReport."document type"::"Notice of Award";
        FinalEvalReport1."IFS Code" := FinalEvalReport."IFS Code";
        FinalEvalReport1."Document Date" := FinalEvalReport."Document Date";
        FinalEvalReport1."Final Evaluation Report ID" := FinalEvalReport."Final Evaluation Report ID";
        //FinalEvalReport1."Professional Opinion ID":=FinalEvalReport.Code;
        FinalEvalReport1.Description := 'Notice of Award: ' + FinalEvalReport."IFS Code";
        FinalEvalReport1.Validate("Professional Opinion ID", FinalEvalReport.Code);
        FinalEvalReport1."Tender Name" := FinalEvalReport."Tender Name";
        FinalEvalReport1."Raised By" := FinalEvalReport."Raised By";
        FinalEvalReport1.Name := FinalEvalReport.Name;
        FinalEvalReport1."Bid Evaluation Criteria" := FinalEvalReport."Bid Evaluation Criteria";
        FinalEvalReport1."Bid Opening Register(Tech)" := FinalEvalReport."Bid Opening Register(Tech)";
        FinalEvalReport1."Bid Opening Register(Finance)" := FinalEvalReport."Bid Opening Register(Finance)";
        FinalEvalReport1."Tender Committee Role" := FinalEvalReport."tender committee role"::Chairperson;
        FinalEvalReport1."Bid Opening Date" := FinalEvalReport."Bid Opening Date";
        FinalEvalReport1."Bid Evaluation Criteria" := FinalEvalReport1."Bid Evaluation Criteria";
        FinalEvalReport1."Process Type" := FinalEvalReport1."process type"::IFS;
        ProcurementSetup.Get;
        FinalEvalReport1."Min. Contract Holding" := ProcurementSetup."Min. Contract Holding Duration";
        // FinalEvalReport1."Earliest Contract Issuance Dt":=ProcurementSetup.
        FinalEvalReport1."Award Acceptance Response" := CalcDate(ProcurementSetup."Award Acceptance Deadline", Today);
        FinalEvalReport1."Award Acceptance Deadline" := ProcurementSetup."Award Acceptance Deadline";
        FinalEvalReport1."Evaluation Completion Date" := FinalEvalReport."Evaluation Completion Date";
        FinalEvalReport1.Validate(FinalEvalReport1."Appointed Bid Opening Comm", FinalEvalReport."Appointed Bid Opening Comm");
        FinalEvalReport1.Validate(FinalEvalReport1."Appointed Bid Evaluation Com", FinalEvalReport."Appointed Bid Evaluation Com");
        FinalEvalReport1."Professional Opinion ID" := FinalEvalReport."Professional Opinion ID";
        FinalEvalReport1."Final Evaluation Report ID" := FinalEvalReport."Final Evaluation Report ID";
        FinalEvalReport1."Primary Region" := FinalEvalReport."Primary Region";
        FinalEvalReport1."Professional Opinion ID" := FinalEvalReport.Code;
        IFS.Reset;
        IFS.SetRange(Code, FinalEvalReport."IFS Code");
        if IFS.FindSet then begin
            FinalEvalReport1."Annual Procurement Plan ID" := IFS."Procurement Plan ID";
            //FinalEvalReport1."Procurement Plan Date":=IFS.
            FinalEvalReport1."Financial Year Code" := IFS."Financial Year Code";
            FinalEvalReport1."Procurement Plan Line No." := IFS."Procurement Plan Line No.";
            FinalEvalReport1."Procurement Plan Entry No" := IFS."Procurement Plan Entry No";
            FinalEvalReport1."Available Procurement Budget" := IFS."Available Procurement Budget";
            FinalEvalReport1."Budget Narration" := IFS."Budget Narration";
        end;

        if FinalEvalReport1.Insert(true) then begin
            FinanceLine.Reset;
            FinanceLine.SetRange("Tabulation ID", FinalEvalReport.Code);
            if FinanceLine.FindSet then begin
                repeat
                    FinalEvalLine.Init;
                    FinalEvalLine."Tabulation ID" := FinalEvalReport1.Code;
                    FinalEvalLine."Tabulation Type" := FinalEvalLine."tabulation type"::"Notice of Award";
                    FinalEvalLine."Document Type" := FinalEvalLine."document type"::Quote;
                    FinalEvalLine."No." := FinanceLine."No.";
                    FinalEvalLine."Bidder Name" := FinanceLine."Bidder Name";
                    FinalEvalLine."Bidder No" := FinanceLine."Bidder No";
                    FinalEvalLine."Invitation For Supply No" := FinanceLine."Invitation For Supply No";
                    FinalEvalLine."Bid Currency Code" := FinanceLine."Bid Currency Code";
                    // FinalEvalLine.ReFinanceLine."Read-out Bid Price (A)"
                    FinalEvalLine."Preliminary Evaluation Date" := FinanceLine."Preliminary Evaluation Date";
                    FinalEvalLine."Responsive Bid" := FinanceLine."Responsive Bid";
                    FinalEvalLine."Technical Evaluation Date" := FinanceLine."Technical Evaluation Date";
                    FinalEvalLine."Weighted Tech Score %" := FinanceLine."Weighted Tech Score %";
                    FinalEvalLine."Passed Tech Evaluation" := FinanceLine."Passed Tech Evaluation";
                    FinalEvalLine."Tech Evaluation Ranking" := FinanceLine."Tech Evaluation Ranking";
                    FinalEvalLine."Final Evaluation Remarks" := FinanceLine."Final Evaluation Remarks";
                    //FinalEvalLine.  IFSDetails."Bid Opening Finance Register"
                    //FinalEvalLine."Bid Opening Date":=FinanceLine.ope
                    //FinalEvalLine.finaIFSDetails."Financial Eval Register No"
                    FinalEvalLine."Financial Evaluation Date" := FinanceLine."Financial Evaluation Date";
                    FinalEvalLine."Read-out Bid Price (A)" := FinanceLine."Read-out Bid Price (A)";
                    FinalEvalLine."Arithmetic Corrections (B)" := FinanceLine."Arithmetic Corrections (B)";
                    FinalEvalLine."Corrected Bid Price (C=A+B)" := FinanceLine."Corrected Bid Price (C=A+B)";
                    FinalEvalLine."Unconditional Discount % (D)" := FinanceLine."Unconditional Discount % (D)";
                    FinalEvalLine."Unconditional Disc Amount (E)" := FinanceLine."Unconditional Disc Amount (E)";
                    FinalEvalLine."Corrected & Disc Bid Price" := FinanceLine."Corrected & Disc Bid Price";
                    FinalEvalLine."Any Additional Adjustments (G)" := FinanceLine."Any Additional Adjustments (G)";
                    FinalEvalLine."Any Priced Deviations (H))" := FinanceLine."Any Priced Deviations (H))";
                    FinalEvalLine."Final Evaluated Bid Price" := FinanceLine."Final Evaluated Bid Price";
                    FinalEvalLine."Weighted Financial Score %" := FinanceLine."Weighted Financial Score %";
                    FinalEvalLine."Weighted Tech Score %" := FinanceLine."Weighted Tech Score %";
                    FinalEvalLine."Evaluation Committee Recomm" := FinanceLine."Evaluation Committee Recomm";
                    FinalEvalLine."Financial Evaluation Comm Rem" := FinanceLine."Financial Evaluation Comm Rem";
                    FinalEvalLine."Aggregate Weighted Score %" := FinanceLine."Aggregate Weighted Score %";
                    FinalEvalLine."Pre-bid Register No." := FinanceLine."Pre-bid Register No.";
                    FinalEvalLine."Prebid Conference Date" := FinanceLine."Prebid Conference Date";
                    FinalEvalLine."Bid Opening Date" := FinanceLine."Bid Opening Date";
                    FinalEvalLine."Bid Opening Committee Remarks" := FinanceLine."Bid Opening Committee Remarks";
                    FinalEvalLine."Bid Opening Date (Financial)" := FinanceLine."Bid Opening Date (Financial)";
                    FinalEvalLine."Bid Opening Finance Register" := FinanceLine."Bid Opening Finance Register";
                    FinalEvalLine."Bid Opening Register No." := FinanceLine."Bid Opening Register No.";
                    FinalEvalLine."Bid Opening Result" := FinanceLine."Bid Opening Result";
                    FinalEvalLine."Preliminary Evaluation Date" := FinanceLine."Preliminary Evaluation Date";
                    FinalEvalLine."Preliminary Evaluation Outcome" := FinanceLine."Preliminary Evaluation Outcome";
                    FinalEvalLine."Preliminary Evaluation Reg" := FinanceLine."Preliminary Evaluation Reg";
                    FinalEvalLine."Preminary Evaluation Committee" := FinanceLine."Preminary Evaluation Committee";
                    //FinalEvalLine."Tech Evaluation Ranking":=IFSDetails.;
                    FinalEvalLine."Technical Evaluation Date" := FinanceLine."Technical Evaluation Date";
                    if FinanceLine."Evaluation Committee Recomm" = FinanceLine."evaluation committee recomm"::Award then begin
                        FinalEvalReport1."Awarded Bid No" := FinanceLine."No.";
                        FinalEvalReport1."Awarded Bidder No." := FinanceLine."Bidder No";
                        FinalEvalReport1."Awarded Bidder Name" := FinanceLine."Bidder Name";
                        FinalEvalReport1."Award Tender Sum Inc Taxes" := FinanceLine."Final Evaluated Bid Price";
                        FinalEvalReport1.Modify;
                    end;


                    FinalEvalLine.Insert(true);
                until FinanceLine.Next = 0;

            end;
        end;
        Page.Run(75281, FinalEvalReport1);
        //  END ELSE
        //  PAGE.RUN(75281,FinalEvalReport1)

    end;


    procedure FnSendBidTabulationNotification(evaluationHeaader: Record "Bid Tabulation Header")
    var
        SupplierReq: Record Contact;
        LastFieldNo: Integer;
        FooterPrinted: Boolean;
        FileDirectory: Text[100];
        FileName: Text[100];
        ReportID: Integer;
        //   //"Object": Record "Object";
        Window: Dialog;
        RunOnceFile: Text[1000];
        TimeOut: Integer;
        Customer2: Record Customer;
        Cust: Record Customer;
        cr: Integer;
        lf: Integer;
        EmailBody: array[2] of Text[30];
        BodyText: Text[250];
        mymail: Codeunit Mail;
        DefaultPrinter: Text[200];
        WindowisOpen: Boolean;
        FileDialog: Codeunit Mail;
        SendingDate: Date;
        SendingTime: Time;
        Counter: Integer;
        cu400: Codeunit Mail;
        DocLog: Record "Document E-mail Log";
        BranchName: Code[80];
        DimValue: Record "Dimension Value";
        SenderAddress: Text[100];
        CustEmail: Text[100];
        UserSetup: Record "User Setup";
        HRSetup: Record "Company Information";
        Emp: Record Vendor;
        PayrollMonth: Date;
        PayrollMonthText: Text[30];
        PayPeriodtext: Text;
        PayPeriod: Record "Payroll PeriodX";
        CompInfo: Record "Company Information";
        DateFilter: Text;
        FromDate: Date;
        ToDate: Date;
        FromDateS: Text;
        ToDateS: Text;
        vend: Record Vendor;
        StartDate: Date;
        EndDAte: Date;
        EmailVerifier: Codeunit Payroll3;
        IsEmailValid: Boolean;
        PPayableSetup: Record "Procurement Setup";
        RequesterName: Text[100];
        RequesterEmail: Text[100];
        emailhdr: Text[100];
        CompanyDetails: Text[250];
        SupplierDetails: Text[1000];
        SenderMessage: Text[1000];
        ProcNote: Text[1000];
        LoginDetails: Text[1000];
        PortalUser: Record "Dynasoft Portal User";
        Password: Text[50];
        ActivationDetails: Text[1000];
        IFSCommitteMembers: Record "Bid Evaluation Committee";
        IFSTenderCommitte: Record "IFS Tender Committee";
        EvaluationRegister: Record "Bid Tabulation Header";
        SMTPMailSetup: Record "Email Account";
        SMTPMail: Codeunit "Email Message";
        Smail: Codeunit EMail;
    begin
        ///Notifying Procurement Team on supplier Request


        CompInfo.Get;
        HRSetup.Get;
        PPayableSetup.Get;


        IFSCommitteMembers.Reset;
        IFSCommitteMembers.SetRange("Document No.", evaluationHeaader.Code);
        if IFSCommitteMembers.FindSet then begin
            repeat
                IFSCommitteMembers.TestField(Email);
                RequesterEmail := IFSCommitteMembers.Email;
                RequesterName := IFSCommitteMembers."Member Name";
                Window.Open('Sending...');
                WindowisOpen := true;

                IFSTenderCommitte.Reset;
                IFSTenderCommitte.SetRange("Document No.", evaluationHeaader."Appointed Bid Evaluation Com");
                if IFSTenderCommitte.FindSet then
                    Counter := Counter + 1;

                //Create message
                if HRSetup."E-Mail" = '' then
                    Error('Please Contact the IT Admin to specify the E-mail address under Company Information Setup page!!');
                SenderAddress := HRSetup."E-Mail";

                if PPayableSetup."Default Proc Email Contact" = '' then
                    Error('Please Contact the IT Admin to specify the Procurement Manager E-mail address under Purchases&Payable Setup page!!');
                CustEmail := PPayableSetup."Default Proc Email Contact";

                CompanyDetails := 'Dear,  ' + RequesterName;
                SenderMessage := '<BR>Please find attached summary of the FInal Evaluation Report No:' + evaluationHeaader.Code + '</BR>';
                SupplierDetails := '<BR>Appointment Reference No:' + IFSCommitteMembers."Appointed Bid Opening Com" + '</BR>' + '<BR> Committee Type:' + IFSTenderCommitte."Committee Type" + '</BR>' +
                '<BR>Membership Role:' + Format(IFSCommitteMembers."Role Type") + '</BR>' +
                '<BR>Appointment Effective Date:' + Format(IFSTenderCommitte."Appointment Effective Date") + '</BR>' +
                '<BR>Invitation For Supply No:' + IFSCommitteMembers."IFS Code" + '</BR>' +
                '<BR>Tender Name:' + IFSTenderCommitte."Tender Name" + '</BR>' +
                '<BR>Appointing Authority:' + IFSTenderCommitte."Appointing Authority" + '</BR>';
                LoginDetails := 'Attached herein, please find an e-copy of Final Tender Evaluation Summary Report';


                ProcNote := '<BR> If you require any assistance, please contact our Procurement team by Phone ' + HRSetup."Phone No." + ' or vendor support team via Email: ' + PPayableSetup."Default Proc Email Contact";

                EvaluationRegister.Reset;
                EvaluationRegister.SetRange(Code, evaluationHeaader.Code);
                if EvaluationRegister.FindSet then
                    FileDirectory := 'C:\DOCS\';
                FileName := 'BidEvaluation_' + evaluationHeaader.Code + '.pdf';
                ////Report.SaveAsPdf(70043, FileDirectory + FileName, EvaluationRegister);

                if CustEmail = '' then
                    exit;

                //MESSAGE:='This is to notify you that there has been a request for Registration ' +  SupplierRequest."No." + ' From Supplier'+ SupplierRequest.Name;
                emailhdr := 'Final Tender Evaluation Summary (Reference No: ' + evaluationHeaader.Code + ')';

                // //cu400.CreateMessage(CompInfo.Name, SenderAddress, CustEmail, emailhdr,
                // //CompanyDetails + '<BR></BR>' + SenderMessage + SupplierDetails + LoginDetails + ActivationDetails, true);

                // //cu400.AddCC(RequesterEmail);

                // //cu400.AddBodyline(ProcNote);

                // //cu400.AddAttachment(FileDirectory + FileName, FileName);
                // //cu400.Send;
                SendingDate := Today;
                SendingTime := Time;

                IFSCommitteMembers."Notified on Email" := true;
                IFSCommitteMembers."Date/Time Notified" := CurrentDatetime;
                IFSCommitteMembers.Modify(true);


                Sleep(1000);
                Window.Close;

            until IFSCommitteMembers.Next = 0;
        end;
    end;


    procedure FnNotifyTenderAwarded(BidTabulation: Record "Bid Tabulation Header")
    var
        SupplierReq: Record Contact;
        LastFieldNo: Integer;
        FooterPrinted: Boolean;
        FileDirectory: Text[100];
        FileName: Text[100];
        ReportID: Integer;
        //   //"Object": Record "Object";
        Window: Dialog;
        RunOnceFile: Text[1000];
        TimeOut: Integer;
        Customer2: Record Customer;
        Cust: Record Customer;
        cr: Integer;
        lf: Integer;
        EmailBody: array[2] of Text[30];
        BodyText: Text[250];
        mymail: Codeunit Mail;
        DefaultPrinter: Text[200];
        WindowisOpen: Boolean;
        FileDialog: Codeunit Mail;
        SendingDate: Date;
        SendingTime: Time;
        Counter: Integer;
        cu400: Codeunit Mail;
        DocLog: Record "Document E-mail Log";
        BranchName: Code[80];
        DimValue: Record "Dimension Value";
        SenderAddress: Text[100];
        CustEmail: Text[100];
        UserSetup: Record "User Setup";
        HRSetup: Record "Company Information";
        Emp: Record Vendor;
        PayrollMonth: Date;
        PayrollMonthText: Text[30];
        PayPeriodtext: Text;
        PayPeriod: Record "Payroll PeriodX";
        CompInfo: Record "Company Information";
        DateFilter: Text;
        FromDate: Date;
        ToDate: Date;
        FromDateS: Text;
        ToDateS: Text;
        vend: Record Vendor;
        StartDate: Date;
        EndDAte: Date;
        EmailVerifier: Codeunit Payroll3;
        IsEmailValid: Boolean;
        PPayableSetup: Record "Procurement Setup";
        RequesterName: Text[100];
        RequesterEmail: Text[100];
        emailhdr: Text[100];
        CompanyDetails: Text[250];
        SupplierDetails: Text[1000];
        SenderMessage: Text[1000];
        ProcNote: Text[1000];
        LoginDetails: Text[1000];
        PortalUser: Record "Dynasoft Portal User";
        Password: Text[50];
        ActivationDetails: Text[1000];
        IFSPrebidAttendees: Record "Bid Opening Bidder Attendance";
        BidopeningRegister: Record "Bid Opening Register";
        BidTab: Record "Bid Tabulation Header";
        //cc
        SMTPMailSetup: Record "Email Account";
        SMTPMail: Codeunit "Email Message";
        Smail: Codeunit EMail;
    begin
        ///Notifying Procurement Team on supplier Request
        vend.Reset;
        vend.SetRange("No.", BidTabulation."Awarded Bidder No.");
        if vend.FindSet then begin
            /*BidopeningRegister.RESET;
            BidopeningRegister.SETRANGE(Code,BidOpening.Code);*/

            CompInfo.Get;
            HRSetup.Get;
            PPayableSetup.Get;

            vend.TestField("E-Mail");
            RequesterEmail := vend."E-Mail";
            RequesterName := vend.Name;

            Window.Open('Sending...');

            WindowisOpen := true;


            Counter := Counter + 1;

            //Create message
            if HRSetup."E-Mail" = '' then
                Error('Please Contact the IT Admin to specify the E-mail address under Company Information Setup page!!');
            SenderAddress := HRSetup."E-Mail";

            if PPayableSetup."Default Proc Email Contact" = '' then
                Error('Please Contact the IT Admin to specify the Procurement Manager E-mail address under Purchases&Payable Setup page!!');
            CustEmail := PPayableSetup."Default Proc Email Contact";

            CompanyDetails := 'Dear,  ' + RequesterName + '<BR>' + vend."No.";
            SenderMessage := '<BR>Thank You for participating in the Tender (Reference No:' + BidTabulation.Code + ') Submitted on ' + Format(BidTabulation."Bid Opening Date") +
            'as summarized below: </BR>';
            SupplierDetails := '<BR>Tender invitation Notice No:' + BidTabulation."IFS Code" + '</BR>' + '<BR> Tender Name:' + BidTabulation."Tender Name" + '</BR>';
            LoginDetails := '<BR> This is to notify you that your bid was successful and you have been awarded the tender, Attached is the E-Award Letter </BR>';


            ProcNote := '<BR> If you require any assistance, please contact our Procurement team by Phone ' + HRSetup."Phone No." + ' or vendor support team via Email: ' + PPayableSetup."Default Proc Email Contact";

            BidTab.Reset;
            BidTab.SetRange(Code, BidTabulation.Code);
            if BidTab.FindSet then begin

                FileDirectory := 'C:\DOCS\';
                FileName := 'AwardLetter_' + BidTab.Code + '.pdf';
                //   //Report.SaveAsPdf(70044, FileDirectory + FileName, BidTab);
            end;

            if CustEmail = '' then
                exit;

            //MESSAGE:='This is to notify you that there has been a request for Registration ' +  SupplierRequest."No." + ' From Supplier'+ SupplierRequest.Name;
            emailhdr := 'Award Letter (Reference No: ' + BidTabulation.Code + ')';
            SMTPMail.Create('dennisonkyalo@dynasoft.co.ke', emailhdr, CompanyDetails + '<BR></BR>' + SenderMessage + SupplierDetails + LoginDetails + ActivationDetails, True);
            //SMTPMail.Send();
            Smail.Send(SMTPMail, Enum::"Email Scenario"::Default);

            // //cu400.CreateMessage(CompInfo.Name, SenderAddress, RequesterEmail, emailhdr,
            // //CompanyDetails + '<BR></BR>' + SenderMessage + SupplierDetails + LoginDetails + ActivationDetails, true);
            // //cu400.AddAttachment(FileDirectory + FileName, FileName);
            // /*IFSPrebidAttendees.RESET;
            // IFSPrebidAttendees.SETRANGE("Vendor No.",vend."No.");
            // IFSPrebidAttendees.SETRANGE(Code,BidOpening.Code);
            // IF IFSPrebidAttendees.FINDSET THEN BEGIN
            //   REPEAT
            //   //cu400.AddCC(IFSPrebidAttendees."Representative Email");
            //  IFSPrebidAttendees."Notified By Email":=TRUE;
            // IFSPrebidAttendees."Date/Time Notified":=TODAY;
            // IFSPrebidAttendees.MODIFY(TRUE);
            //   UNTIL IFSPrebidAttendees.NEXT=0;
            //   END;*/
            // //cu400.AddCC(CustEmail);

            // //cu400.AddBodyline(ProcNote);


            // //cu400.Send;
            SendingDate := Today;
            SendingTime := Time;
            /*BidTabulation.Notified:=TRUE;
            BidTabulation."Date/Time Notified":=TODAY;
            BidTabulation.MODIFY(TRUE);*/



            Sleep(1000);
            Window.Close;

            //UNTIL vend.NEXT=0;
        end;

    end;


    procedure FnNotifyTenderRegrets(BidTabulation: Record "Bid Tabulation Header")
    var
        SupplierReq: Record Contact;
        LastFieldNo: Integer;
        FooterPrinted: Boolean;
        FileDirectory: Text[100];
        FileName: Text[100];
        ReportID: Integer;
        // //"Object": Record "Object";
        Window: Dialog;
        RunOnceFile: Text[1000];
        TimeOut: Integer;
        Customer2: Record Customer;
        Cust: Record Customer;
        cr: Integer;
        lf: Integer;
        EmailBody: array[2] of Text[30];
        BodyText: Text[250];
        mymail: Codeunit Mail;
        DefaultPrinter: Text[200];
        WindowisOpen: Boolean;
        FileDialog: Codeunit Mail;
        SendingDate: Date;
        SendingTime: Time;
        Counter: Integer;
        cu400: Codeunit Mail;
        DocLog: Record "Document E-mail Log";
        BranchName: Code[80];
        DimValue: Record "Dimension Value";
        SenderAddress: Text[100];
        CustEmail: Text[100];
        UserSetup: Record "User Setup";
        HRSetup: Record "Company Information";
        Emp: Record Vendor;
        PayrollMonth: Date;
        PayrollMonthText: Text[30];
        PayPeriodtext: Text;
        PayPeriod: Record "Payroll PeriodX";
        CompInfo: Record "Company Information";
        DateFilter: Text;
        FromDate: Date;
        ToDate: Date;
        FromDateS: Text;
        ToDateS: Text;
        vend: Record Vendor;
        StartDate: Date;
        EndDAte: Date;
        EmailVerifier: Codeunit Payroll3;
        IsEmailValid: Boolean;
        PPayableSetup: Record "Procurement Setup";
        RequesterName: Text[100];
        RequesterEmail: Text[100];
        emailhdr: Text[100];
        CompanyDetails: Text[250];
        SupplierDetails: Text[1000];
        SenderMessage: Text[1000];
        ProcNote: Text[1000];
        LoginDetails: Text[1000];
        PortalUser: Record "Dynasoft Portal User";
        Password: Text[50];
        ActivationDetails: Text[1000];
        IFSPrebidAttendees: Record "Bid Opening Bidder Attendance";
        BidTabulationLine: Record "Bid Tabulation Line";
        BidLines: Record "Bid Tabulation Line";
        //cc
        SMTPMailSetup: Record "Email Account";
        SMTPMail: Codeunit "Email Message";
        Smail: Codeunit EMail;


    begin
        ///Notifying Procurement Team on supplier Request
        BidTabulationLine.Reset;
        BidTabulationLine.SetRange("Tabulation ID", BidTabulation.Code);
        BidTabulationLine.SetRange("Evaluation Committee Recomm", BidTabulationLine."evaluation committee recomm"::Unsuccesful);
        if BidTabulationLine.FindSet then begin
            repeat

                vend.Reset;
                vend.SetRange("No.", BidTabulationLine."Bidder No");
                if vend.FindSet then begin
                    /*BidopeningRegister.RESET;
                    BidopeningRegister.SETRANGE(Code,BidOpening.Code);*/

                    CompInfo.Get;
                    HRSetup.Get;
                    PPayableSetup.Get;

                    vend.TestField("E-Mail");
                    RequesterEmail := vend."E-Mail";
                    RequesterName := vend.Name;

                    Window.Open('Sending...');

                    WindowisOpen := true;


                    Counter := Counter + 1;

                    //Create message
                    if HRSetup."E-Mail" = '' then
                        Error('Please Contact the IT Admin to specify the E-mail address under Company Information Setup page!!');
                    SenderAddress := HRSetup."E-Mail";

                    if PPayableSetup."Default Proc Email Contact" = '' then
                        Error('Please Contact the IT Admin to specify the Procurement Manager E-mail address under Purchases&Payable Setup page!!');
                    CustEmail := PPayableSetup."Default Proc Email Contact";

                    CompanyDetails := 'Dear,  ' + RequesterName + '<BR>' + vend."No.";
                    SenderMessage := '<BR>Thank You for participating in the Tender (Reference No:' + BidTabulation.Code + ') Submitted on ' + Format(BidTabulation."Bid Opening Date") +
                    'as summarized below: </BR>';
                    SupplierDetails := '<BR>Tender invitation Notice No:' + BidTabulation."IFS Code" + '</BR>' + '<BR> Tender Name:' + BidTabulation."Tender Name" + '</BR>';
                    LoginDetails := '<BR> This is to notify you that the above mentioned tender was not successful and you have, Attached is the E-Regret Letter </BR>';


                    ProcNote := '<BR> If you require any assistance, please contact our Procurement team by Phone ' + HRSetup."Phone No." + ' or vendor support team via Email: ' + PPayableSetup."Default Proc Email Contact";
                    BidLines.Reset;
                    BidLines.SetRange("Tabulation ID", BidTabulation.Code);
                    BidLines.SetRange("Bidder No", BidTabulationLine."Bidder No");
                    if BidLines.FindSet then
                        FileDirectory := 'C:\DOCS\';
                    FileName := 'RegretLetter_' + BidTabulation.Code + '.pdf';
                    // //Report.SaveAsPdf(70116, FileDirectory + FileName, BidLines);


                    if CustEmail = '' then
                        exit;

                    //MESSAGE:='This is to notify you that there has been a request for Registration ' +  SupplierRequest."No." + ' From Supplier'+ SupplierRequest.Name;
                    emailhdr := 'Regret Letter (Reference No: ' + BidTabulation.Code + ')';
                    SMTPMail.Create('dennisonkyalo@dynasoft.co.ke', emailhdr, CompanyDetails + '<BR></BR>' + SenderMessage + SupplierDetails + LoginDetails + ActivationDetails, True);
                    //SMTPMail.Send();
                    Smail.Send(SMTPMail, Enum::"Email Scenario"::Default);

                    // //cu400.CreateMessage(CompInfo.Name, SenderAddress, RequesterEmail, emailhdr,
                    // //CompanyDetails + '<BR></BR>' + SenderMessage + SupplierDetails + LoginDetails + ActivationDetails, true);
                    // //cu400.AddAttachment(FileDirectory + FileName, FileName);
                    // /*IFSPrebidAttendees.RESET;
                    // IFSPrebidAttendees.SETRANGE("Vendor No.",vend."No.");
                    // IFSPrebidAttendees.SETRANGE(Code,BidOpening.Code);
                    // IF IFSPrebidAttendees.FINDSET THEN BEGIN
                    //   REPEAT
                    //   //cu400.AddCC(IFSPrebidAttendees."Representative Email");
                    //  IFSPrebidAttendees."Notified By Email":=TRUE;
                    // IFSPrebidAttendees."Date/Time Notified":=TODAY;
                    // IFSPrebidAttendees.MODIFY(TRUE);
                    //   UNTIL IFSPrebidAttendees.NEXT=0;
                    //   END;*/
                    // //cu400.AddCC(CustEmail);

                    // //cu400.AddBodyline(ProcNote);


                    // //cu400.Send;
                    SendingDate := Today;
                    SendingTime := Time;
                    /*BidTabulation.Notified:=TRUE;
                    BidTabulation."Date/Time Notified":=TODAY;
                    BidTabulation.MODIFY(TRUE);*/



                    Sleep(1000);
                    Window.Close;

                    //UNTIL vend.NEXT=0;
                end;

            until BidTabulationLine.Next = 0;
        end;

    end;


    procedure PostNOA(NOA: Record "Bid Tabulation Header")
    var
        Vendor: Record Vendor;
        BidOwner: Record "Bid Business Owner";
        VendBusinessOwner: Record "Vendor Business Owner";
        BidPreferences: Record "Bid Preference & Reservation";
        VendSpecialGroup: Record "Vendor Special Group Entry";
        BidLitigation: Record "Bid Litigation History";
        VendLitigation: Record "Vendor Litigation History";
        BidPastExperience: Record "Bid Past Experience";
        VendPastExperience: Record "Vendor Past Experience";
        BidAuditedBal: Record "Bid Audited Balance Sheet";
        VendAuditedBal: Record "Vendor Audited Balance Sheet";
        BidIncomeStat: Record "Bid Audited Income Statement";
        VendIncomeStat: Record "Vendor Audited Income Statemen";
        BidVendBankAccount: Record "Bid Vendor Bank Account";
        VendBankAccount: Record "Vendor Bank Account";
        BidKeyStaff: Record "Bid Key Staff";
        VendKeyStaff: Record "Vendor Professional Staff";
        BidKeyStaffQual: Record "Bid Key Staff Qualification";
        VendKeyStaffQual: Record "Vendor Staff Qualification";
        BidStaffExperience: Record "Bid Key Staff Experience";
        VendStaffExperience: Record "Vendor Staff Experience";
        Purch: Record "Purchase Header";
        CopyPurchDoc: Report "Copy Purchase Document";
        Purch2: Record "Purchase Header";
        PurchLines: Record "Purchase Line";
        PurchLines1: Record "Purchase Line";
        Purch3: Record "Purchase Header";
        IFS: Record "Standard Purchase Code";
        CompanyInfo: Record "Company Information";
        IFSLines: Record "Purchase Line";
        ContractSecurity: Record "Bid_Contract Security Register";
        BidContractSecurity: Record "Bid_Contract Security Register";
    begin
        //IF NOT ConfirmManagement.ConfirmProcess(Text001,TRUE) THEN
        //  EXIT;
        //if Contract
        //mtr
        conftxt := Confirm('Are you sure you want to Generate LPO/LSO or Contracts?');
        if Format(conftxt) = 'Yes' then begin
            optionselected := Dialog.StrMenu('Contract,LPO/LSO', 1, 'Do you want to Generate LPO or a Contract?');
            if optionselected = 2 then begin

                Vendor.Reset;
                Vendor.SetRange("No.", NOA."Awarded Bidder No.");
                if Vendor.FindSet then begin
                    Purch.Init;
                    Purch."Document Type" := Purch."document type"::Order;
                    Purch."Awarded Bid No" := NOA."Awarded Bid No";
                    //Purch."Awarded Bid No":=NOA."Awarded Bidder No.";
                    Purch."Award Tender Sum Inc Taxes" := NOA."Award Tender Sum Inc Taxes";
                    Purch."Invitation For Supply No" := NOA."IFS Code";
                    Purch.Validate("Buy-from Vendor No.", NOA."Awarded Bidder No.");
                    Purch."Building/House No" := Vendor."Building/House No";
                    Purch."Plot No" := Vendor."Plot No";
                    Purch.Street := Vendor.Street;
                    Purch."Nature of Business" := Vendor."Nature of Business";
                    Purch."Current Trade Licence No" := Vendor."Current Trade Licence No";
                    Purch."Trade Licence Expiry Date" := Vendor."Trade Licence Expiry Date";
                    Purch."Max Value of Business" := Vendor."Max Value of Business";
                    Purch."Preferred Bank Account Code" := Vendor."Preferred Bank Account Code";
                    Purch."Business Type" := Vendor."Business Type";
                    Purch."Nominal Capital LCY" := Vendor."Nominal Capital LCY";
                    Purch."Issued Capital LCY" := Vendor."Issued Capital LCY";
                    IFS.Reset;
                    IFS.SetRange(Code, NOA."IFS Code");
                    if IFS.FindSet then begin
                        //Purch.INIT;


                        Purch."Bid Envelope Type" := IFS."Bid Envelop Type";
                        Purch."Requisition No" := IFS."PRN No.";
                        Purch."Purchaser Code" := IFS."Purchaser Code";
                        Purch.Validate("Purchaser Code", IFS."Purchaser Code");
                        Purch."Procurement Plan ID" := IFS."Procurement Plan ID";
                        Purch."Procurement Plan Entry No" := IFS."Procurement Plan Entry No";
                        Purch."Tender Description" := IFS."Tender Summary";
                        Purch."Responsibility Center" := IFS."Responsibility Center";
                        Purch.Validate("Location Code", IFS."Location Code");
                        Purch."Language Code" := IFS."Language Code";
                        Purch.Validate("Purchaser Code", IFS."Purchaser Code");
                        Purch."Currency Code" := IFS."Currency Code";
                        Purch."IFS Code" := NOA."IFS Code";
                        Purch."Bid Charge Code" := IFS."Bid Charge Code";
                        Purch."Bid Charge (LCY)" := IFS."Bid Charge (LCY)";
                        Purch."Works Category" := IFS."Works Category";
                        Purch."Road Code" := IFS."Road Code";
                        Purch."Link Name" := IFS."Road Link Name";
                        Purch.Consitituency := IFS."Constituency ID";
                        Purch."Engineer Estimate (LCY)" := IFS."Engineer Estimate (LCY)";
                        //Purch."Max Works Completion Duration":=IFS."Max Works Completion Duration";
                        Purch."Max Works Kickoff Duration" := IFS."Max Works Kickoff Duration";
                        Purch."Max Works Charter Duration" := IFS."Max Works Charter Duration";
                        Purch.Validate("Payment Terms Code", IFS."Payment Terms Code");
                        //Purch."Defects Liability Period":=IFS."Defects Liability Period";
                        Purch."Daily Liquidated Dam Unit Cost" := IFS."Daily Liquidated Dam Unit Cost";
                        Purch."Liquidated Damages Limit %" := IFS."Liquidated Damages Limit %";
                        Purch."Payment Retention %" := IFS."Payment Retention %";
                        Purch."Retention Amount Limit %" := IFS."Retention Amount Limit %";
                        Purch."Min Interim Certificate Amount" := IFS."Min Interim Certificate Amount";
                    end;
                    CompanyInfo.Get;
                    Purch."Procuring Entity (PE) Name" := CompanyInfo.Name;


                    Purch."Contract Description" := NOA."Tender Name";
                    Purch."Contract Start Date" := NOA."Document Date";
                    Purch."Tender Name" := NOA."Tender Name";
                    Purch."Notice of Award No." := NOA.Code;



                    Purch.Insert(true);

                    /*Purch2.RESET;
                    Purch2.SETRANGE("No.",NOA."Awarded Bid No");
                    IF Purch2.FINDSET THEN BEGIN
                    Purch.COPY(NOA);
                     //Purch.VALIDATE("Invitation For Supply No",NOA."IFS Code");
                      Purch.MODIFY;
                      END;*/
                    //Commitments
                    //FnUncommitPRNNOA(NOA);
                    PurchLines.Reset;
                    PurchLines.SetRange("Document No.", Purch."No.");
                    if PurchLines.FindSet then begin
                        PurchLines.DeleteAll;
                    end;
                    IFSLines.Reset;
                    IFSLines.SetRange("Document No.", NOA."Awarded Bid No");
                    if IFSLines.FindSet then begin
                        repeat

                            PurchLines.Init;
                            PurchLines.TransferFields(IFSLines);
                            PurchLines."Document Type" := PurchLines."document type"::Order;
                            PurchLines."Document No." := Purch."No.";
                            PurchLines.Insert(true);
                        /*PurchLines.VALIDATE("Document Type",PurchLines."Document Type"::"Blanket Order");
                        PurchLines.VALIDATE("Document No.",Purch."No.");
                        PurchLines.VALIDATE("Line No.",IFSLines."Line No.");
                        PurchLines.VALIDATE(Type,IFSLines.Type);
                        PurchLines.VALIDATE("No.",IFSLines."No.");
                        PurchLines.VALIDATE(Description,IFSLines.Description);
                        PurchLines.VALIDATE(Quantity,IFSLines.Quantity);
                        PurchLines.VALIDATE("Unit of Measure Code",IFSLines."Unit of Measure Code");
                        PurchLines.VALIDATE("Shortcut Dimension 1 Code",IFSLines."Shortcut Dimension 1 Code");
                        PurchLines.VALIDATE("Shortcut Dimension 2 Code",IFSLines."Shortcut Dimension 2 Code");
                        //PurchLines.VALIDATE("Variant Code",IFSLines."Variant Code");
                        PurchLines.VALIDATE("Dimension Set ID",IFSLines."Dimension Set ID");
                        PurchLines.VALIDATE("Item Category",IFSLines."Item Category");
                        IF PurchLines.INSERT(TRUE) THEN BEGIN
                        PurchLines.VALIDATE("No.",IFSLines."No.");
                        PurchLines.MODIFY;
              END;*/

                        /* PurchLines.INIT;
                        PurchLines."Document Type":=PurchLines."Document Type"::"Blanket Order";
                         PurchLines."Document No.":=Purch."No.";
                         PurchLines."Line No.":=IFSLines."Line No.";
                         PurchLines."Buy-from Vendor No.":=Purch."Buy-from Vendor No.";
                         PurchLines.Type:=IFSLines.Type;
                         PurchLines."No.":=IFSLines."No.";
                         //PurchLines."Location Code":=IFSLines.
                         //PurchLines."Posting Group":=IFSLines
                         PurchLines.VALIDATE(Description,IFSLines.Description);
                         PurchLines."Description 2":=IFSLines.Description;
                         //PurchLines."Unit of Measure":=IFSLines."Unit of Measure Code";
                         //PurchLines.VALIDATE(PurchLines.Quantity,IFSLines.Quantity);
                         PurchLines.Quantity:=IFSLines.Quantity;
                         PurchLines.Amount:=IFSLines."Amount Excl. VAT";
                         PurchLines."Unit of Measure Code":=IFSLines."Unit of Measure Code";
                         PurchLines."Shortcut Dimension 1 Code":=IFSLines."Shortcut Dimension 2 Code";
                         PurchLines."Shortcut Dimension 2 Code":=IFSLines."Shortcut Dimension 2 Code";
                         PurchLines."Variant Code":=IFSLines."Variant Code";
                         PurchLines."Dimension Set ID":=IFSLines."Dimension Set ID";
                         PurchLines."Item Category":=IFSLines."Item Category";
                         PurchLines.INSERT(TRUE);*/

                        until IFSLines.Next = 0;
                    end;

                    //Contract securities
                    /*BidContractSecurity.RESET;
                    BidContractSecurity.SETRANGE("No.",NOA."Awarded Bid No");
                    IF BidContractSecurity.FINDSET THEN BEGIN
                    REPEAT
                    ContractSecurity.INIT;
                    ContractSecurity.TRANSFERFIELDS(BidContractSecurity);
                    ContractSecurity."No.":=Purch."No.";
                    ContractSecurity.INSERT(TRUE);
                    UNTIL BidContractSecurity.NEXT=0;
                    END;*/




                    //END;

                    Page.Run(50, Purch);
                end;
            end;
            if optionselected = 1 then begin
                //Mtr
                //if purchase order
                if NOA.Appealed = true then begin
                    Error('You cannot generate a contract, There is an ongoing Appeal Process');
                end;
                // if (NOA."Award Acceptance Response" > Today) or (NOA."Award Acceptance Response" <> Today) then begin
                //     Error('Acceptance Period has not lapsed, You can only generate a contract after the acceptance deadline');
                // end;
                fnchecktendersecurity(NOA);
                Vendor.Reset;
                Vendor.SetRange("No.", NOA."Awarded Bidder No.");
                if Vendor.FindSet then begin
                    Purch.Init;
                    Purch."Document Type" := Purch."document type"::"Blanket Order";
                    Purch."Awarded Bid No" := NOA."Awarded Bid No";
                    //Purch."Awarded Bid No":=NOA."Awarded Bidder No.";
                    Purch."Award Tender Sum Inc Taxes" := NOA."Award Tender Sum Inc Taxes";
                    Purch."Invitation For Supply No" := NOA."IFS Code";
                    Purch.Validate("Buy-from Vendor No.", NOA."Awarded Bidder No.");
                    Purch."Building/House No" := Vendor."Building/House No";
                    Purch."Plot No" := Vendor."Plot No";
                    Purch.Street := Vendor.Street;
                    Purch."Nature of Business" := Vendor."Nature of Business";
                    Purch."Current Trade Licence No" := Vendor."Current Trade Licence No";
                    Purch."Trade Licence Expiry Date" := Vendor."Trade Licence Expiry Date";
                    Purch."Max Value of Business" := Vendor."Max Value of Business";
                    Purch."Preferred Bank Account Code" := Vendor."Preferred Bank Account Code";
                    Purch."Business Type" := Vendor."Business Type";
                    Purch."Nominal Capital LCY" := Vendor."Nominal Capital LCY";
                    Purch."Issued Capital LCY" := Vendor."Issued Capital LCY";
                    IFS.Reset;
                    IFS.SetRange(Code, NOA."IFS Code");
                    if IFS.FindSet then begin
                        //Purch.INIT;


                        Purch."Bid Envelope Type" := IFS."Bid Envelop Type";
                        Purch."Tender Description" := IFS."Tender Summary";
                        Purch."Responsibility Center" := IFS."Responsibility Center";
                        Purch.Validate("Location Code", IFS."Location Code");
                        Purch."Language Code" := IFS."Language Code";
                        Purch.Validate("Purchaser Code", IFS."Purchaser Code");
                        Purch."Currency Code" := IFS."Currency Code";
                        Purch."IFS Code" := NOA."IFS Code";
                        Purch."Bid Charge Code" := IFS."Bid Charge Code";
                        Purch."Bid Charge (LCY)" := IFS."Bid Charge (LCY)";
                        Purch."Works Category" := IFS."Works Category";
                        Purch."Road Code" := IFS."Road Code";
                        Purch."Link Name" := IFS."Road Link Name";
                        Purch.Consitituency := IFS."Constituency ID";
                        Purch."Engineer Estimate (LCY)" := IFS."Engineer Estimate (LCY)";
                        //Purch."Max Works Completion Duration":=IFS."Max Works Completion Duration";
                        Purch."Max Works Kickoff Duration" := IFS."Max Works Kickoff Duration";
                        Purch."Max Works Charter Duration" := IFS."Max Works Charter Duration";
                        Purch.Validate("Payment Terms Code", IFS."Payment Terms Code");
                        //Purch."Defects Liability Period":=IFS."Defects Liability Period";
                        Purch."Daily Liquidated Dam Unit Cost" := IFS."Daily Liquidated Dam Unit Cost";
                        Purch."Liquidated Damages Limit %" := IFS."Liquidated Damages Limit %";
                        Purch."Payment Retention %" := IFS."Payment Retention %";
                        Purch."Retention Amount Limit %" := IFS."Retention Amount Limit %";
                        Purch."Min Interim Certificate Amount" := IFS."Min Interim Certificate Amount";
                    end;
                    CompanyInfo.Get;
                    Purch."Procuring Entity (PE) Name" := CompanyInfo.Name;


                    Purch."Contract Description" := NOA."Tender Name";
                    Purch."Contract Start Date" := NOA."Document Date";
                    Purch."Tender Name" := NOA."Tender Name";
                    Purch."Notice of Award No." := NOA.Code;



                    Purch.Insert(true);

                    /*Purch2.RESET;
                    Purch2.SETRANGE("No.",NOA."Awarded Bid No");
                    IF Purch2.FINDSET THEN BEGIN
                    Purch.COPY(NOA);
                     //Purch.VALIDATE("Invitation For Supply No",NOA."IFS Code");
                      Purch.MODIFY;
                      END;*/
                    //Commitments
                    //FnUncommitPRNNOA(NOA);
                    PurchLines.Reset;
                    PurchLines.SetRange("Document No.", Purch."No.");
                    if PurchLines.FindSet then begin
                        PurchLines.DeleteAll;
                    end;
                    IFSLines.Reset;
                    IFSLines.SetRange("Document No.", NOA."Awarded Bid No");
                    if IFSLines.FindSet then begin
                        repeat

                            PurchLines.Init;
                            PurchLines.TransferFields(IFSLines);
                            PurchLines."Document Type" := PurchLines."document type"::"Blanket Order";
                            PurchLines."Document No." := Purch."No.";
                            PurchLines.Insert(true);
                        /*PurchLines.VALIDATE("Document Type",PurchLines."Document Type"::"Blanket Order");
                        PurchLines.VALIDATE("Document No.",Purch."No.");
                        PurchLines.VALIDATE("Line No.",IFSLines."Line No.");
                        PurchLines.VALIDATE(Type,IFSLines.Type);
                        PurchLines.VALIDATE("No.",IFSLines."No.");
                        PurchLines.VALIDATE(Description,IFSLines.Description);
                        PurchLines.VALIDATE(Quantity,IFSLines.Quantity);
                        PurchLines.VALIDATE("Unit of Measure Code",IFSLines."Unit of Measure Code");
                        PurchLines.VALIDATE("Shortcut Dimension 1 Code",IFSLines."Shortcut Dimension 1 Code");
                        PurchLines.VALIDATE("Shortcut Dimension 2 Code",IFSLines."Shortcut Dimension 2 Code");
                        //PurchLines.VALIDATE("Variant Code",IFSLines."Variant Code");
                        PurchLines.VALIDATE("Dimension Set ID",IFSLines."Dimension Set ID");
                        PurchLines.VALIDATE("Item Category",IFSLines."Item Category");
                        IF PurchLines.INSERT(TRUE) THEN BEGIN
                        PurchLines.VALIDATE("No.",IFSLines."No.");
                        PurchLines.MODIFY;
              END;*/

                        /* PurchLines.INIT;
                        PurchLines."Document Type":=PurchLines."Document Type"::"Blanket Order";
                         PurchLines."Document No.":=Purch."No.";
                         PurchLines."Line No.":=IFSLines."Line No.";
                         PurchLines."Buy-from Vendor No.":=Purch."Buy-from Vendor No.";
                         PurchLines.Type:=IFSLines.Type;
                         PurchLines."No.":=IFSLines."No.";
                         //PurchLines."Location Code":=IFSLines.
                         //PurchLines."Posting Group":=IFSLines
                         PurchLines.VALIDATE(Description,IFSLines.Description);
                         PurchLines."Description 2":=IFSLines.Description;
                         //PurchLines."Unit of Measure":=IFSLines."Unit of Measure Code";
                         //PurchLines.VALIDATE(PurchLines.Quantity,IFSLines.Quantity);
                         PurchLines.Quantity:=IFSLines.Quantity;
                         PurchLines.Amount:=IFSLines."Amount Excl. VAT";
                         PurchLines."Unit of Measure Code":=IFSLines."Unit of Measure Code";
                         PurchLines."Shortcut Dimension 1 Code":=IFSLines."Shortcut Dimension 2 Code";
                         PurchLines."Shortcut Dimension 2 Code":=IFSLines."Shortcut Dimension 2 Code";
                         PurchLines."Variant Code":=IFSLines."Variant Code";
                         PurchLines."Dimension Set ID":=IFSLines."Dimension Set ID";
                         PurchLines."Item Category":=IFSLines."Item Category";
                         PurchLines.INSERT(TRUE);*/

                        until IFSLines.Next = 0;
                    end;

                    //Contract securities
                    /*BidContractSecurity.RESET;
                    BidContractSecurity.SETRANGE("No.",NOA."Awarded Bid No");
                    IF BidContractSecurity.FINDSET THEN BEGIN
                    REPEAT
                    ContractSecurity.INIT;
                    ContractSecurity.TRANSFERFIELDS(BidContractSecurity);
                    ContractSecurity."No.":=Purch."No.";
                    ContractSecurity.INSERT(TRUE);
                    UNTIL BidContractSecurity.NEXT=0;
                    END;*/




                    //END;

                    Page.Run(75284, Purch);
                end;
            end;
        end;
        Message(Text002, Purch."No.");

    end;


    procedure UnsealFinancialBid(BidOpeningRegister: Record "Bid Opening Register")
    var
        IFSDetails: Record "Standard Vendor Purchase Code";
        BidOpeningLines: Record "Bid Opening Register Line";
        Bids: Record "Purchase Header";
        BidsSecurity: Record "Bid_Contract Security Register";
    begin
        BidOpeningRegister.TestField("Opening Person 1");
        BidOpeningRegister.TestField("Opening Person 2");
        BidOpeningRegister.TestField("Opening Person 3");
        //BidOpeningRegister.TESTFIELD("Opening Person 4");
        //BidOpeningRegister.TESTFIELD("Opening Person 5");
        Bids.Reset;
        Bids.SetRange("Invitation For Supply No", BidOpeningRegister."IFS Code");
        Bids.SetRange("Document Type", Bids."document type"::Quote);
        Bids.SetRange("Passed Tech Evaluation", true);
        if Bids.FindSet then begin
            repeat


                BidOpeningLines.Reset;
                BidOpeningLines.SetRange("Bid No.", Bids."No.");
                BidOpeningLines.SetRange("IFS Code", BidOpeningRegister."IFS Code");
                BidOpeningLines.SetRange(Code, BidOpeningRegister.Code);
                if not BidOpeningLines.FindSet then begin
                    BidOpeningLines.Init;
                    BidOpeningLines.Code := BidOpeningRegister.Code;
                    BidOpeningLines."Vendor No." := Bids."Buy-from Vendor No.";
                    BidOpeningLines."IFS Code" := BidOpeningRegister."IFS Code";
                    BidOpeningLines."Bidder Name" := Bids."Buy-from Vendor Name";
                    BidOpeningLines."Bid No." := Bids."No.";
                    BidOpeningLines."External Bid Reference No" := BidOpeningRegister."IFS Code";
                    BidsSecurity.Reset;
                    BidsSecurity.SetRange("No.", Bids."No.");
                    if BidsSecurity.FindSet then begin
                        if BidsSecurity."Security Amount (LCY)" > 0 then
                            BidOpeningLines."Valid Bid Security Provided" := true;
                        BidOpeningLines."Bid Security Issuer" := BidsSecurity."Issuer/Guarantor Name";
                        BidOpeningLines."Bid Security Amount (LCY)" := BidsSecurity."Security Amount (LCY)";
                        //MESSAGE('%1 %2',BidsSecurity."Security Amount (LCY)",BidsSecurity."Issuer/Guarantor Name");
                        if BidOpeningLines."Bid Security Amount (LCY)" >= BidsSecurity."Security Amount (LCY)" then
                            BidOpeningLines."Bid Security Amount Pass" := true
                        else
                            BidOpeningLines."Bid Security Amount Pass" := false;
                    end;
                    Bids.CalcFields(Bids."Amount Including VAT");
                    BidOpeningLines."Total Tender Price (LCY)" := Bids."Amount Including VAT";
                    //BidOpeningLines."Complete Bid Doc Submitted":=
                    //BidOpeningLines."Late Bid":=
                    // BidOpeningLines."Late Bid Submission Time":=
                    BidOpeningLines."Bid Withdrawal Notice No." := Bids."Withdrawal Notice No";
                    //BidOpeningLines."Bid Modification Notice No.":=Bids.bid
                    BidOpeningLines."Bid Withdrawal Notice No." := Bids."Withdrawal Notice No";
                    if BidOpeningLines."Bid Modification Notice No." <> '' then
                        BidOpeningLines."Bid Modification Exists" := true
                    else
                        BidOpeningLines."Bid Modification Exists" := false;
                    if BidOpeningLines."Bid Withdrawal Notice No." <> '' then
                        BidOpeningLines."Bid Withdrawal Exists" := true
                    else
                        BidOpeningLines."Bid Withdrawal Exists" := false;
                    //BidOpeningLines."Final Bid Opening Result":=
                    //BidOpeningLines."Tender Opening Com Remarks":=
                    BidOpeningLines.Insert(true);

                end;

            until Bids.Next = 0;
        end;
        /*BidOpeningRegister.Posted:=TRUE;
        BidOpeningRegister."Posted By":=USERID;
        BidOpeningRegister."Posted Date":=TODAY;*/

    end;


    procedure FnSendSecretCodeOnIFSBidOpening(IFS: Record "Bid Opening Register")
    var
        SupplierReq: Record Contact;
        LastFieldNo: Integer;
        FooterPrinted: Boolean;
        FileDirectory: Text[100];
        FileName: Text[100];
        SMTPMail: Codeunit "Email Message";
        ReportID: Integer;
        // //"Object": Record "Object";
        Window: Dialog;
        RunOnceFile: Text[1000];
        TimeOut: Integer;
        Customer2: Record Customer;
        Cust: Record Customer;
        cr: Integer;
        lf: Integer;
        EmailBody: array[2] of Text[30];
        BodyText: Text[250];
        mymail: Codeunit Mail;
        DefaultPrinter: Text[200];
        WindowisOpen: Boolean;
        FileDialog: Codeunit Mail;
        SendingDate: Date;
        SendingTime: Time;
        Counter: Integer;
        cu400: Codeunit Mail;
        DocLog: Record "Document E-mail Log";
        BranchName: Code[80];
        DimValue: Record "Dimension Value";
        SenderAddress: Text[100];
        CustEmail: Text[100];
        UserSetup: Record "User Setup";
        HRSetup: Record "Company Information";
        Emp: Record Vendor;
        PayrollMonth: Date;
        PayrollMonthText: Text[30];
        PayPeriodtext: Text;
        PayPeriod: Record "Payroll PeriodX";
        CompInfo: Record "Company Information";
        DateFilter: Text;
        FromDate: Date;
        ToDate: Date;
        FromDateS: Text;
        ToDateS: Text;
        vend: Record Vendor;
        StartDate: Date;
        EndDAte: Date;
        EmailVerifier: Codeunit Payroll3;
        IsEmailValid: Boolean;
        PPayableSetup: Record "Procurement Setup";
        RequesterName: Text[100];
        RequesterEmail: Text[100];
        emailhdr: Text[100];
        CompanyDetails: Text[250];
        SupplierDetails: Text[1000];
        SenderMessage: Text[1000];
        ProcNote: Text[1000];
        LoginDetails: Text[1000];
        PortalUser: Record "Dynasoft Portal User";
        Password: Text[50];
        ActivationDetails: Text[1000];
        RandomDigit: Text[50];
        IFSCommitteMembers: Record "Bid Opening Tender Committee";
        IFSTenderCommitte: Record "IFS Tender Committee";
        EvaluationRegister: Record "Bid Evaluation Register";
        TxtDefaultCCMailList: List of [Text];
        TxtDefaultBCCMailList: List of [Text];
        TxtReceipientsList: List of [Text];
        AttachmentTempBlob: Codeunit "Temp Blob";
        AttachmentIntStream: instream;
        FileMgt: Codeunit "File Management";
        SMTPMailSetup: Record "Email Account";
        SMTPMail1: Codeunit "Email Message";
        Smail: Codeunit EMail;
        HumanResourcesSetup: Record "Human Resources Setup";
        SenderName: Text[250];
        SenderEmailAddress: Text[250];
        Receipients: text[30];///// List of [Text];
        Subject: Text[250];
        Body: Text;
        Employee: Record Employee;
        ImprestNotificationsSetup: Record "Imprest Notifications Setup";
        InsuranceNotifications: Codeunit "Insurance Notifications";
        //Smail: Codeunit EMail;
        Safari: record "Project Members";
        RandomNumber: Integer;
        Regards: Text;
    // Body: Text;
    begin
        ///Notifying Procurement Team on supplier Request
        IFSCommitteMembers.Reset();
        IFSCommitteMembers.SetRange("Document No.", IFS.Code);
        if IFSCommitteMembers.FindSet() then begin
            repeat
                RequesterEmail := '';
                RequesterName := '';
                ifscode := '';
                tendername := '';
                Password := '';
                RandomDigit := '';
                SenderAddress := '';
                CompanyDetails := '';
                SenderMessage := '';
                emailhdr := '';
                ActivationDetails := '';
                Body := '';
                Regards := '';
                if IFSCommitteMembers."Nominated Bid Opening" = IFSCommitteMembers."Nominated Bid Opening"::" " then
                    Error('Please nominate the member %1 for bid opening to proceed', IFSCommitteMembers."Member Name");
                CompInfo.Get;
                HRSetup.Get;
                PPayableSetup.Get;
                //MESSAGE('IFSCommitteMembers."Document No." %1 and IFS.Code %2',IFSCommitteMembers."Document No.",IFS.Code);

                /*UserSetup.RESET;
                UserSetup.SETRANGE("User ID",User1);
                IF UserSetup.FINDSET THEN*/
                RequesterEmail := IFSCommitteMembers.Email;
                RequesterName := IFSCommitteMembers."Member Name";
                ifscode := IFSCommitteMembers."IFS Code";
                tendername := IFS."Tender Name";

                Window.Open('Sending...');
                WindowisOpen := true;

                Counter := Counter + 1;
                RandomNumber := 0;
                Case IFSCommitteMembers."Nominated Bid Opening" of
                    IFSCommitteMembers."nominated bid opening"::"Member 1":
                    begin
                            RandomDigit := CreateGuid;
                            RandomDigit := DelChr(RandomDigit, '=', '{}-01');
                            RandomDigit := CopyStr(RandomDigit, 1, 8);
                            Password := RandomDigit;
                        IFSCommitteMembers."Opening Person 1" := Password;
                            IFSCommitteMembers."Opening Code" := Password;
                    end;    
                    IFSCommitteMembers."nominated bid opening"::"Member 2 ":
                        begin
                            RandomDigit := CreateGuid;
                            RandomDigit := DelChr(RandomDigit, '=', '{}-01');
                            RandomDigit := CopyStr(RandomDigit, 1, 8);
                            Password := RandomDigit;
                            IFSCommitteMembers."Opening Person 2" := Password;
                            IFSCommitteMembers."Opening Code" := Password;
                        end;
                    IFSCommitteMembers."nominated bid opening"::"Member 3":
                      begin
                         RandomDigit := CreateGuid;
                            RandomDigit := DelChr(RandomDigit, '=', '{}-01');
                            RandomDigit := CopyStr(RandomDigit, 1, 8);
                            Password := RandomDigit;
                          IFSCommitteMembers."Opening Person 3" := Password;
                            IFSCommitteMembers."Opening Code" := Password;
                      end;
                    IFSCommitteMembers."nominated bid opening"::"Member 4":
                        begin
                             RandomDigit := CreateGuid;
                            RandomDigit := DelChr(RandomDigit, '=', '{}-01');
                            RandomDigit := CopyStr(RandomDigit, 1, 8);
                            Password := RandomDigit;
                            IFSCommitteMembers."Opening Person 4" := Password;
                            IFSCommitteMembers."Opening Code" := Password;
                        end;
                    IFSCommitteMembers."nominated bid opening"::"Member 5":
                        begin
                            RandomDigit := CreateGuid;
                            RandomDigit := DelChr(RandomDigit, '=', '{}-01');
                            RandomDigit := CopyStr(RandomDigit, 1, 8);
                            Password := RandomDigit;
                            IFSCommitteMembers."Opening Person 5" := Password;
                            IFSCommitteMembers."Opening Code" := Password;
                        end;
                End;

                //Create message
                if HRSetup."E-Mail" = '' then
                    Error('Please Contact the IT Admin to specify the E-mail address under Company Information Setup page!!');
                SenderAddress := HRSetup."E-Mail";
                CompanyDetails := 'Dear Sir/Madam,';

                LoginDetails := '<BR>Secret Code:' + Password + '</BR>';
                ActivationDetails := '<BR>Member Nomination :' + Format(IFSCommitteMembers."Nominated Bid Opening") + '</BR>' +
                 '<Br>';
                Regards := 'Kind Regards, </BR>' + CompInfo.Name;
                SenderMessage := '<BR>Please find below system Generated Bid Opening Secret code to be used in the Tender Opening Process for Tender Number:<B>' + ifscode + ':' + tendername + '</B></BR>'
                + ActivationDetails + '</B></BR>' + LoginDetails + Regards;

                emailhdr := 'Bid Opening (Tender No:' + IFS."IFS Code" + ')';

                Body := CompanyDetails + '</BR>' + SenderMessage + SupplierDetails;
                EmailMsg.Create(RequesterEmail, emailhdr, Body, true);

                //SMTPMail1.Create(RequesterEmail, emailhdr, SenderMessage, TRUE);
                Smail.Send(EmailMsg);
               
                SendingDate := Today;
                SendingTime := Time;
                IFSCommitteMembers."Sent Datetime" := CurrentDateTime;
                IFSCommitteMembers."Code Sent" := true;
                //Sleep(1000);
                Window.Close;
                //IFS."Sent Cancellation Secret Code":=Password;
                IFSCommitteMembers.Modify();
            until IFSCommitteMembers.Next() = 0;
        end;

    end;

    /*
    var
        TxtDefaultCCMailList: List of [Text];
        TxtDefaultBCCMailList: List of [Text];
        TxtReceipientsList: List of [Text];
        AttachmentTempBlob: Codeunit "Temp Blob";
        AttachmentIntStream: instream;
        FileMgt: Codeunit "File Management";

    begin
        TxtReceipientsList.Add('Charlescheptumo@dynasoft.co.ke');
        TxtDefaultCCMailList.Add('mohancharlz@gmail.com');
        TxtDefaultBCCMailList.Add('');

        EmailMsg.Create(TxtReceipientsList, 'This is a test', 'Alaaaaaaaaaaaaa', false, TxtDefaultCCMailList,
            TxtDefaultBCCMailList
        );
        /* 
        //Attachment
        FileMgt.BLOBImportFromServerFile(
            AttachmentTempBlob,
            'C:\DATABASE\AL\Picture6.pdf'
        );
        AttachmentTempBlob.CreateInStream(AttachmentIntStream);
        //attachment Function
        emailMsg.AddAttachment(
            'Picture6.pdf',
            'Pdf',
         AttachmentIntStream
        );
         
        

        EmailObj.Send(EmailMsg, Enum::"Email Scenario"::"Sales Invoice");
    end;
    */


    procedure SuggestPlannedPPSchedule(ProcPlan: Record "Procurement Plan")
    var
        PPPurchaseActivitySchedule: Record "PP Purchase Activity Schedule";
        PPActivities: Record "Procurement Activity Code";
        PPLines: Record "Procurement Plan Lines";
        LineNo: Integer;
    begin
        PPPurchaseActivitySchedule.Reset;
        if PPPurchaseActivitySchedule.FindLast then
            LineNo := PPPurchaseActivitySchedule."Line no";
        PPLines.Reset;
        PPLines.SetRange("Procurement Plan ID", ProcPlan.Code);
        if PPLines.FindSet then begin
            repeat
                with PPActivities do begin
                    PPPurchaseActivitySchedule.Init;
                    PPPurchaseActivitySchedule."Procurement Plan ID" := PPLines."Procurement Plan ID";
                    PPPurchaseActivitySchedule."PP Entry" := PPLines."PP Line No";
                    PPPurchaseActivitySchedule."Planning Category" := PPLines."Planning Category";
                    PPPurchaseActivitySchedule."Line no" := LineNo + 1;
                    PPPurchaseActivitySchedule."Procurement Method" := PPLines."Procurement Method";
                    PPPurchaseActivitySchedule."Activity Code" := PPActivities."Activity Code";
                    PPPurchaseActivitySchedule."Solicitation Type" := PPLines."Solicitation Type";
                    PPPurchaseActivitySchedule."Activity Description" := PPActivities.Description;
                    PPPurchaseActivitySchedule.Insert(true);
                    LineNo += 1;
                end;

            until PPLines.Next = 0;
        end;
    end;


    procedure PostToConsolidatedPlan(Plan: Record "Procurement Plan")
    var
        PPEntry: Record "Procurement Plan Entry";
        FPPEntry: Record "Procurement Plan Entry";
        ProcurementPlanLines: Record "Procurement Plan Lines";
        LineNo: Integer;
        PPProcurementLines: Record "Procurement Plan Lines";
        LineNo1: Integer;
    begin
        Plan.Testfield(Consolidated,false);
        Plan.Testfield("Approval Status",Plan."Approval Status"::Released);
        Plan.TestField(Description);
                        Plan.TestField("Financial Budget ID");
                        Plan.TestField("Financial Year Code");
                        Plan.TestField("Start Date");
                        Plan.TestField("End Date");
        if not ConfirmManagement.GetResponseOrDefault(Text001, true) then
            exit;
        ProcurementPlanLines.Reset;
        if ProcurementPlanLines.FindLast then
            LineNo := ProcurementPlanLines."PP Line No" + 1;

        ProcurementPlanLines.Reset;
        ProcurementPlanLines.SetRange("Procurement Plan ID", Plan.Code);
        if ProcurementPlanLines.FindSet then begin
            repeat
                PPProcurementLines.Reset;
                PPProcurementLines.SetRange("Planning Category", ProcurementPlanLines."Planning Category");
                PPProcurementLines.SetRange("Procurement Plan ID", Plan."Consolidated Procurement Plan");
                if not PPProcurementLines.FindSet then begin

                    PPProcurementLines.Init;
                    PPProcurementLines.TransferFields(ProcurementPlanLines);
                    PPProcurementLines."Procurement Plan ID" := Plan."Consolidated Procurement Plan";
                    PPProcurementLines."PP Line No" := 0;
                    PPProcurementLines.Insert(true);
                    LineNo += 1;
                end;

            until ProcurementPlanLines.Next = 0;
        end;

        LineNo1 := 0;
        FPPEntry.Reset;
        if FPPEntry.FindLast then
            LineNo1 := FPPEntry."Entry No.";


        FPPEntry.Reset;
        FPPEntry.SetRange("Procurement Plan ID", Plan.Code);
        FPPEntry.SetRange(Posted, false);
        if FPPEntry.FindSet then begin
            repeat
                /*ProcurementPlanLines.RESET;
                ProcurementPlanLines.SETRANGE("Procurement Plan ID",Plan."Consolidated Procurement Plan");
                ProcurementPlanLines.SETRANGE("Planning Category",FPPEntry."Planning Category");
                IF NOT ProcurementPlanLines.FINDSET THEN BEGIN
                ProcurementPlanLines.INIT;
                ProcurementPlanLines.TRANSFERFIELDS(FPPEntry);
                ProcurementPlanLines."Procurement Plan ID":=Plan."Consolidated Procurement Plan";
                ProcurementPlanLines.INSERT(TRUE);

                ProcurementPlanLines.VALIDATE(ProcurementPlanLines."Procurement Plan ID",FPPEntry."Procurement Plan ID");
                ProcurementPlanLines."PP Line No":=LineNo+1;
                ProcurementPlanLines.VALIDATE("Planning Category",FPPEntry."Planning Category");
                ProcurementPlanLines.VALIDATE("Procurement Type",FPPEntry."Procurement Type");
                ProcurementPlanLines.VALIDATE("Procurement Method",FPPEntry."Procurement Method");
                ProcurementPlanLines.VALIDATE("Primary Source of Funds",FPPEntry."Funding Source ID");
                ProcurementPlanLines.VALIDATE("Solicitation Type",FPPEntry."Solicitation Type");
                 ProcurementPlanLines.INSERT(TRUE);
                 LineNo+=1;
                 END;*/
                PPEntry.Init;
                PPEntry.TransferFields(FPPEntry);
                PPEntry."Procurement Plan ID" := Plan."Consolidated Procurement Plan";
                PPEntry."Entry No." := 0;
                PPEntry.Insert(true);
                LineNo1 += 1;
            until FPPEntry.Next = 0;   
        end;
         Plan.Consolidated :=true;
            if Plan.modify() then
            Message('Posted Successfully');

    end;


    procedure PostDueDiligienceEvaluation(EvaluationHeader: Record "Bid Evaluation Register")
    var
        Bidevaluationscore: Record "Bid Evaluation Score Entry";
        BidSCoreGuide: Record "Bid Score Requirement";
        LineNo: Integer;
        IFSDetails: Record "Standard Vendor Purchase Code";
        ProcuremnetSetup: Record "Procurement Setup";
        IFS: Record "Standard Purchase Code";
        Bids: Record "Purchase Header";
    begin

        //if not ConfirmManagement.ConfirmProcess(Text001, true) then
        //exit;
        EvaluationHeader.TestField("IFS Code");
        EvaluationHeader.TestField("Bid No.");
        EvaluationHeader.TestField("Evaluation Date");
        EvaluationHeader.TestField("Evaluation Lead");
        //EvaluationHeader.TESTFIELD("Due Diligence Report ID");


        EvaluationHeader.Posted := true;
        EvaluationHeader."Posted By" := UserId;
        EvaluationHeader."Posted Date" := Today;
        EvaluationHeader."Due Dilgence Date" := EvaluationHeader."Evaluation Date";
        Bids.Reset;
        Bids.SetRange("No.", EvaluationHeader."Bid No.");
        Bids.SetRange("IFS Code", EvaluationHeader."IFS Code");
        if Bids.FindSet then begin
            EvaluationHeader.CalcFields(EvaluationHeader."Due Diligence Rating");
            Bids."Due Dilgence Date" := EvaluationHeader."Evaluation Date";
            Bids."Due Diligence Rating" := Format(EvaluationHeader."Due Diligence Rating");
            Bids."Due Diligence Report ID" := EvaluationHeader."Due Diligence Report ID";
            Bids."Due Diligence Voucher" := EvaluationHeader.Code;
            Bids.Modify(true);
        end;

        IFSDetails.Reset;
        IFSDetails.SetRange(Code, EvaluationHeader."IFS Code");
        IFSDetails.SetRange("Vendor No.", EvaluationHeader."Vendor No.");
        if IFSDetails.FindSet then begin
            IFSDetails."Due Dilgence Date" := EvaluationHeader."Evaluation Date";
            IFSDetails."Due Diligence Rating" := Format(EvaluationHeader."Due Diligence Rating");
            IFSDetails."Due Diligence Report ID" := EvaluationHeader."Due Diligence Report ID";
            IFSDetails."Due Diligence Voucher" := EvaluationHeader.Code;
            IFSDetails.Modify(true);
        end;


        /*ProcuremnetSetup.GET;
        IF ProcuremnetSetup."Notify Committe Members"=TRUE THEN
        FnSendBidEvaluationNotification(EvaluationHeader);*/

        IFS.Reset;
        IFS.SetRange(Code, EvaluationHeader."IFS Code");
        if IFS.FindSet then begin
            IFS."Document Status" := IFS."document status"::Evaluation;
            IFS.Modify;
        end;
        Message('Submitted Successfully');

    end;


    procedure SuggestPreliminaryEvaluationEntries(EvaluationHeader: Record "Bid Evaluation Register")
    var
        Bidevaluationscore: Record "Bid Evaluation Score Entry";
        BidSCoreGuide: Record "Bid Evaluation Score Entry";
        LineNo: Integer;
        BidScore: Record "Bid Score Guide";
        BidEvaluationCriteria: Record "Bid Evaluation Criteria Group";
        EvaluationCriteria: Record "Bid Score Criteria Group";
        BidEvalScore: Record "Bid Evaluation Score Guide";
        BidEvalHeader: Record "Bid Evaluation Register";
        EvaluationFindings: Code[50];
        EvaluationResults: Boolean;
    begin
        EvaluationHeader.TestField("Bid Scoring Document No.");



        Bidevaluationscore.Reset;
        if Bidevaluationscore.FindLast then
            LineNo := Bidevaluationscore."Line No";

        Bidevaluationscore.Reset;
        Bidevaluationscore.SetRange("Bid Scoring Document No.", EvaluationHeader."Bid Scoring Document No.");
        Bidevaluationscore.SetRange(Code, EvaluationHeader.Code);
        if Bidevaluationscore.FindSet then begin
            Bidevaluationscore.DeleteAll;
        end;

        BidEvaluationCriteria.Reset;
        BidEvaluationCriteria.SetRange("Template ID", EvaluationHeader."Bid Scoring Document No.");
        BidEvaluationCriteria.SetRange("Document No", EvaluationHeader.Code);
        if BidEvaluationCriteria.FindSet then begin
            BidEvaluationCriteria.DeleteAll;
        end;

        BidEvalScore.Reset;
        BidEvalScore.SetRange("Template ID", EvaluationHeader."Bid Scoring Document No.");
        BidEvalScore.SetRange("Document No", EvaluationHeader.Code);
        if BidEvalScore.FindSet then begin
            BidEvalScore.DeleteAll;
        end;
        //check for different values
        BidEvalHeader.Reset;
        BidEvalHeader.SetRange("IFS Code", EvaluationHeader."IFS Code");
        BidEvalHeader.SetRange("Evaluation Type", EvaluationHeader."Evaluation Type");
        BidEvalHeader.SetFilter(Code, '<>%1', EvaluationHeader.Code);
        BidEvalHeader.SetRange("Bid No.", EvaluationHeader."Bid No.");
        BidEvalHeader.SetRange("Vendor No.", EvaluationHeader."Vendor No.");
        if BidEvalHeader.FindSet then begin
            repeat
                BidSCoreGuide.Reset;
                BidSCoreGuide.SetRange(Code, BidEvalHeader.Code);
                if BidSCoreGuide.FindSet then begin
                    repeat
                        Bidevaluationscore.Reset;
                        Bidevaluationscore.SetRange("Requirement ID", BidSCoreGuide."Requirement ID");
                        Bidevaluationscore.SetRange(Code, EvaluationHeader.Code);
                        if not Bidevaluationscore.FindSet then begin
                            Bidevaluationscore.Init;
                            Bidevaluationscore.TransferFields(BidSCoreGuide);
                            Bidevaluationscore.Code := EvaluationHeader.Code;
                            Bidevaluationscore."Bid No." := EvaluationHeader."Bid No.";
                            Bidevaluationscore."Vendor No." := EvaluationHeader."Vendor No.";
                            Bidevaluationscore."Bid Scoring Document No." := EvaluationHeader."Bid Scoring Document No.";
                            Bidevaluationscore."Response Value" := BidSCoreGuide."Response Value";
                            Bidevaluationscore.Insert(true);
                            EvaluationFindings := Bidevaluationscore."Response Value";
                            EvaluationResults := ReturnValue(Bidevaluationscore);
                            if EvaluationResults = false then begin
                                Bidevaluationscore."Response Value" := '';
                                Bidevaluationscore.Modify(true);
                            end;
                        end;
                        Bidevaluationscore.Reset;
                        Bidevaluationscore.SetRange("Requirement ID", BidSCoreGuide."Requirement ID");
                        Bidevaluationscore.SetRange(Code, EvaluationHeader.Code);
                        if Bidevaluationscore.FindSet then begin
                            //Bidevaluationscore.INIT;
                            //Bidevaluationscore.TRANSFERFIELDS(BidSCoreGuide);
                            //Bidevaluationscore.Code:=EvaluationHeader.Code;
                            ///Bidevaluationscore."Bid No.":=EvaluationHeader."Bid No.";
                            // Bidevaluationscore."Vendor No.":=EvaluationHeader."Vendor No.";
                            //Bidevaluationscore."Bid Scoring Document No.":=EvaluationHeader."Bid Scoring Document No.";
                            Bidevaluationscore."Score %" := (Bidevaluationscore."Score %" + BidSCoreGuide."Score %") / 2;
                            Bidevaluationscore.Validate(Bidevaluationscore."Score %");

                            Bidevaluationscore.Modify;
                            EvaluationFindings := Bidevaluationscore."Response Value";
                            EvaluationResults := ReturnValue(Bidevaluationscore);

                            /*IF Bidevaluationscore."Response Value"=BidSCoreGuide."Response Value" THEN
                              BEGIN
                                Bidevaluationscore.VALIDATE(Bidevaluationscore."Response Value",'');
                                Bidevaluationscore.MODIFY(TRUE);
                              END;*/
                        end;

                        LineNo += 1;
                    until BidSCoreGuide.Next = 0;
                end;
            until BidEvalHeader.Next = 0;
        end;
        /*
        //add bid evaluation criteria
        EvaluationCriteria.RESET;
        EvaluationCriteria.SETRANGE("Template ID",EvaluationHeader."Bid Scoring Document No.");
        EvaluationCriteria.SETRANGE("Evaluation Type",EvaluationHeader."Evaluation Type");
        IF EvaluationCriteria.FINDSET THEN BEGIN
          REPEAT
            BidEvaluationCriteria.INIT;
            BidEvaluationCriteria."Template ID":=EvaluationCriteria."Template ID";
            BidEvaluationCriteria."Criteria Group ID":=EvaluationCriteria."Criteria Group ID";
            BidEvaluationCriteria."Document No":=EvaluationHeader.Code;
            BidEvaluationCriteria."Evaluation Type":=EvaluationCriteria."Evaluation Type";
            BidEvaluationCriteria.Description:=EvaluationCriteria.Description;
            BidEvaluationCriteria."Total Weight %":=EvaluationCriteria."Total Weight %";
            BidEvaluationCriteria.INSERT(TRUE);
            UNTIL EvaluationCriteria.NEXT=0;
          END;
        
        //add Bid Evaluation Score Guide
          BidScore.RESET;
          BidScore.SETRANGE("Template ID",EvaluationHeader."Bid Scoring Document No.");
          BidScore.SETRANGE("Evaluation Type",EvaluationHeader."Evaluation Type");
          IF BidScore.FINDSET THEN BEGIN
            REPEAT
            BidEvalScore.INIT;
            BidEvalScore."Template ID":=BidScore."Template ID";
            BidEvalScore."Criteria Group ID":=BidScore."Criteria Group ID";
            BidEvalScore."Requirement ID":=BidScore."Requirement ID";
            BidEvalScore."Entry No":=BidScore."Entry No";
            BidEvalScore."Response Value":=BidScore."Response Value";
            BidEvalScore."Document No":=EvaluationHeader.Code;
            BidEvalScore."Target Qty":=BidScore."Target Qty";
            BidEvalScore."Rating Type":=BidScore."Rating Type";
            BidEvalScore."Evaluation Type":=BidScore."Evaluation Type";
            BidEvalScore."Desired Perfomance Direction":=BidScore."Desired Perfomance Direction";
            BidEvalScore."Min Bid Value":=BidScore."Min Bid Value";
            BidEvalScore."Max Bid Value":=BidScore."Max Bid Value";
            BidEvalScore."Min Date Value":=BidScore."Min Date Value";
            BidEvalScore."Max Date Value":=BidScore."Max Date Value";
            BidEvalScore."Score %":=BidScore."Score %";
            BidEvalScore.INSERT(TRUE);
            UNTIL BidScore.NEXT=0;
            END;
        */

    end;

    local procedure ReturnValue(BidEvaluationScoreEntry: Record "Bid Evaluation Score Entry") Feedback: Boolean
    var
        BidEvaluationScore: Record "Bid Evaluation Score Entry";
        BidValue: Code[30];
    begin
        BidEvaluationScore.Reset;
        BidEvaluationScore.SetRange("Bid No.", BidEvaluationScoreEntry."Bid No.");
        BidEvaluationScore.SetRange("Requirement ID", BidEvaluationScoreEntry."Requirement ID");
        BidEvaluationScore.SetRange("Vendor No.", BidEvaluationScoreEntry."Vendor No.");
        if BidEvaluationScore.FindSet then begin
            Feedback := true;
            BidValue := BidEvaluationScore."Response Value";
            repeat
                if BidValue <> BidEvaluationScore."Response Value" then
                    Feedback := false;
            until BidEvaluationScore.Next = 0;
        end;
        exit(Feedback);
    end;


    procedure FnGetVendorNo(ObjVendor: Record Vendor): Code[20]
    var
        Vendor: Record Vendor;
    begin
        with ObjVendor do begin
            repeat
                exit(ObjVendor."No.");
            until ObjVendor.Next = 0;
        end;
    end;


    procedure FnSuggestRFQBids(var EvaluationHeader: Record "Bid Evaluation Register"; var PurchaseHdr: Record "Purchase Header")
    var
        Bidevaluationscore: Record "Bid Evaluation Score Entry";
        BidSCoreGuide: Record "Bid Score Requirement";
        LineNo: Integer;
        BidScore: Record "Bid Score Guide";
        BidEvaluationCriteria: Record "Bid Evaluation Criteria Group";
        EvaluationCriteria: Record "Bid Score Criteria Group";
        BidEvalScore: Record "Bid Evaluation Score Guide";
        BidRegister: Record "Bid Evaluation Register";
        FinEvaluationLine: Record "Finance Evaluation Line";
        Bids: Record "Purchase Header";
        RankingNo: Integer;
        FinEvalLine: Record "Finance Evaluation Line";
        FinEvalnHeader: Record "Bid Evaluation Register";
        FinEvalLine1: Record "Finance Evaluation Line";
    begin
        EvaluationHeader.TestField("Bid Scoring Document No.");
        FinEvaluationLine.Reset;
        FinEvaluationLine.SetRange("Document ID", EvaluationHeader.Code);
        if FinEvaluationLine.FindSet then begin
            FinEvaluationLine.DeleteAll;
        end;

        //add finance evaluation line
        PurchaseHdr.Reset;
        PurchaseHdr.SetRange("IFS Code", EvaluationHeader."IFS Code");
        PurchaseHdr.SetRange(PurchaseHdr."Document Type", PurchaseHdr."document type"::Quote);
        if PurchaseHdr.FindSet then begin
            //BidRegister.RESET;
            //BidRegister.SETRANGE("IFS Code",EvaluationHeader."IFS Code");
            //BidRegister.SETRANGE("IFS Code",PurchaseHdr."IFS Code");
            //BidRegister.SETRANGE("Evaluation Type",BidRegister."Evaluation Type"::"Technical Evaluation");
            //BidRegister.SETRANGE("Technical Evaluation  Decision",BidRegister."Technical Evaluation  Decision"::Pass);
            //IF BidRegister.FINDSET THEN BEGIN
            repeat
                FinEvaluationLine.Init;
                FinEvaluationLine."Document ID" := EvaluationHeader.Code;
                FinEvaluationLine."Document Type" := FinEvaluationLine."document type"::Quote;
                FinEvaluationLine."No." := PurchaseHdr."No.";
                FinEvaluationLine."Bidder Name" := PurchaseHdr."Buy-from Vendor Name";
                FinEvaluationLine."Bidder No" := PurchaseHdr."Buy-from Vendor No.";
                FinEvaluationLine."Invitation For Supply No" := PurchaseHdr."IFS Code";
                FinEvaluationLine."Bid Currency Code" := PurchaseHdr."Currency Code";
                PurchaseHdr.CalcFields("Amount Including VAT");
                FinEvaluationLine."Read-out Bid Price (A)" := PurchaseHdr."Amount Including VAT";
                FinEvaluationLine."Final Evaluated Bid Price" := PurchaseHdr."Amount Including VAT";

                //FinEvaluationLine."Bid Currency Code":=BidRegister
                //BidRegister.CALCFIELDS(BidRegister."Weighted Technical Eval Score");
                //FinEvaluationLine."Preliminary Evaluation Date":=BidRegister."Evaluation Date";
                FinEvaluationLine."Responsive Bid" := true;
                //FinEvaluationLine."Technical Evaluation Date":=BidRegister."Evaluation Date";
                //FinEvaluationLine."Weighted Tech Score %":=BidRegister."Weighted Technical Eval Score";
                //Bids.CALCFIELDS(Bids."Amount Including VAT");
                //FinEvaluationLine."Final Evaluated Bid Price":=Bids."Amount Including VAT";
                //FinEvaluationLine."Read-out Bid Price (A)":=Bids."Amount Including VAT";
                FinEvaluationLine."Passed Tech Evaluation" := true;
                //FinEvaluationLine."Tech Evaluation Ranking":=BidRegister."Tech Evaluation Ranking";
                FinEvaluationLine."Financial Evaluation Date" := Today;
                FinEvaluationLine.Insert(true);
            until PurchaseHdr.Next = 0;
        end;



        Bidevaluationscore.Reset;
        if Bidevaluationscore.FindLast then
            LineNo := Bidevaluationscore."Line No";

        Bidevaluationscore.Reset;
        Bidevaluationscore.SetRange("Bid Scoring Document No.", EvaluationHeader."Bid Scoring Document No.");
        Bidevaluationscore.SetRange(Code, EvaluationHeader.Code);
        if Bidevaluationscore.FindSet then begin
            Bidevaluationscore.DeleteAll;

        end;

        BidEvaluationCriteria.Reset;
        BidEvaluationCriteria.SetRange("Template ID", EvaluationHeader."Bid Scoring Document No.");
        BidEvaluationCriteria.SetRange("Document No", EvaluationHeader.Code);
        if BidEvaluationCriteria.FindSet then begin
            BidEvaluationCriteria.DeleteAll;
        end;

        BidEvalScore.Reset;
        BidEvalScore.SetRange("Template ID", EvaluationHeader."Bid Scoring Document No.");
        BidEvalScore.SetRange("Document No", EvaluationHeader.Code);
        if BidEvalScore.FindSet then begin
            BidEvalScore.DeleteAll;
        end;


        BidSCoreGuide.Reset;
        BidSCoreGuide.SetRange("Template ID", EvaluationHeader."Bid Scoring Document No.");
        BidSCoreGuide.SetRange("Evaluation Type", EvaluationHeader."Evaluation Type");
        if BidSCoreGuide.FindSet then begin
            repeat
                Bidevaluationscore.Init;
                Bidevaluationscore.Code := EvaluationHeader.Code;
                Bidevaluationscore."Line No" := LineNo + 1;
                Bidevaluationscore."Bid No." := EvaluationHeader."Bid No.";
                Bidevaluationscore."Vendor No." := EvaluationHeader."Vendor No.";
                Bidevaluationscore."Criteria Group" := BidSCoreGuide."Criteria Group ID";
                Bidevaluationscore."Requirement ID" := BidSCoreGuide."Requirement ID";
                Bidevaluationscore."Evaluation Requirement" := BidSCoreGuide."Evaluation Requirement";
                Bidevaluationscore."Rating Type" := BidSCoreGuide."Rating Type";
                Bidevaluationscore."Target Qty" := BidSCoreGuide."Target Qty";
                Bidevaluationscore."Target Value/KPI" := BidSCoreGuide."Target Value";
                Bidevaluationscore."Unit of Measure" := BidSCoreGuide."Unit of Measure";
                //Bidevaluationscore."Response Value":=Bid
                //Bidevaluationscore."Bid Response Actual Qty":=BidSCoreGuide.
                //Bidevaluationscore."Score %":=
                Bidevaluationscore."Assigned Weight %" := BidSCoreGuide."Assigned Weight %";
                //Bidevaluationscore."Weighted Line Score":=BidSCoreGuide.
                Bidevaluationscore."Equipment Type" := BidSCoreGuide."Equipment Type";
                Bidevaluationscore."Desired Perfomance Direction" := BidSCoreGuide."Desired Perfomance Direction";
                Bidevaluationscore."Bid Scoring Document No." := EvaluationHeader."Bid Scoring Document No.";
                Bidevaluationscore.Insert(true);
                LineNo += 1;
            until BidSCoreGuide.Next = 0;
        end;

        //add bid evaluation criteria
        EvaluationCriteria.Reset;
        EvaluationCriteria.SetRange("Template ID", EvaluationHeader."Bid Scoring Document No.");
        EvaluationCriteria.SetRange("Evaluation Type", EvaluationHeader."Evaluation Type");
        if EvaluationCriteria.FindSet then begin
            repeat
                BidEvaluationCriteria.Init;
                BidEvaluationCriteria."Template ID" := EvaluationCriteria."Template ID";
                BidEvaluationCriteria."Criteria Group ID" := EvaluationCriteria."Criteria Group ID";
                BidEvaluationCriteria."Document No" := EvaluationHeader.Code;
                BidEvaluationCriteria."Evaluation Type" := EvaluationCriteria."Evaluation Type";
                BidEvaluationCriteria.Description := EvaluationCriteria.Description;
                BidEvaluationCriteria."Total Weight %" := EvaluationCriteria."Total Weight %";
                BidEvaluationCriteria.Insert(true);
            until EvaluationCriteria.Next = 0;
        end;

        //add Bid Evaluation Score Guide
        BidScore.Reset;
        BidScore.SetRange("Template ID", EvaluationHeader."Bid Scoring Document No.");
        BidScore.SetRange("Evaluation Type", EvaluationHeader."Evaluation Type");
        if BidScore.FindSet then begin
            repeat
                BidEvalScore.Init;
                BidEvalScore."Template ID" := BidScore."Template ID";
                BidEvalScore."Criteria Group ID" := BidScore."Criteria Group ID";
                BidEvalScore."Requirement ID" := BidScore."Requirement ID";
                BidEvalScore."Entry No" := BidScore."Entry No";
                BidEvalScore."Response Value" := BidScore."Response Value";
                BidEvalScore."Document No" := EvaluationHeader.Code;
                BidEvalScore."Target Qty" := BidScore."Target Qty";
                BidEvalScore."Rating Type" := BidScore."Rating Type";
                BidEvalScore."Evaluation Type" := BidScore."Evaluation Type";
                BidEvalScore."Desired Perfomance Direction" := BidScore."Desired Perfomance Direction";
                BidEvalScore."Min Bid Value" := BidScore."Min Bid Value";
                BidEvalScore."Max Bid Value" := BidScore."Max Bid Value";
                BidEvalScore."Min Date Value" := BidScore."Min Date Value";
                BidEvalScore."Max Date Value" := BidScore."Max Date Value";
                BidEvalScore."Score %" := BidScore."Score %";
                BidEvalScore.Insert(true);
            until BidScore.Next = 0;
        end;
        //Financial Rankng
        FinEvalnHeader.Reset;
        FinEvalnHeader.SetRange(Code, EvaluationHeader.Code);
        if FinEvalnHeader.FindFirst() then begin
            RankingNo := 0;
            FinEvalLine.Reset;
            FinEvalLine.SetRange("Document ID", FinEvalnHeader.Code);
            //BidOpeningRegisterLine1.SETFILTER(Rank,'=%1',0);
            FinEvalLine.SetCurrentkey("Final Evaluated Bid Price");
            FinEvalLine.SetAscending("Final Evaluated Bid Price", true);
            if FinEvalLine.FindSet then begin
                repeat
                    //BidOpeningRegisterLine1.Rank:=RankingNo+1;
                    FinEvalLine1.Reset;
                    FinEvalLine1.SetRange("Document ID", FinEvalnHeader.Code);
                    FinEvalLine1.SetFilter("Finacial Auto-Ranking", '<>%1', 0);
                    FinEvalLine1.SetRange("Final Evaluated Bid Price", FinEvalLine."Final Evaluated Bid Price");
                    if FinEvalLine1.FindFirst then begin
                        FinEvalLine."Finacial Auto-Ranking" := FinEvalLine."Finacial Auto-Ranking";
                        FinEvalLine.Modify(true);
                        RankingNo := FinEvalLine1."Finacial Auto-Ranking";
                    end else begin
                        RankingNo := RankingNo + 1;
                        FinEvalLine."Finacial Auto-Ranking" := RankingNo + 1;
                        FinEvalLine.Modify(true);
                    end;
                until FinEvalLine.Next = 0;

            end;

        end;
        //end of financial Ranking
    end;


    procedure SuggestTechnicalEvaluationEntries(EvaluationHeader: Record "Bid Evaluation Register")
    var
        Bidevaluationscore: Record "Bid Evaluation Score Entry";
        BidSCoreGuide: Record "Bid Evaluation Score Entry";
        LineNo: Integer;
        BidScore: Record "Bid Score Guide";
        BidEvaluationCriteria: Record "Bid Evaluation Criteria Group";
        EvaluationCriteria: Record "Bid Score Criteria Group";
        BidEvalScore: Record "Bid Evaluation Score Guide";
        BidEvalHeader: Record "Bid Evaluation Register";
        EvaluationFindings: Code[50];
        EvaluationResults: Boolean;
    begin

        EvaluationHeader.TestField("Bid Scoring Document No.");
        Bidevaluationscore.Reset;
        if Bidevaluationscore.FindLast then
            LineNo := Bidevaluationscore."Line No";

        Bidevaluationscore.Reset;
        Bidevaluationscore.SetRange("Bid Scoring Document No.", EvaluationHeader."Bid Scoring Document No.");
        Bidevaluationscore.SetRange(Code, EvaluationHeader.Code);
        if Bidevaluationscore.FindSet then begin
            Bidevaluationscore.DeleteAll;
        end;

        BidEvaluationCriteria.Reset;
        BidEvaluationCriteria.SetRange("Template ID", EvaluationHeader."Bid Scoring Document No.");
        BidEvaluationCriteria.SetRange("Document No", EvaluationHeader.Code);
        if BidEvaluationCriteria.FindSet then begin
            BidEvaluationCriteria.DeleteAll;
        end;

        BidEvalScore.Reset;
        BidEvalScore.SetRange("Template ID", EvaluationHeader."Bid Scoring Document No.");
        BidEvalScore.SetRange("Document No", EvaluationHeader.Code);
        if BidEvalScore.FindSet then begin
            BidEvalScore.DeleteAll;
        end;
        //check for different values
        BidEvalHeader.Reset;
        BidEvalHeader.SetRange("IFS Code", EvaluationHeader."IFS Code");
        BidEvalHeader.SetRange("Evaluation Type", EvaluationHeader."Evaluation Type");
        BidEvalHeader.SetFilter(Code, '<>%1', EvaluationHeader.Code);
        BidEvalHeader.SetRange("Bid No.", EvaluationHeader."Bid No.");
        BidEvalHeader.SetRange("Vendor No.", EvaluationHeader."Vendor No.");
        BidEvalHeader.SetRange("Evaluator Category", BidEvalHeader."evaluator category"::"Individual Evaluator");
        if BidEvalHeader.FindSet then begin
            repeat

                BidSCoreGuide.Reset;
                BidSCoreGuide.SetRange(Code, BidEvalHeader.Code);
                if BidSCoreGuide.FindSet then begin
                    repeat
                        Bidevaluationscore.Reset;
                        Bidevaluationscore.SetRange("Requirement ID", BidSCoreGuide."Requirement ID");
                        Bidevaluationscore.SetRange(Code, EvaluationHeader.Code);
                        if not Bidevaluationscore.FindSet then begin
                            Bidevaluationscore.Init;
                            Bidevaluationscore.TransferFields(BidSCoreGuide);
                            Bidevaluationscore.Code := EvaluationHeader.Code;
                            Bidevaluationscore."Bid No." := EvaluationHeader."Bid No.";
                            Bidevaluationscore."Vendor No." := EvaluationHeader."Vendor No.";
                            Bidevaluationscore."Bid Scoring Document No." := EvaluationHeader."Bid Scoring Document No.";
                            Bidevaluationscore."Response Value" := BidSCoreGuide."Response Value";
                            Bidevaluationscore.Insert(true);
                            EvaluationFindings := Bidevaluationscore."Response Value";
                            EvaluationResults := ReturnValue(Bidevaluationscore);
                            //MESSAGE('%1 %2 %3',EvaluationResults,BidEvalHeader.Code,Bidevaluationscore."Response Value");
                            if EvaluationResults = false then begin
                                Bidevaluationscore."Response Value" := '';
                                Bidevaluationscore.Modify(true);
                            end;
                        end;
                        Bidevaluationscore.Reset;
                        Bidevaluationscore.SetRange("Requirement ID", BidSCoreGuide."Requirement ID");
                        Bidevaluationscore.SetRange(Code, EvaluationHeader.Code);
                        if Bidevaluationscore.FindSet then begin
                            //Bidevaluationscore.INIT;
                            //Bidevaluationscore.TRANSFERFIELDS(BidSCoreGuide);
                            //Bidevaluationscore.Code:=EvaluationHeader.Code;
                            ///Bidevaluationscore."Bid No.":=EvaluationHeader."Bid No.";
                            // Bidevaluationscore."Vendor No.":=EvaluationHeader."Vendor No.";
                            //Bidevaluationscore."Bid Scoring Document No.":=EvaluationHeader."Bid Scoring Document No.";
                            Bidevaluationscore."Score %" := (Bidevaluationscore."Score %" + BidSCoreGuide."Score %") / 2;
                            Bidevaluationscore.Validate(Bidevaluationscore."Score %");

                            Bidevaluationscore.Modify;
                            EvaluationFindings := Bidevaluationscore."Response Value";
                            EvaluationResults := ReturnValue(Bidevaluationscore);

                            /*IF Bidevaluationscore."Response Value"=BidSCoreGuide."Response Value" THEN
                              BEGIN
                                Bidevaluationscore.VALIDATE(Bidevaluationscore."Response Value",'');
                                Bidevaluationscore.MODIFY(TRUE);
                              END;*/
                        end;


                        LineNo += 1;
                    until BidSCoreGuide.Next = 0;
                end;
            until BidEvalHeader.Next = 0;
        end;
        /*
        //add bid evaluation criteria
        EvaluationCriteria.RESET;
        EvaluationCriteria.SETRANGE("Template ID",EvaluationHeader."Bid Scoring Document No.");
        EvaluationCriteria.SETRANGE("Evaluation Type",EvaluationHeader."Evaluation Type");
        IF EvaluationCriteria.FINDSET THEN BEGIN
          REPEAT
            BidEvaluationCriteria.INIT;
            BidEvaluationCriteria."Template ID":=EvaluationCriteria."Template ID";
            BidEvaluationCriteria."Criteria Group ID":=EvaluationCriteria."Criteria Group ID";
            BidEvaluationCriteria."Document No":=EvaluationHeader.Code;
            BidEvaluationCriteria."Evaluation Type":=EvaluationCriteria."Evaluation Type";
            BidEvaluationCriteria.Description:=EvaluationCriteria.Description;
            BidEvaluationCriteria."Total Weight %":=EvaluationCriteria."Total Weight %";
            BidEvaluationCriteria.INSERT(TRUE);
            UNTIL EvaluationCriteria.NEXT=0;
          END;
        
        //add Bid Evaluation Score Guide
          BidScore.RESET;
          BidScore.SETRANGE("Template ID",EvaluationHeader."Bid Scoring Document No.");
          BidScore.SETRANGE("Evaluation Type",EvaluationHeader."Evaluation Type");
          IF BidScore.FINDSET THEN BEGIN
            REPEAT
            BidEvalScore.INIT;
            BidEvalScore."Template ID":=BidScore."Template ID";
            BidEvalScore."Criteria Group ID":=BidScore."Criteria Group ID";
            BidEvalScore."Requirement ID":=BidScore."Requirement ID";
            BidEvalScore."Entry No":=BidScore."Entry No";
            BidEvalScore."Response Value":=BidScore."Response Value";
            BidEvalScore."Document No":=EvaluationHeader.Code;
            BidEvalScore."Target Qty":=BidScore."Target Qty";
            BidEvalScore."Rating Type":=BidScore."Rating Type";
            BidEvalScore."Evaluation Type":=BidScore."Evaluation Type";
            BidEvalScore."Desired Perfomance Direction":=BidScore."Desired Perfomance Direction";
            BidEvalScore."Min Bid Value":=BidScore."Min Bid Value";
            BidEvalScore."Max Bid Value":=BidScore."Max Bid Value";
            BidEvalScore."Min Date Value":=BidScore."Min Date Value";
            BidEvalScore."Max Date Value":=BidScore."Max Date Value";
            BidEvalScore."Score %":=BidScore."Score %";
            BidEvalScore.INSERT(TRUE);
            UNTIL BidScore.NEXT=0;
            END;
        */

    end;


    procedure CreateMultipleInvitationNotice(Purch: Record "Purchase Header")
    var
        UserSetup: Record "User Setup";
        IFS: Record "Standard Purchase Code";
        ProcSetup: Record "Procurement Setup";
        PurchLines: Record "Purchase Line";
        IFSPurchLines: Record "Standard Purchase Line";
        IFSMajorWorkDeliverable: Record "IFS Major Work_Deliverable";
        PRNMajorWorkDeliverable: Record "PRN Major Work Deliverable";
        IFSKeyStaff: Record "IFS Key Staff";
        PRNPersonnelSpecification: Record "PRN Personnel Specification";
        IFSStaffQualification: Record "IFS Staff Min Qualification";
        PRNStaffQualification: Record "PRN Personnel Qualification";
        PRNPersonnelExperience: Record "PRN Personnel Experience";
        IFSPersonnelExperience: Record "IFS Staff Min Experience";
        PRNEquipmentsSpecification: Record "PRN Equipment Specification";
        IFSEquipmentsSpecification: Record "IFS Required Equipment";
        EmailNotification: Codeunit "Email Notifications";
        CompInfo: Record "Company Information";
        PrequalifiedSuppliers: Record "Standard Vendor Purchase Code";
        PrequalifiedVendEntry: Record "Vendor Prequalification Entry";
        PRNLines: Record "Purchase Line";
    begin
        if Purch."PRN Conversion Procedure" <> Purch."prn conversion procedure"::"Invitation For Supply" then
            Error('The PRN %1  must be one that supports direct creation of Invitation Notices', Purch."No.");
        ProcSetup.Get;
        //Check Procurement User
        UserSetup.Reset;
        UserSetup.SetRange("User ID", UserId);
        if UserSetup.FindFirst() then begin
            UserSetup.TestField("Purchase Resp. Ctr. Filter");
            if UserSetup."Authorize IFS Creator" = false then
                Error('You Must be Authorized IFS Creator, Kindly contact system administrator');
            if UserSetup."Purchase Resp. Ctr. Filter" <> Purch."Responsibility Center" then
                Error('You are not authorized to create IFS for this resonsibility center %1', Purch."Responsibility Center");
        end;

        //check if the PRN has associated IFS Notice
        if (Purch."Ordered PRN" = true) or (Purch."Linked IFS No." <> '') then
            Error('The PRN %1 has been already ordered', Purch."No.");

        //The total value of the PRN request must be within the available procurement budget
        if Purch."Total PRN Amount (LCY)" > Purch."PP Total Available Budget" then
            Error('The total value of the PRN request must be within the available procurement budget');

        //Testfields no blanks allowed
        Purch.TestField("PP  Invitation Notice Type");
        Purch.TestField("PP Solicitation Type");
        Purch.TestField("PP Procurement Method");

        //creation of multiple IFS
        /*PRNLines.RESET;
        PRNLines.SETRANGE("Document No.",Purch."No.");
        PRNLines.SETRANGE("Document Type",Purch."Document Type");
        PRNLines.SETRANGE("IFS Created",FALSE);
        PRNLines.SETRANGE(Selected,TRUE);
        IF PRNLines.FINDSET THEN BEGIN
          REPEAT*/


        //Action should automatically create an Invitation For Supply (IFS)
        /*IFS.RESET;
        IFS.SETRANGE("PRN No.",Purch."No.");
        IF NOT IFS.FINDSET THEN BEGIN*/
        IFS.Init;
        IFS.Code := '';
        IFS.Validate("Invitation Notice Type", Purch."PP  Invitation Notice Type");
        IFS.Validate(Description, Purch.Description);
        IFS.Validate("Tender Name", Purch.Description);
        IFS.Validate(Name, Purch.Description);
        IFS.Validate("Tender Summary", Purch.Description);

        //IFS."Location Code":=Purch."Location Code";
        IFS.Validate("Location Code", Purch."Location Code");
        IFS.Validate("Requisition Product Group", Purch."Requisition Product Group");
        IFS.Validate("Document Date", Today);
        IFS.Validate("PRN No.", Purch."No.");
        IFS.Validate("Responsibility Center", Purch."Responsibility Center");
        IFS.Validate("Requisition Product Group", Purch."Requisition Product Group");
        IFS.Validate("Requisition Template ID", Purch."Requisition Template ID");
        IFS.Validate("Solicitation Type", Purch."PP Solicitation Type");
        IFS.Validate("Bid Selection Method", Purch."PP Bid Selection Method");
        IFS.Validate("Procurement Method", Purch."PP Procurement Method");
        if IFS."Invitation Notice Type" = IFS."invitation notice type"::"Single  Stage Tender" then
            IFS.Validate("Tender Validity Duration", ProcSetup."Default Single Stage Tender");
        if IFS."Invitation Notice Type" = IFS."invitation notice type"::"Two Stage Tender" then
            IFS.Validate("Tender Validity Duration", ProcSetup."Default Two Stage Tender valid");
        if IFS."Invitation Notice Type" = IFS."invitation notice type"::RFQ then
            IFS.Validate("Tender Validity Duration", ProcSetup."Default RFQ Validity Duration");
        if IFS."Invitation Notice Type" = IFS."invitation notice type"::"Low Value Procurement" then
            IFS.Validate("Tender Validity Duration", ProcSetup."Default LVP Validity Duration");
        IFS.Validate("Purchaser Code", Purch."Purchaser Code");
        IFS.Validate("Language Code", ProcSetup."Default Language Code");
        IFS.Validate("Appointer of Bid Arbitrator", ProcSetup."Default Arbitrator Appointer");
        IFS.Validate("Requesting Region", Purch.Region);
        //// IFS.Validate("Global Dimension 1 Code", Purch."Shortcut Dimension 1 Code");
        IFS.Validate("Global Dimension 2 Code", Purch."Shortcut Dimension 2 Code");
        IFS.Validate("Directorate Code", Purch."Directorate Code");
        //MESSAGE('"Directorate Code" %1',Purch."Directorate Code");
        IFS.Validate("Department Code", Purch."Department Code");
        IFS.Validate("Procurement Plan ID", Purch."Procurement Plan ID");
        IFS.Validate("Procurement Plan Entry No", Purch."Procurement Plan Entry No");
        IFS.Validate(Job, Purch.Job);
        IFS.Validate("Job Task No.", Purch."Job Task No.");
        //IFS."Job Task No.":=Purch."Job Task No.";
        IFS.Validate("PP Planning Category", Purch."PP Planning Category");
        IFS.Validate("PP Funding Source ID", Purch."PP Funding Source ID");
        IFS.Validate("PP Total Budget", Purch."PP Total Budget");
        IFS.Validate("PP Total Actual Costs", Purch."PP Total Actual Costs");
        IFS.Validate("PP Total Commitments", Purch."PP Total Commitments");
        IFS.Validate("PP Total Available Budget", Purch."PP Total Available Budget");
        IFS.Validate("PP Preference/Reservation Code", Purch."PP Preference/Reservation Code");
        //IFS.VALIDATE("Financial Year Code",ProcSetup.
        IFS.Validate("Works Category", Purch."Works Category");
        IFS.Validate("Road Code", Purch."Road Code");
        IFS.Validate("Road Link Name", Purch."Link Name");
        IFS.Validate("Constituency ID", Purch.Consitituency);
        IFS.Validate("Procurement Type", Purch."Procurement Type");
        IFS.Validate("Procurement Category ID", Purch."PP Planning Category");
        IFS.Validate("Project ID", Purch.Job);
        IFS.Validate("Requesting Directorate", Purch."Directorate Code");
        IFS.Validate("Requesting Department", Purch."Department Code");

        CompInfo.Get;
        IFS.Address := CompInfo.Address;
        IFS."Procuring Entity Name/Contact" := CompInfo.Name;
        IFS."Address 2" := CompInfo."Address 2";
        IFS."Post Code" := CompInfo."Post Code";
        IFS.City := CompInfo.City;
        IFS."Country/Region Code" := CompInfo."Country/Region Code";
        IFS."Phone No." := CompInfo."Phone No.";
        IFS."E-Mail" := CompInfo."E-Mail";
        IFS."Primary Tender Submission" := CompInfo.Address;
        IFS."Primary Engineer Contact" := CompInfo.Address;


        if IFS.Insert(true) then begin
            PurchLines.Reset;
            PurchLines.SetRange("Document No.", Purch."No.");
            PurchLines.SetRange("Document Type", Purch."Document Type");
            PurchLines.SetRange("IFS Created", false);
            PurchLines.SetRange(Selected, true);
            //PurchLines.SETRANGE("Line No.",PRNLines."Line No.");
            if PurchLines.FindSet then begin
                repeat
                    //2.IFS Purchase Lines (T174)-Default values shall be inherited from PRN Lines (T39)
                    IFSPurchLines.Init;
                    IFSPurchLines.Validate("Standard Purchase Code", IFS.Code);
                    IFSPurchLines.Validate("Line No.", PurchLines."Line No.");
                    IFSPurchLines.Validate(Type, PurchLines.Type);
                    IFSPurchLines.Validate("No.", PurchLines."No.");
                    IFSPurchLines.Validate(Description, PurchLines.Description);
                    IFSPurchLines.Validate(Quantity, PurchLines.Quantity);
                    IFSPurchLines.Validate("Unit of Measure Code", PurchLines."Unit of Measure Code");
                    IFSPurchLines.Validate("Shortcut Dimension 1 Code", PurchLines."Shortcut Dimension 1 Code");
                    IFSPurchLines.Validate("Shortcut Dimension 2 Code", PurchLines."Shortcut Dimension 2 Code");
                    IFSPurchLines.Validate("Variant Code", PurchLines."Variant Code");
                    IFSPurchLines.Validate("Dimension Set ID", PurchLines."Dimension Set ID");
                    IFSPurchLines.Validate("Item Category", PurchLines."Item Category Code");
                    IFSPurchLines.Validate("FA Posting Type", PurchLines."FA Posting Type");
                    IFSPurchLines.Validate("Maintenance Code", PurchLines."Maintenance Code");
                    if IFSPurchLines.Insert(true) then begin
                        PurchLines."IFS Created" := true;
                        PurchLines.Selected := false;
                        PurchLines.Modify(true);
                    end;
                until PurchLines.Next = 0;
            end;

            //3.IFS Major Work Deliverables table-Default values shall be inherited from the PRN Major Work Deliverable table
            PRNMajorWorkDeliverable.Reset;
            PRNMajorWorkDeliverable.SetRange("Document No.", Purch."No.");
            if PRNMajorWorkDeliverable.FindSet then begin
                repeat
                    IFSMajorWorkDeliverable.Init;
                    IFSMajorWorkDeliverable.Validate("Document No", IFS.Code);
                    IFSMajorWorkDeliverable.Validate("Entry No", PRNMajorWorkDeliverable."Entry No");
                    IFSMajorWorkDeliverable.Validate("Major Activity Description", PRNMajorWorkDeliverable.Description);
                    IFSMajorWorkDeliverable.Insert(true);
                until PRNMajorWorkDeliverable.Next = 0;
            end;

            //4.IFS Key Staff table-Default values shall be inherited from the PRN Personnel Specification IFS Key Staff Table FieldsMapping Rules
            PRNPersonnelSpecification.Reset;
            PRNPersonnelSpecification.SetRange("Document No.", Purch."No.");
            if PRNPersonnelSpecification.FindSet then begin
                repeat
                    IFSKeyStaff.Init;
                    IFSKeyStaff."IFS Code" := IFS.Code;
                    IFSKeyStaff."Staff Role Code" := PRNPersonnelSpecification."Staff Role Code";
                    IFSKeyStaff."Title/Designation Description" := PRNPersonnelSpecification."Title/Designation Description";
                    IFSKeyStaff."Staff Category" := PRNPersonnelSpecification."Staff Category";
                    IFSKeyStaff."Min No. of Recomm Staff" := PRNPersonnelSpecification."Min No. of Recomm Staff";
                    IFSKeyStaff.Insert(true);
                until PRNPersonnelSpecification.Next = 0;
            end;

            //5.IFS Staff Min Qualification-Default values shall be inherited from the PRN Personnel Qualification
            PRNStaffQualification.Reset;
            PRNStaffQualification.SetRange("Document No.", Purch."No.");
            if PRNStaffQualification.FindSet then begin
                repeat
                    IFSStaffQualification.Init;
                    IFSStaffQualification."IFS Code" := IFS.Code;
                    IFSStaffQualification."Project Role Code" := PRNStaffQualification."Staff Role Code";
                    IFSStaffQualification."Entry No" := PRNStaffQualification."Entry No";
                    IFSStaffQualification."Qualification Category" := PRNStaffQualification."Qualification Category";
                    IFSStaffQualification."Minimum Qualification Req" := PRNStaffQualification."Minimum Qualification Req";
                    IFSStaffQualification.Insert(true);
                until PRNStaffQualification.Next = 0;
            end;

            //6.IFS Staff Min Experience -Default values shall be inherited from the PRN Personnel Experience
            PRNPersonnelExperience.Reset;
            PRNPersonnelExperience.SetRange("Document No.", Purch."No.");
            if PRNPersonnelExperience.FindSet then begin
                repeat
                    IFSPersonnelExperience.Init;
                    IFSPersonnelExperience."IFS Code" := IFS.Code;
                    IFSPersonnelExperience."Project Role Code" := PRNPersonnelExperience."Staff Role Code";
                    IFSPersonnelExperience."Experience Category" := PRNPersonnelExperience."Experience Category";
                    IFSPersonnelExperience."Entry No" := PRNPersonnelExperience."Entry No";
                    IFSPersonnelExperience."Minimum Years of Experience" := PRNPersonnelExperience."Minimum Years of Experience";
                    IFSPersonnelExperience."Minimum Experience Req" := PRNPersonnelExperience."Minimum Experience Req";
                    IFSPersonnelExperience.Insert(true);

                until PRNPersonnelExperience.Next = 0;
            end;

            //7.IFS Required Equipment- Default values shall be inherited from the PRN Equipment Specification
            PRNEquipmentsSpecification.Reset;
            PRNEquipmentsSpecification.SetRange("Document No.", Purch."No.");
            if PRNEquipmentsSpecification.FindSet then begin
                repeat

                    IFSEquipmentsSpecification.Init;
                    IFSEquipmentsSpecification."Document No" := IFS.Code;
                    IFSEquipmentsSpecification."Equipment Type Code" := PRNEquipmentsSpecification."Equipment Type";
                    IFSEquipmentsSpecification.Category := PRNEquipmentsSpecification.Category;
                    IFSEquipmentsSpecification.Description := PRNEquipmentsSpecification.Description;
                    IFSEquipmentsSpecification."Minimum Required Qty" := PRNEquipmentsSpecification."Minimum Required Qty";
                    IFSEquipmentsSpecification.Insert(true);
                until PRNEquipmentsSpecification.Next = 0;
            end;
            //8.IFS Prequalified Vendors- Default values shall be inherited from the Vendor Prequalified Entry

            PrequalifiedVendEntry.Reset;
            PrequalifiedVendEntry.SetRange("Procurement Category Code", IFS."Procurement Category ID");
            if PrequalifiedVendEntry.FindSet then begin
                repeat

                    PrequalifiedSuppliers.Init;
                    PrequalifiedSuppliers.Validate(PrequalifiedSuppliers."Vendor No.", PrequalifiedVendEntry."Vendor No.");
                    PrequalifiedSuppliers.Code := IFS.Code;
                    PrequalifiedSuppliers."IFS Code" := IFS.Code;
                    PrequalifiedSuppliers.Description := IFS.Description;
                    //PrequalifiedSuppliers."Vendor Name":=PrequalifiedVendEntry.;
                    PrequalifiedSuppliers.Insert(true);
                until PrequalifiedVendEntry.Next = 0;
            end;
        end;
        Message('Purchase Requisition No: %1 has successfully been converted to Invitation for Supply No: %2. Please check', Purch."No.", IFS.Code);

        //UNTIL PRNLines.NEXT=0;
        //END;
        /*IF IFS."Invitation Notice Type"=IFS."Invitation Notice Type"::RFQ THEN
        PAGE.RUN(75121,IFS)
        ELSE
        PAGE.RUN(75078,IFS);*/

        /*PurchLines.RESET;
        PurchLines.SETRANGE("Document No.",Purch."No.");
        PurchLines.SETRANGE("Document Type",Purch."Document Type");
        IF PurchLines.FINDSET THEN
          REPEAT
            IF PurchLines."IFS Created" = TRUE THEN BEGIN
              Purch."Ordered PRN":=TRUE;
              Purch."PRN Order Date/Time":=CURRENTDATETIME;
              Purch."Linked IFS No.":=IFS.Code;
              Purch.MODIFY(TRUE);
              END;
          UNTIL PurchLines.NEXT=0;

        //Back Email Notification to requestor.
        EmailNotification.SendPRNApprovedMailAfterIFSCreation(Purch);*/

        //END;

    end;


    procedure PostFinBidOpeningRegister(BidOpeningRegister: Record "Bid Opening Register")
    var
        IFSDetails: Record "Standard Vendor Purchase Code";
        BidOpeningLines: Record "Bid Opening Register Line";
        IFS: Record "Standard Purchase Code";
    begin
        //if not ConfirmManagement.ConfirmProcess(Text001, true) then
        //exit;
        BidOpeningLines.Reset;
        BidOpeningLines.SetRange(Code, BidOpeningRegister.Code);
        if BidOpeningLines.FindSet then begin
            repeat
                IFSDetails.Reset;
                IFSDetails.SetRange(Code, BidOpeningLines."IFS Code");
                IFSDetails.SetRange("Vendor No.", BidOpeningLines."Vendor No.");
                if IFSDetails.FindSet then begin
                    IFSDetails."Bid Opening Register No." := BidOpeningRegister.Code;
                    IFSDetails."Bid Opening Date (Technical)" := BidOpeningRegister."Bid Opening Date";
                    IFSDetails.Modify(true);
                end;
            //FnNotifyBidOpeningAttendees(BidOpeningLines);
            until BidOpeningLines.Next = 0;

        end;

        BidOpeningRegister.Posted := true;
        BidOpeningRegister."Posted By" := UserId;
        BidOpeningRegister."Posted Date" := Today;
        BidOpeningRegister."Bid Opening End Time" := Time;
        BidOpeningRegister.Modify(true);
        Bids.Reset;
        Bids.SetRange("No.", BidOpeningLines."Bid No.");
        if Bids.FindSet then begin
            Bids."Document Status" := Bids."document status"::Opened;
            Bids.Modify(true);
        end;
        IFS.Reset;
        IFS.SetRange(Code, BidOpeningRegister."IFS Code");
        if IFS.FindSet then begin
            IFS."Finance Opening Register" := BidOpeningRegister.Code;
            IFS.Modify(true);

        end;
        Message('%1 Opened Successfully', BidOpeningRegister."Tender Name");
    end;


    procedure FnPostIFPAddendum(TenderAddendumNotice: Record "Tender Addendum Notice")
    var
        RFI: Record "Request For Information";
        IFS: Record "Standard Purchase Code";
    begin
        TenderAddendumNotice.TestField("Notice No");
        RFI.Reset;
        RFI.SetRange(Code, TenderAddendumNotice."Notice No");
        if RFI.FindSet then
            if TenderAddendumNotice."Change Submission Details" = true then begin
                RFI."Submission End Date" := TenderAddendumNotice."New Submission End Date";
                RFI."Submission End Time" := TenderAddendumNotice."New Submission End Time";
                RFI.Modify(true);
            end;
        if TenderAddendumNotice."Change Prebid Meeting Details" = true then begin
        end;

        if TenderAddendumNotice."Change Tender Box Location" = true then begin
            RFI."Tender Box Location Code" := TenderAddendumNotice."New Tender Box Location";
            RFI.Modify(true);
        end;

        if TenderAddendumNotice."Change Bid Opening Details" = true then begin
            RFI."Invitation Opening Date" := TenderAddendumNotice."New Bid Opening Date";
            RFI."Invitation Opening Time" := TenderAddendumNotice."New Bid Opening Time";
            RFI.Modify(true);
        end;
    end;


    procedure FnPostIFRAddendum(TenderAddendumNotice: Record "Tender Addendum Notice")
    var
        RFI: Record "Request For Information";
        IFS: Record "Standard Purchase Code";
    begin
        TenderAddendumNotice.TestField("Notice No");
        RFI.Reset;
        RFI.SetRange(Code, TenderAddendumNotice."Notice No");
        if RFI.FindSet then
            if TenderAddendumNotice."Change Submission Details" = true then begin
                RFI."Submission End Date" := TenderAddendumNotice."New Submission End Date";
                RFI."Submission End Time" := TenderAddendumNotice."New Submission End Time";
                RFI.Modify(true);
            end;
        if TenderAddendumNotice."Change Prebid Meeting Details" = true then begin
        end;

        if TenderAddendumNotice."Change Tender Box Location" = true then begin
            RFI."Tender Box Location Code" := TenderAddendumNotice."New Tender Box Location";
            RFI.Modify(true);
        end;

        if TenderAddendumNotice."Change Bid Opening Details" = true then begin
            RFI."Invitation Opening Date" := TenderAddendumNotice."New Bid Opening Date";
            RFI."Invitation Opening Time" := TenderAddendumNotice."New Bid Opening Time";
            RFI.Modify(true);
        end;
    end;


    procedure FnPostIFSAddendum(TenderAddendumNotice: Record "Tender Addendum Notice")
    var
        RFI: Record "Request For Information";
        IFS: Record "Standard Purchase Code";
    begin
        TenderAddendumNotice.TestField("Invitation Notice No.");
        IFS.Reset;
        IFS.SetRange(Code, TenderAddendumNotice."Invitation Notice No.");
        if IFS.FindSet then
            if TenderAddendumNotice."Change Submission Details" = true then begin
                IFS."Submission End Date" := TenderAddendumNotice."New Submission End Date";
                IFS."Submission End Time" := TenderAddendumNotice."New Submission End Time";
                IFS.Modify(true);
            end;
        if TenderAddendumNotice."Change Prebid Meeting Details" = true then begin
            IFS."Mandatory Pre-bid Visit Date" := TenderAddendumNotice."New Prebid Meeting Date";
            IFS.Modify(true);
        end;

        if TenderAddendumNotice."Change Tender Box Location" = true then begin
            IFS."Tender Box Location Code" := TenderAddendumNotice."New Tender Box Location";
            IFS.Modify(true);
        end;

        if TenderAddendumNotice."Change Bid Opening Details" = true then begin
            IFS."Bid Opening Date" := TenderAddendumNotice."New Bid Opening Date";
            IFS."Bid Opening Time" := TenderAddendumNotice."New Bid Opening Time";
            IFS.Modify(true);
        end;

    end;


    procedure FnNotifySuppliers(NOA: Record "Bid Tabulation Header")
    var
        "Code": Code[10];
        ProcurementSetup: Record "Procurement Setup";
        IFPResponseLine: Record "IFP Response Line";
        Vendors: Record Vendor;
        InsCoverageLedgerEntry: Record "Ins. Coverage Ledger Entry";
        InsuranceReg: Record Insurance;
        Window: Dialog;
        EmailBody: array[2] of Text[30];
        BodyText: Text[250];
        mymail: Codeunit Mail;
        WindowisOpen: Boolean;
        FileDialog: Codeunit Mail;
        SendingDate: Date;
        SendingTime: Time;
        Counter: Integer;
        cu400: Codeunit Mail;
        SenderAddress: Text[100];
        UserSetup: Record "User Setup";
        HRSetup: Record "Human Resources Setup";
        CompInfo: Record "Company Information";
        RequesterName: Text[100];
        RequesterEmail: Text[100];
        emailhdr: Text[100];
        ProcNote: Text[1000];
        LoginDetails: Text[1000];
        CustEmail: Text[100];
        CompanyDetails: Text[250];
        SupplierDetails: Text[1000];
        SenderMessage: Text[1000];
        FileDirectory: Text[100];
        FileName: Text[100];
        RFIResponse2: Record "RFI Response";
        RFIResponse: Record "RFI Response";
        IFPResponseLine1: Record "IFP Response Line";
    begin
        RFIResponse.Reset;
        RFIResponse.SetRange("RFI Document No.", NOA."IFP Code");
        if RFIResponse.FindSet then begin
            repeat
                Vendors.Reset;
                Vendors.SetRange("No.", RFIResponse."Vendor No.");
                if Vendors.FindSet then begin
                    Vendors.TestField("E-Mail");

                    IFPResponseLine1.Reset;
                    IFPResponseLine1.SetRange("Document No.", RFIResponse."Document No.");
                    // IFPResponseLine.SETFILTER("Document No.",'<>%1',' ');
                    // IFPResponseLine.SETFILTER("Vendor No.",'<>%1',' ');
                    if IFPResponseLine1.FindSet then
                        // MESSAGE('Vendor %1',Vendors."E-Mail");
                        // MESSAGE('%1',IFPResponseLine."RFI Document No.");
                        // MESSAGE('Email %1',Vendors.Name);
                        CompInfo.Get;
                    ProcurementSetup.Get;
                    RequesterEmail := ProcurementSetup."Default Proc Email Contact";
                    RequesterName := ProcurementSetup."Default Proc Email Contact";
                    Window.Open('Sending...');
                    WindowisOpen := true;
                    //Create message
                    if ProcurementSetup."Default Proc Email Contact" = '' then
                        Error('Please Contact the IT Admin to specify the E-mail address under Procurement Setup page!!');
                    SenderAddress := ProcurementSetup."Default Proc Email Contact";
                    CustEmail := Vendors."E-Mail";
                    CompanyDetails := 'Dear Sir/Madam,<br>';
                    SenderMessage := '<BR>Thank you for Participating in the Prequalification Exercise<br/> Attached are the'
                    + ' results for your Prequalification Application<br/><br/>';
                    SupplierDetails := '';
                    //SupplierDetails:='<table style="border:2px;"><tr><th><b>CATEGORY</B></th><th>&nbsp;&nbsp;</th><th><b>RESULT</b></th></tr><tr><td>'+IFPResponseLine1."Category Description"
                    //+'</td><td>&nbsp;&nbsp;'+IFPResponseLine1."Vendor No."+'</td><td>'+FORMAT(IFPResponseLine1."Evaluation Decision")+'</td></tr></table><br/><br/>';
                    LoginDetails := 'If you require any assistance, please contact the Supply Chain Management Department<br/>';
                    ProcNote := '<BR> Regards';
                    RFIResponse2.Reset;
                    RFIResponse2.SetRange("Document No.", RFIResponse."Document No.");
                    if RFIResponse2.FindSet then
                        FileDirectory := 'C:\DOCS\';
                    FileName := 'Prequalification_' + RFIResponse2."Document No." + '.pdf';
                    // //Report.SaveAsPdf(70110, FileDirectory + FileName, RFIResponse2);
                    // if CustEmail = '' then
                    //     exit;
                    // //MESSAGE:='This is to notify you that there has been a request for Registration ' +  SupplierRequest."No." + ' From Supplier'+ SupplierRequest.Name;
                    // emailhdr := CompInfo.Name + ' PREQUALIFICATION OUTCOME';
                    // //cu400.CreateMessage(CompInfo.Name, SenderAddress, CustEmail, emailhdr,
                    // //CompanyDetails + '<BR></BR>' + SenderMessage + SupplierDetails + LoginDetails, true);
                    // //cu400.AddCC(RequesterEmail);
                    // //cu400.AddBodyline(ProcNote);
                    // //cu400.AddAttachment(FileDirectory + FileName, FileName);
                    // //cu400.Send;
                    SendingDate := Today;
                    SendingTime := Time;
                    Sleep(1000);
                    Window.Close;
                    //  UNTIL InsuranceReg.NEXT=0;
                    // END;
                    //MESSAGE('Notified on %1',Vendors."E-Mail");

                end;
            until RFIResponse.Next = 0;
        end;
        //MESSAGE('Notified on this  %1',Vendors."E-Mail");
        Message('Notified Successfully');
        //MESSAGE('Done');
    end;


    procedure FnNotifySuppliersIFR(NOA: Record "Bid Tabulation Header")
    var
        "Code": Code[10];
        ProcurementSetup: Record "Procurement Setup";
        IFPResponseLine: Record "IFP Response Line";
        Vendors: Record Vendor;
        InsCoverageLedgerEntry: Record "Ins. Coverage Ledger Entry";
        InsuranceReg: Record Insurance;
        Window: Dialog;
        EmailBody: array[2] of Text[30];
        BodyText: Text[250];
        mymail: Codeunit Mail;
        WindowisOpen: Boolean;
        FileDialog: Codeunit Mail;
        SendingDate: Date;
        SendingTime: Time;
        Counter: Integer;
        cu400: Codeunit Mail;
        SenderAddress: Text[100];
        UserSetup: Record "User Setup";
        HRSetup: Record "Human Resources Setup";
        CompInfo: Record "Company Information";
        RequesterName: Text[100];
        RequesterEmail: Text[100];
        emailhdr: Text[100];
        ProcNote: Text[1000];
        LoginDetails: Text[1000];
        CustEmail: Text[100];
        CompanyDetails: Text[250];
        SupplierDetails: Text[1000];
        SenderMessage: Text[1000];
        FileDirectory: Text[100];
        FileName: Text[100];
        RFIResponse2: Record "RFI Response";
        RFIResponse: Record "RFI Response";
        IFPResponseLine1: Record "IFP Response Line";
    begin
        RFIResponse.Reset;
        RFIResponse.SetRange("RFI Document No.", NOA."IFP Code");
        if RFIResponse.FindSet then begin
            repeat
                Vendors.Reset;
                Vendors.SetRange("No.", RFIResponse."Vendor No.");
                if Vendors.FindSet then begin
                    Vendors.TestField("E-Mail");

                    IFPResponseLine1.Reset;
                    IFPResponseLine1.SetRange("Document No.", RFIResponse."Document No.");
                    // IFPResponseLine.SETFILTER("Document No.",'<>%1',' ');
                    // IFPResponseLine.SETFILTER("Vendor No.",'<>%1',' ');
                    if IFPResponseLine1.FindSet then
                        // MESSAGE('Vendor %1',Vendors."E-Mail");
                        // MESSAGE('%1',IFPResponseLine."RFI Document No.");
                        // MESSAGE('Email %1',Vendors.Name);
                        CompInfo.Get;
                    ProcurementSetup.Get;
                    RequesterEmail := ProcurementSetup."Default Proc Email Contact";
                    RequesterName := ProcurementSetup."Default Proc Email Contact";
                    Window.Open('Sending...');
                    WindowisOpen := true;
                    //Create message
                    if ProcurementSetup."Default Proc Email Contact" = '' then
                        Error('Please Contact the IT Admin to specify the E-mail address under Procurement Setup page!!');
                    SenderAddress := ProcurementSetup."Default Proc Email Contact";
                    CustEmail := Vendors."E-Mail";
                    CompanyDetails := 'Dear Sir/Madam,<br>';
                    SenderMessage := '<BR>Thank you for Participating in the Supplier Registration Exercise<br/> Attached are the'
                    + ' results for your Registration Application<br/><br/>';
                    SupplierDetails := '';
                    //SupplierDetails:='<table style="border:2px;"><tr><th><b>CATEGORY</B></th><th>&nbsp;&nbsp;</th><th><b>RESULT</b></th></tr><tr><td>'+IFPResponseLine1."Category Description"
                    //+'</td><td>&nbsp;&nbsp;'+IFPResponseLine1."Vendor No."+'</td><td>'+FORMAT(IFPResponseLine1."Evaluation Decision")+'</td></tr></table><br/><br/>';
                    LoginDetails := 'If you require any assistance, please contact the Supply Chain Management Department<br/>';
                    ProcNote := '<BR> Regards';
                    RFIResponse2.Reset;
                    RFIResponse2.SetRange("Document No.", RFIResponse."Document No.");
                    if RFIResponse2.FindSet then
                        FileDirectory := 'C:\DOCS\';
                    FileName := 'Registration_' + RFIResponse."Document No." + '.pdf';
                    // //Report.SaveAsPdf(70111, FileDirectory + FileName, RFIResponse2);
                    // if CustEmail = '' then
                    //     exit;
                    // //MESSAGE:='This is to notify you that there has been a request for Registration ' +  SupplierRequest."No." + ' From Supplier'+ SupplierRequest.Name;
                    // emailhdr := CompInfo.Name + ' REGISTRATION OUTCOME';
                    // //cu400.CreateMessage(CompInfo.Name, SenderAddress, CustEmail, emailhdr,
                    // //CompanyDetails + '<BR></BR>' + SenderMessage + SupplierDetails + LoginDetails, true);
                    // //cu400.AddCC(RequesterEmail);
                    // //cu400.AddBodyline(ProcNote);
                    // //cu400.AddAttachment(FileDirectory + FileName, FileName);
                    // //cu400.Send;
                    SendingDate := Today;
                    SendingTime := Time;
                    Sleep(1000);
                    Window.Close;
                    //  UNTIL InsuranceReg.NEXT=0;
                    // END;
                    //MESSAGE('Notified on %1',Vendors."E-Mail");

                end;
            until RFIResponse.Next = 0;
        end;
        //MESSAGE('Notified on this  %1',Vendors."E-Mail");
        Message('Notified Successfully');
        //MESSAGE('Done');
    end;


    procedure FnPostAppeal(IFSAppealHeader: Record "IFS Appeal Header")
    var
        IFSAppealEntry: Record "IFS Appeal Entry";
        BidTabulationHeader: Record "Bid Tabulation Header";
        BidTabulationHeader1: Record "Bid Tabulation Header";
        Bidevaluationscore: Record "Bid Evaluation Score Entry";
        BidSCoreGuide: Record "Bid Score Requirement";
        LineNo: Integer;
        IFSDetails: Record "Standard Vendor Purchase Code";
        ProcuremnetSetup: Record "Procurement Setup";
        IFS: Record "Standard Purchase Code";
        Bids: Record "Purchase Header";
        FinanceLine: Record "Bid Tabulation Line";
        FinalEvalLine: Record "Bid Tabulation Line";
        FinalEvalReport1: Record "Bid Tabulation Header";
        FinalEvalReport: Record "Bid Tabulation Header";
    begin
        IFSAppealHeader.TestField("Appeal Date");
        IFSAppealHeader.TestField("Date of Verdict");
        IFSAppealHeader.TestField(Posted, false);
        IFSAppealEntry.Init;
        IFSAppealEntry.No := IFSAppealEntry.No + 100;
        IFSAppealEntry."Document No" := IFSAppealHeader.No;
        IFSAppealEntry."Notice of Award No." := IFSAppealHeader."Notice of Award No.";
        IFSAppealEntry."IFS Code" := IFSAppealHeader."IFS Code";
        IFSAppealEntry."IFP Code" := IFSAppealHeader."IFP Code";
        IFSAppealEntry.Type := IFSAppealHeader.Type;
        IFSAppealEntry."Vendor No" := IFSAppealHeader."Vendor No";
        IFSAppealEntry."Bid Response No" := IFSAppealHeader."Bid Response No";
        IFSAppealEntry."Posted By" := UserId;
        IFSAppealEntry."Posting Date" := Today;
        IFSAppealEntry."Appeal Date" := IFSAppealHeader."Appeal Date";
        IFSAppealEntry.Decision := IFSAppealHeader.Decision;
        IFSAppealEntry.Comments := IFSAppealHeader.Comments;
        IFSAppealEntry."Date of Verdict" := IFSAppealHeader."Date of Verdict";
        IFSAppealEntry.Insert(true);
        IFSAppealHeader.Posted := true;
        IFSAppealHeader."Posted By" := UserId;
        IFSAppealHeader."Posting Date" := Today;
        IFSAppealHeader.Modify(true);

        if IFSAppealHeader.Decision = IFSAppealHeader.Decision::Won then begin
            FinalEvalReport.Reset;
            FinalEvalReport.SetRange(Code, IFSAppealHeader."Notice of Award No.");
            if FinalEvalReport.FindSet then begin
                FinalEvalReport1.Init;
                FinalEvalReport1."Document Type" := FinalEvalReport."document type"::"Notice of Award";
                FinalEvalReport1."IFS Code" := FinalEvalReport."IFS Code";
                FinalEvalReport1."Document Date" := Today;
                FinalEvalReport1."Final Evaluation Report ID" := FinalEvalReport."Final Evaluation Report ID";
                FinalEvalReport1."Professional Opinion ID" := FinalEvalReport."Professional Opinion ID";
                FinalEvalReport1.Description := 'Notice of Award: ' + FinalEvalReport."IFS Code";
                FinalEvalReport1."Tender Name" := FinalEvalReport."Tender Name";
                FinalEvalReport1."Raised By" := UserId;
                FinalEvalReport1.Name := FinalEvalReport.Name;
                FinalEvalReport1."Tender Committee Role" := FinalEvalReport."tender committee role"::Chairperson;
                FinalEvalReport1."Bid Opening Date" := FinalEvalReport."Bid Opening Date";
                FinalEvalReport1."Evaluation Completion Date" := FinalEvalReport."Evaluation Completion Date";
                FinalEvalReport1.Validate(FinalEvalReport1."Appointed Bid Opening Comm", FinalEvalReport."Appointed Bid Opening Comm");
                FinalEvalReport1.Validate(FinalEvalReport1."Appointed Bid Evaluation Com", FinalEvalReport."Appointed Bid Evaluation Com");
                FinalEvalReport1."Professional Opinion ID" := FinalEvalReport."Professional Opinion ID";
                FinalEvalReport1."Final Evaluation Report ID" := FinalEvalReport."Final Evaluation Report ID";
                FinalEvalReport1."Primary Region" := FinalEvalReport."Primary Region";
                FinalEvalReport1."Linked to NOA" := FinalEvalReport.Code;
                FinalEvalReport.Appealed := true;
                FinalEvalReport."Appeal Date" := CreateDatetime(Today, Time);
                FinalEvalReport.Modify(true);
                FinalEvalReport1."Awarded Bid No" := IFSAppealHeader."Bid Response No";
                ;
                FinalEvalReport1."Awarded Bidder No." := IFSAppealHeader."Vendor No";
                FinalEvalReport1."Awarded Bidder Name" := IFSAppealHeader."Awarded Bidder Name";
                FinalEvalReport1."Award Tender Sum Inc Taxes" := IFSAppealHeader."Award Tender Sum Inc Taxes";

                IFS.Reset;
                IFS.SetRange(Code, FinalEvalReport."IFS Code");
                if IFS.FindSet then begin
                    FinalEvalReport1."Annual Procurement Plan ID" := IFS."Procurement Plan ID";
                    //FinalEvalReport1."Procurement Plan Date":=IFS.
                    FinalEvalReport1."Financial Year Code" := IFS."Financial Year Code";
                    FinalEvalReport1."Procurement Plan Line No." := IFS."Procurement Plan Line No.";
                    FinalEvalReport1."Procurement Plan Entry No" := IFS."Procurement Plan Entry No";
                    FinalEvalReport1."Available Procurement Budget" := IFS."Available Procurement Budget";
                    FinalEvalReport1."Budget Narration" := IFS."Budget Narration";
                end;

                if FinalEvalReport1.Insert(true) then begin
                    FinanceLine.Reset;
                    FinanceLine.SetRange("Tabulation ID", IFSAppealHeader."Notice of Award No.");
                    if FinanceLine.FindSet then begin
                        repeat
                            FinalEvalLine.Init;
                            FinalEvalLine."Tabulation ID" := FinalEvalReport1.Code;
                            FinalEvalLine."Tabulation Type" := FinalEvalLine."tabulation type"::"Notice of Award";
                            FinalEvalLine."Document Type" := FinalEvalLine."document type"::Quote;
                            FinalEvalLine."No." := FinanceLine."No.";
                            FinalEvalLine."Bidder Name" := FinanceLine."Bidder Name";
                            FinalEvalLine."Bidder No" := FinanceLine."Bidder No";
                            FinalEvalLine."Invitation For Supply No" := FinanceLine."Invitation For Supply No";
                            FinalEvalLine."Bid Currency Code" := FinanceLine."Bid Currency Code";
                            // FinalEvalLine.ReFinanceLine."Read-out Bid Price (A)"
                            FinalEvalLine."Preliminary Evaluation Date" := FinanceLine."Preliminary Evaluation Date";
                            FinalEvalLine."Responsive Bid" := FinanceLine."Responsive Bid";
                            FinalEvalLine."Technical Evaluation Date" := FinanceLine."Technical Evaluation Date";
                            FinalEvalLine."Weighted Tech Score %" := FinanceLine."Weighted Tech Score %";
                            FinalEvalLine."Passed Tech Evaluation" := FinanceLine."Passed Tech Evaluation";
                            FinalEvalLine."Tech Evaluation Ranking" := FinanceLine."Tech Evaluation Ranking";
                            //FinalEvalLine.  IFSDetails."Bid Opening Finance Register"
                            //FinalEvalLine."Bid Opening Date":=FinanceLine.ope
                            //FinalEvalLine.finaIFSDetails."Financial Eval Register No"
                            FinalEvalLine."Financial Evaluation Date" := FinanceLine."Financial Evaluation Date";
                            FinalEvalLine."Read-out Bid Price (A)" := FinanceLine."Read-out Bid Price (A)";
                            FinalEvalLine."Arithmetic Corrections (B)" := FinanceLine."Arithmetic Corrections (B)";
                            FinalEvalLine."Corrected Bid Price (C=A+B)" := FinanceLine."Corrected Bid Price (C=A+B)";
                            FinalEvalLine."Unconditional Discount % (D)" := FinanceLine."Unconditional Discount % (D)";
                            FinalEvalLine."Unconditional Disc Amount (E)" := FinanceLine."Unconditional Disc Amount (E)";
                            FinalEvalLine."Corrected & Disc Bid Price" := FinanceLine."Corrected & Disc Bid Price";
                            FinalEvalLine."Any Additional Adjustments (G)" := FinanceLine."Any Additional Adjustments (G)";
                            FinalEvalLine."Any Priced Deviations (H))" := FinanceLine."Any Priced Deviations (H))";
                            FinalEvalLine."Final Evaluated Bid Price" := FinanceLine."Final Evaluated Bid Price";
                            FinalEvalLine."Weighted Financial Score %" := FinanceLine."Weighted Financial Score %";
                            FinalEvalLine."Weighted Tech Score %" := FinanceLine."Weighted Tech Score %";
                            FinalEvalLine."Evaluation Committee Recomm" := FinanceLine."Evaluation Committee Recomm";
                            FinalEvalLine."Financial Evaluation Comm Rem" := FinanceLine."Financial Evaluation Comm Rem";
                            FinalEvalLine."Aggregate Weighted Score %" := FinanceLine."Aggregate Weighted Score %";
                            FinalEvalLine."Pre-bid Register No." := FinanceLine."Pre-bid Register No.";
                            FinalEvalLine."Prebid Conference Date" := FinanceLine."Prebid Conference Date";
                            FinalEvalLine."Bid Opening Date" := FinanceLine."Bid Opening Date";
                            FinalEvalLine."Bid Opening Committee Remarks" := FinanceLine."Bid Opening Committee Remarks";
                            FinalEvalLine."Bid Opening Date (Financial)" := FinanceLine."Bid Opening Date (Financial)";
                            FinalEvalLine."Bid Opening Finance Register" := FinanceLine."Bid Opening Finance Register";
                            FinalEvalLine."Bid Opening Register No." := FinanceLine."Bid Opening Register No.";
                            FinalEvalLine."Bid Opening Result" := FinanceLine."Bid Opening Result";
                            FinalEvalLine."Preliminary Evaluation Date" := FinanceLine."Preliminary Evaluation Date";
                            FinalEvalLine."Preliminary Evaluation Outcome" := FinanceLine."Preliminary Evaluation Outcome";
                            FinalEvalLine."Preliminary Evaluation Reg" := FinanceLine."Preliminary Evaluation Reg";
                            FinalEvalLine."Preminary Evaluation Committee" := FinanceLine."Preminary Evaluation Committee";
                            //FinalEvalLine."Tech Evaluation Ranking":=IFSDetails.;
                            FinalEvalLine."Technical Evaluation Date" := FinanceLine."Technical Evaluation Date";
                            //      IF FinanceLine."Evaluation Committee Recomm"=FinanceLine."Evaluation Committee Recomm"::Award THEN BEGIN
                            //        FinalEvalLine."Evaluation Committee Recomm":=FinalEvalLine."Evaluation Committee Recomm"::Unsuccesful;
                            //        FinalEvalLine.MODIFY(TRUE);
                            //        END;
                            //      IF FinanceLine."No."=IFSAppealHeader."Bid Response No" THEN BEGIN
                            //        FinalEvalLine."Evaluation Committee Recomm":=FinalEvalLine."Evaluation Committee Recomm"::Award;
                            //        FinalEvalLine.MODIFY(TRUE);
                            //        END;

                            FinalEvalLine.Insert(true);
                        until FinanceLine.Next = 0;

                    end;
                end;
                Page.Run(75281, FinalEvalReport1)
            end else
                Page.Run(75281, FinalEvalReport1)
            //END
            // END;
        end;
    end;


    procedure FnPostPlanRevisions2(ProcurementPlan: Record "Procurement Plan")
    var
        ProcurementPlanLines: Record "Procurement Plan Lines";
        ProcurementPlanLines1: Record "Procurement Plan Lines";
        ProcurementPlanEntry: Record "Procurement Plan Entry";
        ProcurementPlanEntry1: Record "Procurement Plan Entry";
        TXT002: label 'Are you sure to Post the Procurement plan Revisions ?';
    begin
        if Confirm(TXT002) = true then begin
            ProcurementPlanLines.Reset;
            ProcurementPlanLines.SetRange("Procurement Plan ID", ProcurementPlan.Code);
            if ProcurementPlanLines.FindSet then begin
                ProcurementPlanLines1.Reset;
                ProcurementPlanLines1.SetRange("Procurement Plan ID", ProcurementPlan."Plan No");
                ProcurementPlanLines1.SetRange("Planning Category", ProcurementPlanLines."Planning Category");
                if ProcurementPlanLines.FindSet then begin
                    repeat
                        ProcurementPlanLines1.Init;
                        ProcurementPlanLines1."Document Type" := ProcurementPlan."document type"::"Procurement Plan";
                        ProcurementPlanLines1."Procurement Plan ID" := ProcurementPlan."Plan No";
                        // ProcurementPlanLines1."PP Line No":=ProcurementPlanLines."PP Line No";
                        ProcurementPlanLines1."Planning Category" := ProcurementPlanLines."Planning Category";
                        ProcurementPlanLines1.Description := ProcurementPlanLines.Description;
                        ProcurementPlanLines1."Procurement Method" := ProcurementPlanLines."Procurement Method";
                        ProcurementPlanLines1."Procurement Type" := ProcurementPlanLines."Procurement Type";
                        ProcurementPlanLines1."Solicitation Type" := ProcurementPlanLines."Solicitation Type";
                        ProcurementPlanLines1."Primary Source of Funds" := ProcurementPlanLines."Primary Source of Funds";
                        if ProcurementPlanLines1.Modify(true) then begin

                            ProcurementPlanEntry.Reset;
                            ProcurementPlanEntry.SetRange("Procurement Plan ID", ProcurementPlan.Code);
                            if ProcurementPlanEntry.FindSet then begin
                                //      ProcurementPlanEntry1.RESET;
                                //      ProcurementPlanEntry1.SETRANGE("Procurement Plan ID",ProcurementPlan."Plan No");
                                //      ProcurementPlanEntry1.SETRANGE("Entry No.",ProcurementPlanEntry."Vote Item");
                                //      IF ProcurementPlanEntry1.FINDSET THEN BEGIN
                                //        REPEAT
                                //        ProcurementPlanEntry1.Blocked:=TRUE;
                                //        ProcurementPlanEntry1.MODIFY(TRUE);
                                //        UNTIL ProcurementPlanEntry1.NEXT=0;
                                //        END ELSE BEGIN

                                repeat
                                    ProcurementPlanEntry1.Init;
                                    ProcurementPlanEntry1."Procurement Plan ID" := ProcurementPlan."Plan No";
                                    ProcurementPlanEntry1."Document Type" := ProcurementPlan."document type"::"Procurement Plan";
                                    ProcurementPlanEntry1."Planning Category" := ProcurementPlanEntry."Planning Category";
                                    ProcurementPlanEntry1.Description := ProcurementPlanEntry.Description;
                                    ProcurementPlanEntry1."Solicitation Type" := ProcurementPlanEntry."Solicitation Type";
                                    ProcurementPlanEntry1."Procurement Method" := ProcurementPlanEntry."Procurement Method";
                                    ProcurementPlanEntry1.Quantity := ProcurementPlanEntry.Quantity;
                                    ProcurementPlanEntry1."Unit Cost" := ProcurementPlanEntry."Unit Cost";
                                    ProcurementPlanEntry1."Line Budget Cost" := ProcurementPlanEntry."Line Budget Cost";
                                    ProcurementPlanEntry1.Directorate := ProcurementPlanEntry.Directorate;
                                    ProcurementPlanEntry1.Department := ProcurementPlanEntry.Department;
                                    ProcurementPlanEntry1."Global Dimension 1 Code" := ProcurementPlanEntry."Global Dimension 1 Code";
                                    ProcurementPlanEntry1."Global Dimension 2 Code" := ProcurementPlanEntry."Global Dimension 2 Code";
                                    ProcurementPlanEntry1."Budget Control Job No" := ProcurementPlanEntry."Budget Control Job No";
                                    ProcurementPlanEntry1."Budget Control Job Task No." := ProcurementPlanEntry."Budget Control Job Task No.";
                                    ProcurementPlanEntry1."Procurement Type" := ProcurementPlanEntry."Procurement Type";
                                    ProcurementPlanEntry1."Procurement Use" := ProcurementPlanEntry."Procurement Use";
                                    ProcurementPlanEntry1."Preference/Reservation Code" := ProcurementPlanEntry."Preference/Reservation Code";
                                    ProcurementPlanEntry1."Vendor Group" := ProcurementPlanEntry."Vendor Group";
                                    ProcurementPlanEntry1."Vendor Type" := ProcurementPlanEntry."Vendor Type";
                                    ProcurementPlanEntry1."Work Plan Project ID" := ProcurementPlanEntry."Work Plan Project ID";
                                    ProcurementPlanEntry1."Workplan Task No." := ProcurementPlanEntry."Workplan Task No.";
                                    ProcurementPlanEntry1."Q1 Amount" := ProcurementPlanEntry."Q1 Amount";
                                    ProcurementPlanEntry1."Q1 Quantity" := ProcurementPlanEntry."Q1 Quantity";
                                    ProcurementPlanEntry1."Q2 Amount" := ProcurementPlanEntry."Q2 Amount";
                                    ProcurementPlanEntry1."Q2 Quantity" := ProcurementPlanEntry."Q2 Quantity";
                                    ProcurementPlanEntry1."Q3 Amount" := ProcurementPlanEntry."Q3 Amount";
                                    ProcurementPlanEntry1."Q3 Quantity" := ProcurementPlanEntry."Q3 Quantity";
                                    ProcurementPlanEntry1."Q4 Amount" := ProcurementPlanEntry."Q4 Amount";
                                    ProcurementPlanEntry1."Q4 Quantity" := ProcurementPlanEntry."Q4 Quantity";
                                    ProcurementPlanEntry1.Insert(true);
                                until ProcurementPlanEntry.Next = 0;
                                // END;
                            end;
                        end;
                    until ProcurementPlanLines.Next = 0;
                end else begin
                    //IF NOT Find lines

                    ProcurementPlanLines.Reset;
                    ProcurementPlanLines.SetRange("Procurement Plan ID", ProcurementPlan.Code);
                    // ProcurementPlanLines1.SETRANGE("Planning Category",ProcurementPlanLines."Planning Category");
                    if ProcurementPlanLines.FindSet then begin
                        repeat
                            ProcurementPlanLines1.Init;
                            ProcurementPlanLines1."Document Type" := ProcurementPlan."document type"::"Procurement Plan";
                            ProcurementPlanLines1."Procurement Plan ID" := ProcurementPlan."Plan No";
                            // ProcurementPlanLines1."PP Line No":=ProcurementPlanLines."PP Line No";
                            ProcurementPlanLines1."Planning Category" := ProcurementPlanLines."Planning Category";
                            ProcurementPlanLines1.Description := ProcurementPlanLines.Description;
                            ProcurementPlanLines1."Procurement Method" := ProcurementPlanLines."Procurement Method";
                            ProcurementPlanLines1."Procurement Type" := ProcurementPlanLines."Procurement Type";
                            ProcurementPlanLines1."Solicitation Type" := ProcurementPlanLines."Solicitation Type";
                            ProcurementPlanLines1."Primary Source of Funds" := ProcurementPlanLines."Primary Source of Funds";
                            ProcurementPlanLines1.Insert(true);
                        until ProcurementPlanLines.Next = 0;
                    end;

                    //
                end;

            end;

        end;
        Message('Posted Successfully');
    end;


    procedure FnSuggestPlanLines(ProcurementPlan: Record "Procurement Plan")
    var
        ProcurementPlanLines: Record "Procurement Plan Lines";
        ProcurementPlanLines1: Record "Procurement Plan Lines";
        ProcurementPlanEntry: Record "Procurement Plan Entry";
        ProcurementPlanEntry1: Record "Procurement Plan Entry";
        TXT001: label 'Are you sure to suggest Procurement plan Lines ?';
    begin
        if Confirm(TXT001) = true then begin
            ProcurementPlanEntry.Reset;
            ProcurementPlanEntry.SetRange("Procurement Plan ID", ProcurementPlan.Code);
            if ProcurementPlanEntry.FindSet then begin
                ProcurementPlanEntry.DeleteAll;
            end;
            ProcurementPlanLines.Reset;
            ProcurementPlanLines.SetRange("Procurement Plan ID", ProcurementPlan.Code);
            if ProcurementPlanLines.FindSet then begin
                ProcurementPlanLines.DeleteAll;
            end;
            ProcurementPlan.TestField("Plan No");
            ProcurementPlanLines.Reset;
            ProcurementPlanLines.SetRange("Procurement Plan ID", ProcurementPlan."Plan No");
            if ProcurementPlanLines.FindSet then begin
                repeat
                    ProcurementPlanLines1.Init;
                    ProcurementPlanLines1."Document Type" := ProcurementPlan."Document Type";
                    ProcurementPlanLines1."Procurement Plan ID" := ProcurementPlan.Code;
                    ProcurementPlanLines1."Plan Type" := ProcurementPlanLines1."plan type"::"...";
                    ProcurementPlanLines1."PP Line No" := ProcurementPlanLines."PP Line No";
                    ProcurementPlanLines1."Planning Category" := ProcurementPlanLines."Planning Category";
                    ProcurementPlanLines1.Description := ProcurementPlanLines.Description;
                    ProcurementPlanLines1."Procurement Method" := ProcurementPlanLines."Procurement Method";
                    ProcurementPlanLines1."Procurement Type" := ProcurementPlanLines."Procurement Type";
                    ProcurementPlanLines1."Solicitation Type" := ProcurementPlanLines."Solicitation Type";
                    ProcurementPlanLines1."Primary Source of Funds" := ProcurementPlanLines."Primary Source of Funds";

                    ProcurementPlanLines1.Insert(true);
                until ProcurementPlanLines.Next = 0;


            end;
            ProcurementPlanEntry.Reset;
            ProcurementPlanEntry.SetRange("Procurement Plan ID", ProcurementPlan."Plan No");
            ProcurementPlanEntry.SetRange(Blocked, false);
            if ProcurementPlanEntry.FindSet then begin
                repeat
                    ProcurementPlanEntry1.Init;
                    ProcurementPlanEntry1."Procurement Plan ID" := ProcurementPlan.Code;
                    ProcurementPlanEntry1."Entry No." := ProcurementPlanEntry1."Entry No." + 100;
                    ProcurementPlanEntry1."Planning Category" := ProcurementPlanEntry."Planning Category";
                    ProcurementPlanEntry1."Document Type" := ProcurementPlanEntry1."document type"::"Revision Voucher";
                    ProcurementPlanEntry1."Revised Plan No" := ProcurementPlan."Plan No";
                    ProcurementPlanEntry1."Vote Item" := ProcurementPlanEntry."Entry No.";
                    ProcurementPlanEntry1.Description := ProcurementPlanEntry.Description;
                    ProcurementPlanEntry1."Solicitation Type" := ProcurementPlanEntry."Solicitation Type";
                    ProcurementPlanEntry1."Procurement Method" := ProcurementPlanEntry."Procurement Method";
                    ProcurementPlanEntry1.Quantity := ProcurementPlanEntry.Quantity;
                    ProcurementPlanEntry1."Revision  No" := ProcurementPlanEntry."Revision  No";
                    ProcurementPlanEntry1."Unit Cost" := ProcurementPlanEntry."Unit Cost";
                    ProcurementPlanEntry1."Line Budget Cost" := ProcurementPlanEntry."Line Budget Cost";
                    ProcurementPlanEntry1.Directorate := ProcurementPlanEntry.Directorate;
                    ProcurementPlanEntry1.Department := ProcurementPlanEntry.Department;
                    ProcurementPlanEntry1."Global Dimension 1 Code" := ProcurementPlanEntry."Global Dimension 1 Code";
                    ProcurementPlanEntry1."Global Dimension 2 Code" := ProcurementPlanEntry."Global Dimension 2 Code";
                    ProcurementPlanEntry1."Budget Control Job No" := ProcurementPlanEntry."Budget Control Job No";
                    ProcurementPlanEntry1."Budget Control Job Task No." := ProcurementPlanEntry."Budget Control Job Task No.";
                    ProcurementPlanEntry1."Procurement Type" := ProcurementPlanEntry."Procurement Type";
                    ProcurementPlanEntry1."Procurement Use" := ProcurementPlanEntry."Procurement Use";
                    ProcurementPlanEntry1."Preference/Reservation Code" := ProcurementPlanEntry."Preference/Reservation Code";
                    ProcurementPlanEntry1."Vendor Group" := ProcurementPlanEntry."Vendor Group";
                    ProcurementPlanEntry1."Vendor Type" := ProcurementPlanEntry."Vendor Type";
                    ProcurementPlanEntry1."Work Plan Project ID" := ProcurementPlanEntry."Work Plan Project ID";
                    ProcurementPlanEntry1."Workplan Task No." := ProcurementPlanEntry."Workplan Task No.";
                    ProcurementPlanEntry1."Q1 Amount" := ProcurementPlanEntry."Q1 Amount";
                    ProcurementPlanEntry1."Q1 Quantity" := ProcurementPlanEntry."Q1 Quantity";
                    ProcurementPlanEntry1."Q2 Amount" := ProcurementPlanEntry."Q2 Amount";
                    ProcurementPlanEntry1."Q2 Quantity" := ProcurementPlanEntry."Q2 Quantity";
                    ProcurementPlanEntry1."Q3 Amount" := ProcurementPlanEntry."Q3 Amount";
                    ProcurementPlanEntry1."Q3 Quantity" := ProcurementPlanEntry."Q3 Quantity";
                    ProcurementPlanEntry1."Q4 Amount" := ProcurementPlanEntry."Q4 Amount";
                    ProcurementPlanEntry1."Q4 Quantity" := ProcurementPlanEntry."Q4 Quantity";
                    ProcurementPlanEntry1."Invite Tender" := ProcurementPlanEntry."Invite Tender";
                    ProcurementPlanEntry1."Open Tender" := ProcurementPlanEntry."Open Tender";
                    ProcurementPlanEntry1."Bid Evaluation" := ProcurementPlanEntry."Bid Evaluation";
                    ProcurementPlanEntry1."Tender Committee Action" := ProcurementPlanEntry."Tender Committee Action";
                    ProcurementPlanEntry1."Notification of Award" := ProcurementPlanEntry."Notification of Award";
                    ProcurementPlanEntry1."Signing of Contract" := ProcurementPlanEntry."Signing of Contract";
                    ProcurementPlanEntry1."Completion of works" := ProcurementPlanEntry."Completion of works";
                    ProcurementPlanEntry1."Procurement Duration (Days)" := ProcurementPlanEntry."Procurement Duration (Days)";
                    ProcurementPlanEntry1."Procurement Start Date" := ProcurementPlanEntry."Procurement Start Date";
                    ProcurementPlanEntry1."Procurement End Date" := ProcurementPlanEntry."Procurement End Date";
                    //ProcurementPlanEntry1.TRANSFERFIELDS(ProcurementPlanEntry);
                    ProcurementPlanEntry1.Insert(true);
                until ProcurementPlanEntry.Next = 0;
            end;


        end;
        Message('Suggested Successfully');
    end;


    procedure FnPostPlanRevisions(ProcurementPlan: Record "Procurement Plan")
    var
        ProcurementPlanLines: Record "Procurement Plan Lines";
        ProcurementPlanLines1: Record "Procurement Plan Lines";
        ProcurementPlanEntry: Record "Procurement Plan Entry";
        ProcurementPlanEntry1: Record "Procurement Plan Entry";
        TXT002: label 'Are you sure to Post the Procurement plan Revisions ?';
        PlanEntry: Record "Procurement Plan Entry";
        PlanEntry1: Record "Procurement Plan Entry";
    begin
        if Confirm(TXT002) = true then begin
            PlanEntry.Reset;
            PlanEntry.SetRange("Procurement Plan ID", ProcurementPlan.Code);
            if PlanEntry.FindSet then begin
                repeat
                    PlanEntry1.Reset;
                    PlanEntry1.SetRange("Procurement Plan ID", ProcurementPlan."Plan No");
                    PlanEntry1.SetRange("Entry No.", PlanEntry."Vote Item");
                    if PlanEntry1.FindSet then begin
                        PlanEntry1.Blocked := true;
                        PlanEntry1.Modify(true);
                    end;
                until PlanEntry.Next = 0;
            end;
            ProcurementPlanLines.Reset;
            ProcurementPlanLines.SetRange("Procurement Plan ID", ProcurementPlan.Code);
            if ProcurementPlanLines.FindSet then begin
                repeat
                    ProcurementPlanLines1.Reset;
                    ProcurementPlanLines1.SetRange("Procurement Plan ID", ProcurementPlan."Plan No");
                    ProcurementPlanLines1.SetRange("Planning Category", ProcurementPlanLines."Planning Category");
                    if not ProcurementPlanLines1.FindSet then begin
                        //      REPEAT
                        //  ProcurementPlanLines1.INIT;
                        //  ProcurementPlanLines1."Document Type":=ProcurementPlan."Document Type"::"Procurement Plan";
                        //  ProcurementPlanLines1."Procurement Plan ID":=ProcurementPlan."Plan No";
                        // // ProcurementPlanLines1."PP Line No":=ProcurementPlanLines."PP Line No";
                        //  ProcurementPlanLines1."Planning Category":=ProcurementPlanLines."Planning Category";
                        //  ProcurementPlanLines1.Description:=ProcurementPlanLines.Description;
                        //  ProcurementPlanLines1."Procurement Method":=ProcurementPlanLines."Procurement Method";
                        //  ProcurementPlanLines1."Procurement Type":=ProcurementPlanLines."Procurement Type";
                        //  ProcurementPlanLines1."Solicitation Type":=ProcurementPlanLines."Solicitation Type";
                        //  ProcurementPlanLines1."Primary Source of Funds":=ProcurementPlanLines."Primary Source of Funds";
                        //  ProcurementPlanLines1.MODIFY:=TRUE;
                        //  UNTIL ProcurementPlanLines.NEXT=0;
                        // END   ELSE BEGIN
                        //   REPEAT
                        ProcurementPlanLines1.Init;
                        ProcurementPlanLines1."Document Type" := ProcurementPlan."document type"::"Procurement Plan";
                        ProcurementPlanLines1."Procurement Plan ID" := ProcurementPlan."Plan No";
                        // ProcurementPlanLines1."PP Line No":=ProcurementPlanLines."PP Line No";
                        ProcurementPlanLines1."Planning Category" := ProcurementPlanLines."Planning Category";
                        ProcurementPlanLines1.Description := ProcurementPlanLines.Description;
                        ProcurementPlanLines1."Procurement Method" := ProcurementPlanLines."Procurement Method";
                        ProcurementPlanLines1."Procurement Type" := ProcurementPlanLines."Procurement Type";
                        ProcurementPlanLines1."Solicitation Type" := ProcurementPlanLines."Solicitation Type";
                        ProcurementPlanLines1."Primary Source of Funds" := ProcurementPlanLines."Primary Source of Funds";
                        ProcurementPlanLines1.Insert(true);
                    end;
                until ProcurementPlanLines.Next = 0;
            end;


            ProcurementPlanEntry.Reset;
            ProcurementPlanEntry.SetRange("Procurement Plan ID", ProcurementPlan.Code);
            if ProcurementPlanEntry.FindSet then begin
                repeat
                    ProcurementPlanEntry1.Init;
                    ProcurementPlanEntry1."Procurement Plan ID" := ProcurementPlan."Plan No";
                    ProcurementPlanEntry1."Document Type" := ProcurementPlan."document type"::"Procurement Plan";
                    ProcurementPlanEntry1."Planning Category" := ProcurementPlanEntry."Planning Category";
                    ProcurementPlanEntry1.Description := ProcurementPlanEntry.Description;
                    ProcurementPlanEntry1."Solicitation Type" := ProcurementPlanEntry."Solicitation Type";
                    ProcurementPlanEntry1."Procurement Method" := ProcurementPlanEntry."Procurement Method";
                    ProcurementPlanEntry1.Quantity := ProcurementPlanEntry.Quantity;
                    ProcurementPlanEntry1."Unit Cost" := ProcurementPlanEntry."Unit Cost";
                    ProcurementPlanEntry1."Line Budget Cost" := ProcurementPlanEntry."Line Budget Cost";
                    ProcurementPlanEntry1.Directorate := ProcurementPlanEntry.Directorate;
                    ProcurementPlanEntry1.Department := ProcurementPlanEntry.Department;
                    ProcurementPlanEntry1."Global Dimension 1 Code" := ProcurementPlanEntry."Global Dimension 1 Code";
                    ProcurementPlanEntry1."Global Dimension 2 Code" := ProcurementPlanEntry."Global Dimension 2 Code";
                    ProcurementPlanEntry1."Budget Control Job No" := ProcurementPlanEntry."Budget Control Job No";
                    ProcurementPlanEntry1."Budget Control Job Task No." := ProcurementPlanEntry."Budget Control Job Task No.";
                    ProcurementPlanEntry1."Procurement Type" := ProcurementPlanEntry."Procurement Type";
                    ProcurementPlanEntry1."Procurement Use" := ProcurementPlanEntry."Procurement Use";
                    ProcurementPlanEntry1."Preference/Reservation Code" := ProcurementPlanEntry."Preference/Reservation Code";
                    ProcurementPlanEntry1."Vendor Group" := ProcurementPlanEntry."Vendor Group";
                    ProcurementPlanEntry1."Vendor Type" := ProcurementPlanEntry."Vendor Type";
                    ProcurementPlanEntry1."Work Plan Project ID" := ProcurementPlanEntry."Work Plan Project ID";
                    ProcurementPlanEntry1."Workplan Task No." := ProcurementPlanEntry."Workplan Task No.";
                    ProcurementPlanEntry1."Q1 Amount" := ProcurementPlanEntry."Q1 Amount";
                    ProcurementPlanEntry1."Q1 Quantity" := ProcurementPlanEntry."Q1 Quantity";
                    ProcurementPlanEntry1."Q2 Amount" := ProcurementPlanEntry."Q2 Amount";
                    ProcurementPlanEntry1."Q2 Quantity" := ProcurementPlanEntry."Q2 Quantity";
                    ProcurementPlanEntry1."Q3 Amount" := ProcurementPlanEntry."Q3 Amount";
                    ProcurementPlanEntry1."Q3 Quantity" := ProcurementPlanEntry."Q3 Quantity";
                    ProcurementPlanEntry1."Q4 Amount" := ProcurementPlanEntry."Q4 Amount";
                    ProcurementPlanEntry1."Q4 Quantity" := ProcurementPlanEntry."Q4 Quantity";
                    ProcurementPlanEntry1."Invite Tender" := ProcurementPlanEntry."Invite Tender";
                    ProcurementPlanEntry1."Open Tender" := ProcurementPlanEntry."Open Tender";
                    ProcurementPlanEntry1."Revision  No" := ProcurementPlanEntry."Revision  No" + 1;
                    ProcurementPlanEntry1."Bid Evaluation" := ProcurementPlanEntry."Bid Evaluation";
                    ProcurementPlanEntry1."Tender Committee Action" := ProcurementPlanEntry."Tender Committee Action";
                    ProcurementPlanEntry1."Notification of Award" := ProcurementPlanEntry."Notification of Award";
                    ProcurementPlanEntry1."Signing of Contract" := ProcurementPlanEntry."Signing of Contract";
                    ProcurementPlanEntry1."Completion of works" := ProcurementPlanEntry."Completion of works";
                    ProcurementPlanEntry1."Procurement Duration (Days)" := ProcurementPlanEntry."Procurement Duration (Days)";
                    ProcurementPlanEntry1."Procurement Start Date" := ProcurementPlanEntry."Procurement Start Date";
                    ProcurementPlanEntry1."Procurement End Date" := ProcurementPlanEntry."Procurement End Date";
                    ProcurementPlanEntry1.Insert(true);
                until ProcurementPlanEntry.Next = 0;
                // END;
            end;


        end;
        Message('Posted Successfully');
    end;


    procedure FnPostOpeningTermination(EvaluationHeader: Record "Bid Opening Register")
    var
        Bidevaluationscore: Record "Bid Evaluation Score Entry";
        BidSCoreGuide: Record "Bid Score Requirement";
        LineNo: Integer;
        IFSDetails: Record "Standard Vendor Purchase Code";
        ProcuremnetSetup: Record "Procurement Setup";
        IFS: Record "Standard Purchase Code";
        Bids: Record "Purchase Header";
        FinanceLine: Record "Finance Evaluation Line";
        FinalEvalReport: Record "Bid Tabulation Header";
        FinalEvalLine: Record "Bid Tabulation Line";
        BidEvaluationRegister: Record "Bid Evaluation Register";
    begin
        EvaluationHeader.TestField("Tender Cancellation Reason");
        EvaluationHeader.TestField("IFS Code");
        //   IFS.RESET;
        //   IFS.SETRANGE(Code,EvaluationHeader."IFS Code");
        //   IF IFS.FINDSET THEN BEGIN
        //     IFS."Document Status":=IFS."Document Status"::Evaluation;
        //     IFS.MODIFY;
        //     END;
        //Generate Opinion
        FinalEvalReport.Reset;
        FinalEvalReport.SetRange("IFS Code", EvaluationHeader."IFS Code");
        if not FinalEvalReport.FindSet then begin
            FinalEvalReport.Init;
            FinalEvalReport."Document Type" := FinalEvalReport."document type"::"Professional Opinion";
            FinalEvalReport."IFS Code" := EvaluationHeader."IFS Code";
            FinalEvalReport."Document Date" := Today;
            FinalEvalReport."Financial Evaluation ID" := EvaluationHeader.Code;
            FinalEvalReport.Description := 'Professional  Opinion Report' + EvaluationHeader."IFS Code";
            FinalEvalReport."Tender Name" := EvaluationHeader."Tender Name";
            FinalEvalReport."Raised By" := UserId;
            FinalEvalReport."Tender Committee Role" := FinalEvalReport."tender committee role"::Chairperson;
            FinalEvalReport."Bid Opening Date" := EvaluationHeader."Bid Opening Date";
            FinalEvalReport."Reason for Tender Termination" := EvaluationHeader.Remarks;
            FinalEvalReport."Tender Cancellation Reason" := EvaluationHeader."Tender Cancellation Reason";
            FinalEvalReport."Termination Request" := true;
            FinalEvalReport."Appointed Bid Opening Comm" := IFS."Bid Opening Committe";
            FinalEvalReport."Primary Region" := EvaluationHeader."Primary Region";
            FinalEvalReport."Bid Opening Register(Tech)" := EvaluationHeader.Code;
            FinalEvalReport."Process Type" := FinalEvalReport."process type"::IFS;
            if FinalEvalReport.Insert(true) then begin
                FinalEvalReport.Validate(FinalEvalReport."Appointed Bid Opening Comm");
                Bids.Reset;
                Bids.SetRange("Invitation For Supply No", EvaluationHeader."IFS Code");
                if Bids.FindSet then begin
                    repeat
                        FinalEvalLine.Init;
                        FinalEvalLine."Tabulation ID" := FinalEvalReport.Code;
                        FinalEvalLine."Tabulation Type" := FinalEvalLine."tabulation type"::"Professional Opinion";
                        FinalEvalLine."Document Type" := FinalEvalLine."document type"::Quote;
                        FinalEvalLine."No." := Bids."No.";
                        FinalEvalLine."Bidder Name" := Bids."Buy-from Vendor Name";
                        FinalEvalLine."Bidder No" := Bids."Vendor No.";
                        FinalEvalLine."Invitation For Supply No" := Bids."Invitation For Supply No";
                        FinalEvalLine."Bid Currency Code" := Bids."Currency Code";
                        FinalEvalLine.Insert(true);
                    until Bids.Next = 0;
                end;
            end;
            Page.Run(75278, FinalEvalReport);
        end else begin
            Page.Run(75278, FinalEvalReport);
        end;
        EvaluationHeader.Posted := true;
        EvaluationHeader."Posted By" := UserId;
        EvaluationHeader."Posted Date" := Today;
        EvaluationHeader."Terminated By" := UserId;
        EvaluationHeader."Date Terminated" := Today;
        EvaluationHeader.Time := Time;
        EvaluationHeader.Modify(true);
    end;


    procedure FnNotifyonTenderTermination(IFSList: Record "Standard Purchase Code")
    var
        "Code": Code[10];
        ProcurementSetup: Record "Procurement Setup";
        IFPResponseLine: Record "IFP Response Line";
        Vendors: Record Vendor;
        InsCoverageLedgerEntry: Record "Ins. Coverage Ledger Entry";
        InsuranceReg: Record Insurance;
        Window: Dialog;
        EmailBody: array[2] of Text[30];
        BodyText: Text[250];
        mymail: Codeunit Mail;
        WindowisOpen: Boolean;
        FileDialog: Codeunit Mail;
        SendingDate: Date;
        SendingTime: Time;
        Counter: Integer;
        cu400: Codeunit Mail;
        SenderAddress: Text[100];
        UserSetup: Record "User Setup";
        HRSetup: Record "Human Resources Setup";
        CompInfo: Record "Company Information";
        RequesterName: Text[100];
        RequesterEmail: Text[100];
        emailhdr: Text[100];
        ProcNote: Text[1000];
        LoginDetails: Text[1000];
        CustEmail: Text[100];
        CompanyDetails: Text[250];
        SupplierDetails: Text[1000];
        SenderMessage: Text[1000];
        FileDirectory: Text[100];
        FileName: Text[100];
        RFIResponse2: Record "RFI Response";
        RFIResponse: Record "RFI Response";
        IFPResponseLine1: Record "IFP Response Line";
        Purchas: Record "Purchase Header";
    begin
        Purchas.Reset;
        Purchas.SetRange("Invitation For Supply No", IFSList.Code);
        Purchas.SetRange("Document Type", Purchas."document type"::Quote);
        if Purchas.FindSet then begin
            repeat
                Vendors.Reset;
                Vendors.SetRange("No.", Purchas."Vendor No.");
                if Vendors.FindSet then begin
                    Vendors.TestField("E-Mail");

                    CompInfo.Get;
                    ProcurementSetup.Get;
                    RequesterEmail := ProcurementSetup."Default Proc Email Contact";
                    RequesterName := ProcurementSetup."Default Proc Email Contact";
                    Window.Open('Sending...');
                    WindowisOpen := true;
                    //Create message
                    if ProcurementSetup."Default Proc Email Contact" = '' then
                        Error('Please Contact the IT Admin to specify the E-mail address under Procurement Setup page!!');
                    SenderAddress := ProcurementSetup."Default Proc Email Contact";
                    CustEmail := Vendors."E-Mail";
                    CompanyDetails := 'Dear Sir/Madam,<br>';
                    SenderMessage := '<BR>This is to notify you that the' + ' ' + IFSList."Tender Name" + ' ' + 'Has been closed due to' + ' ' + IFSList."Cancel Reason Code" + ' ' +
                    'Thank you for Participating in the Tendering Exercise.<br/> <br/><br/>';
                    SupplierDetails := '';
                    LoginDetails := 'If you require any assistance, please contact the Supply Chain Management Department through.<br/>' + ' ' + ProcurementSetup."Default Proc Email Contact";
                    ProcNote := '<BR> Regards';
                    //  RFIResponse2.RESET;
                    //  RFIResponse2.SETRANGE("Document No.",RFIResponse."Document No.");
                    //  IF RFIResponse2.FINDSET THEN
                    //  FileDirectory :=  'C:\DOCS\';
                    //  FileName := 'Prequalification_'+RFIResponse2."Document No."+'.pdf';
                    //   //Report.SaveAsPdf(70110,FileDirectory+FileName,RFIResponse2);
                    if CustEmail = '' then
                        exit;
                    //MESSAGE:='This is to notify you that there has been a request for Registration ' +  SupplierRequest."No." + ' From Supplier'+ SupplierRequest.Name;
                    emailhdr := CompInfo.Name + ' Tender Cancellation';
                    // //cu400.CreateMessage(CompInfo.Name, SenderAddress, CustEmail, emailhdr,
                    // //CompanyDetails + '<BR></BR>' + SenderMessage + SupplierDetails + LoginDetails, true);
                    // //cu400.AddCC(RequesterEmail);
                    // //cu400.AddBodyline(ProcNote);
                    // ////cu400.AddAttachment(FileDirectory+FileName,FileName);
                    // //cu400.Send;
                    SendingDate := Today;
                    SendingTime := Time;
                    Sleep(1000);
                    Window.Close;
                    //  UNTIL InsuranceReg.NEXT=0;
                    // END;
                    //MESSAGE('Notified on %1',Vendors."E-Mail");

                end;
            until Purchas.Next = 0;
        end;
        //MESSAGE('Notified on this  %1',Vendors."E-Mail");
        Message('Notified Successfully');
        //MESSAGE('Done');
    end;


    procedure fnchecktendersecurity(BidTabulationHeader: Record "Bid Tabulation Header")
    var
        Bid_ContractSecurityRegister: Record "Bid_Contract Security Register";
    begin
        Bid_ContractSecurityRegister.Reset;
        Bid_ContractSecurityRegister.SetRange("No.", BidTabulationHeader."Awarded Bid No");
        Bid_ContractSecurityRegister.SetRange("IFS No", BidTabulationHeader."IFS Code");
        Bid_ContractSecurityRegister.SetRange("Vendor No.", BidTabulationHeader."Awarded Bidder No.");
        Bid_ContractSecurityRegister.SetRange("Security Type", Bid_ContractSecurityRegister."security type"::"Performance/Contract Security");
        if Bid_ContractSecurityRegister.FindSet then begin
            if Bid_ContractSecurityRegister.Count < 1 then begin
                Error('Ensure the performance security for %1 the supply is captured', BidTabulationHeader."Awarded Bidder Name");
            end;
        end;
    end;


    procedure FnUncommitPRNNOA(BidTabulationHeader: Record "Standard Purchase Code")
    var
        CommitmentEntry: Record "Commitment Entries1";
        PurchHd1: Record "Purchase Header";
        PurchaseL1: Record "Purchase Line";
        PurchHd: Record "Purchase Header";
        IFSList: Record "Standard Purchase Code";
        Commitments: Record "Commitment Entries1";
    begin

        PurchaseL1.Reset;
        PurchaseL1.SetRange("Document No.", BidTabulationHeader."PRN No.");
        if PurchaseL1.FindSet then begin
            repeat
                CommitmentEntry.Init;
                Commitments.Reset;
                Commitments.SetFilter("Entry No", '<>%1', 0);
                if Commitments.FindLast then begin
                    CommitmentEntry."Entry No" := Commitments."Entry No" + 1;
                end;
                PurchHd.Reset;
                PurchHd.SetRange("No.", IFSList."PRN No.");
                if PurchHd.FindSet then
                    CommitmentEntry."Document No." := BidTabulationHeader."PRN No.";
                CommitmentEntry."Source Type" := CommitmentEntry."Source Type"::prn;
                CommitmentEntry.Description := PurchaseL1.Description;
                CommitmentEntry.No := PurchaseL1."No.";
                //CommitmentEntry.Quantity:=PurchaseL1.Quantity;
                CommitmentEntry.Description := PurchaseL1.Description;
                CommitmentEntry."Unit Cost" := PurchaseL1."Direct Unit Cost";
                CommitmentEntry.Amount := -(PurchaseL1.Quantity * PurchaseL1."Direct Unit Cost");
                CommitmentEntry."Procurement Plan" := PurchHd."Procurement Plan ID";
                CommitmentEntry."Vote Item" := PurchHd."Procurement Plan Entry No";
                CommitmentEntry."Global Dimension 1 Code" := PurchHd."Shortcut Dimension 1 Code";
                CommitmentEntry."Global Dimension 2 Code" := PurchHd."Shortcut Dimension 2 Code";
                CommitmentEntry."Commitment Type" := CommitmentEntry."commitment type"::PRN;
                CommitmentEntry."Commitment No" := BidTabulationHeader."PRN No.";
                CommitmentEntry.Type := CommitmentEntry.Type::Reversal;
                CommitmentEntry."Line No." := PurchaseL1."Line No.";
                CommitmentEntry.Job := PurchHd.Job;
                CommitmentEntry."Job Task No" := PurchHd."Job Task No.";
                CommitmentEntry."User ID" := UserId;
                CommitmentEntry."Uncommittment Date" := Today;
                CommitmentEntry."Time Stamp" := Time;
                CommitmentEntry.Insert(true);
            until PurchaseL1.Next = 0;
        end;
        Message('PRN No %1 Commitments Cancelled', BidTabulationHeader."PRN No.");
    end;


    procedure FnLPOCommittment1(PurchHd: Record "Purchase Header")
    var
        CommitmentEntry: Record "Commitment Entries1";
        PurchHd1: Record "Purchase Header";
        PurchaseL1: Record "Purchase Line";
    begin

        PurchaseL1.Reset;
        PurchaseL1.SetRange("Document No.", PurchHd."No.");
        if PurchaseL1.FindSet then begin
            repeat
                CommitmentEntry.Init;
                CommitmentEntry."Document No." := PurchHd."No.";
                //CommitmentEntry."Entry No":=CommitmentEntry."Entry No"+1;
                CommitmentEntry."Source Type" := CommitmentEntry."Source Type"::PRN;
                CommitmentEntry.Description := PurchaseL1.Description;
                CommitmentEntry.No := PurchaseL1."No.";
                //CommitmentEntry.Quantity:=PurchaseL1.Quantity;
                CommitmentEntry.Description := PurchaseL1.Description;
                CommitmentEntry."Unit Cost" := PurchaseL1."Direct Unit Cost";
                CommitmentEntry.Amount := PurchaseL1.Amount;
                CommitmentEntry."Procurement Plan" := PurchHd."Procurement Plan ID";
                CommitmentEntry."Vote Item" := PurchHd."Procurement Plan Entry No";
                CommitmentEntry."Global Dimension 1 Code" := PurchHd."Shortcut Dimension 1 Code";
                CommitmentEntry."Global Dimension 2 Code" := PurchHd."Shortcut Dimension 2 Code";
                CommitmentEntry."Commitment Type" := CommitmentEntry."commitment type"::LPO;
                CommitmentEntry."Commitment No" := PurchHd."No.";
                CommitmentEntry.Type := CommitmentEntry.Type::Committed;
                CommitmentEntry."Line No." := PurchaseL1."Line No.";
                CommitmentEntry.Job := PurchHd.Job;
                CommitmentEntry."Job Task No" := PurchHd."Job Task No.";
                CommitmentEntry."User ID" := UserId;
                CommitmentEntry."Commitment Date" := Today;
                CommitmentEntry."Time Stamp" := Time;
                CommitmentEntry.Insert(true);
            until PurchaseL1.Next = 0;

        end;
    end;


    procedure PostNoticeOfAWard(NOA: Record "Bid Tabulation Header")
    var
        PurchaseH: Record "Purchase Header";
        PurchaseHead: Record "Purchase Header";
        Procurement: Codeunit "Procurement Processing";
        IFSList: Record "Standard Purchase Code";
        Vendor: Record Vendor;
        BidOwner: Record "Bid Business Owner";
        VendBusinessOwner: Record "Vendor Business Owner";
        BidPreferences: Record "Bid Preference & Reservation";
        VendSpecialGroup: Record "Vendor Special Group Entry";
        BidLitigation: Record "Bid Litigation History";
        VendLitigation: Record "Vendor Litigation History";
        BidPastExperience: Record "Bid Past Experience";
        VendPastExperience: Record "Vendor Past Experience";
        BidAuditedBal: Record "Bid Audited Balance Sheet";
        VendAuditedBal: Record "Vendor Audited Balance Sheet";
        BidIncomeStat: Record "Bid Audited Income Statement";
        VendIncomeStat: Record "Vendor Audited Income Statemen";
        BidVendBankAccount: Record "Bid Vendor Bank Account";
        VendBankAccount: Record "Vendor Bank Account";
        BidKeyStaff: Record "Bid Key Staff";
        VendKeyStaff: Record "Vendor Professional Staff";
        BidKeyStaffQual: Record "Bid Key Staff Qualification";
        VendKeyStaffQual: Record "Vendor Staff Qualification";
        BidStaffExperience: Record "Bid Key Staff Experience";
        VendStaffExperience: Record "Vendor Staff Experience";
        Purch: Record "Purchase Header";
        CopyPurchDoc: Report "Copy Purchase Document";
        Purch2: Record "Purchase Header";
        PurchLines: Record "Purchase Line";
        PurchLines1: Record "Purchase Line";
        Purch3: Record "Purchase Header";
        IFS: Record "Standard Purchase Code";
        CompanyInfo: Record "Company Information";
        IFSLines: Record "Purchase Line";
        ContractSecurity: Record "Bid_Contract Security Register";
        BidContractSecurity: Record "Bid_Contract Security Register";
        IFSAppealHeader: Record "IFS Appeal Header";
        DocTemplateLine: Record "Procurement Doc Template Line";
        ContractIssuanceDocs: Record "Contract Issuance Requirements";
        Jobs: Record Job;
        IFSPurchaseCode: Record "Standard Purchase Code";
        JobPlanningLine: Record "Job Planning Line";
        IFSLineZ: Record "Purchase Line";
        PRN: Record "Purchase Header";
    begin
        //IF NOT ConfirmManagement.ConfirmProcess(Text001,TRUE) THEN
        //  EXIT;
        //if Contract
        //mtr
        //conftxt := Confirm('Are you sure you want to Generate LPO/LSO or Contracts?');
        if Confirm('Are you sure you want to Generate LPO/LSO or Contracts?') then begin
            optionselected := Dialog.StrMenu('Contract,LPO/LSO', 1, 'Do you want to Generate LPO or a Contract?');
            if optionselected = 2 then begin

                Vendor.Reset;
                Vendor.SetRange("No.", NOA."Awarded Bidder No.");
                if Vendor.Findfirst() then begin
                    Purch.Init;
                    Purch."Document Type" := Purch."document type"::Order;
                    Purch."Awarded Bid No" := NOA."Awarded Bid No";
                    //Purch."Awarded Bid No":=NOA."Awarded Bidder No.";
                    Purch."Award Tender Sum Inc Taxes" := NOA."Award Tender Sum Inc Taxes";
                    Purch."Invitation For Supply No" := NOA."IFS Code";
                    Purch.Validate("Buy-from Vendor No.", NOA."Awarded Bidder No.");
                    //Purch.VALIDATE(contrac,NOA."Awarded Bidder No.");
                    Purch."Building/House No" := Vendor."Building/House No";
                    Purch."Plot No" := Vendor."Plot No";
                    Purch.Street := Vendor.Street;
                    Purch."Nature of Business" := Vendor."Nature of Business";
                    Purch."Current Trade Licence No" := Vendor."Current Trade Licence No";
                    Purch."Trade Licence Expiry Date" := Vendor."Trade Licence Expiry Date";
                    Purch."Max Value of Business" := Vendor."Max Value of Business";
                    Purch."Preferred Bank Account Code" := Vendor."Preferred Bank Account Code";
                    Purch."Business Type" := Vendor."Business Type";
                    Purch."Nominal Capital LCY" := Vendor."Nominal Capital LCY";
                    Purch."Issued Capital LCY" := Vendor."Issued Capital LCY";
                    IFS.Reset;
                    IFS.SetRange(Code, NOA."IFS Code");
                    if IFS.Findfirst() then begin
                        //Purch.INIT;


                        Purch."Bid Envelope Type" := IFS."Bid Envelop Type";
                        Purch."Requisition No" := IFS."PRN No.";
                        Purch."Purchaser Code" := IFS."Purchaser Code";
                        Purch.Validate("Purchaser Code", IFS."Purchaser Code");
                        Purch."Procurement Plan ID" := IFS."Procurement Plan ID";
                        Purch."Procurement Plan Entry No" := IFS."Procurement Plan Entry No";
                        Purch."Tender Description" := IFS."Tender Summary";
                        Purch."Responsibility Center" := IFS."Responsibility Center";
                        Purch.Validate("Location Code", IFS."Location Code");
                        Purch."Language Code" := IFS."Language Code";
                        Purch.Validate("Purchaser Code", IFS."Purchaser Code");
                        Purch."Currency Code" := IFS."Currency Code";
                        Purch."IFS Code" := NOA."IFS Code";
                        Purch."Bid Charge Code" := IFS."Bid Charge Code";
                        Purch."Bid Charge (LCY)" := IFS."Bid Charge (LCY)";
                        Purch."Works Category" := IFS."Works Category";
                        Purch."Road Code" := IFS."Road Code";
                        Purch."Link Name" := IFS."Road Link Name";
                        Purch.Job := IFS.Job;
                        Purch."Job Task No." := IFS."Job Task No.";
                        Purch.Consitituency := IFS."Constituency ID";
                        Purch."Engineer Estimate (LCY)" := IFS."Engineer Estimate (LCY)";
                        //Purch."Max Works Completion Duration":=IFS."Max Works Completion Duration";
                        Purch."Max Works Kickoff Duration" := IFS."Max Works Kickoff Duration";
                        Purch."Max Works Charter Duration" := IFS."Max Works Charter Duration";
                        Purch.Validate("Payment Terms Code", IFS."Payment Terms Code");
                        //Purch."Defects Liability Period":=IFS."Defects Liability Period";
                        Purch."Daily Liquidated Dam Unit Cost" := IFS."Daily Liquidated Dam Unit Cost";
                        Purch."Liquidated Damages Limit %" := IFS."Liquidated Damages Limit %";
                        Purch."Payment Retention %" := IFS."Payment Retention %";
                        Purch."Retention Amount Limit %" := IFS."Retention Amount Limit %";
                        Purch."Min Interim Certificate Amount" := IFS."Min Interim Certificate Amount";
                        //Purch.inv
                    end;
                    CompanyInfo.Get;
                    Purch."Procuring Entity (PE) Name" := CompanyInfo.Name;


                    Purch."Contract Description" := NOA."Tender Name";
                    Purch."Contract Start Date" := NOA."Document Date";
                    Purch."Tender Name" := NOA."Tender Name";
                    Purch."Notice of Award No." := NOA.Code;
                    Purch."Proffesion Opinion No" := NOA."Professional Opinion ID";
                    Purch."Final Evaluation Report" := NOA."Final Evaluation Report ID";
                    Purch."Vendor No." := NOA."Awarded Bidder No.";
                    Purch."Buy-from Vendor No." := NOA."Awarded Bidder No.";
                    Purch.Validate("Buy-from Vendor No.");

                    IFS.Reset;
                    IFS.SetRange(IFS.Code, NOA."IFS Code");
                    if IFS.Findfirst() then begin
                        Purch."Project No" := IFS."Project ID";
                        Purch.Validate("Project No");
                    end;

                    PurchLines.Reset;
                    PurchLines.SetRange(PurchLines."Document No.", NOA."Awarded Bid No");
                    PurchLines.SetRange(PurchLines."Document Type", PurchLines."document type"::Quote);
                    PurchLines.SetRange(PurchLines."Contract Type", PurchLines."contract type"::Construction);

                    PurchLines.CalcSums(Amount);
                    Purch."Bid Sum 1" := PurchLines.Amount;
                    
                    PurchLines.Reset;
                    PurchLines.SetRange(PurchLines."Document No.", NOA."Awarded Bid No");
                    PurchLines.SetRange(PurchLines."Document Type", PurchLines."document type"::Quote);
                    PurchLines.SetRange(PurchLines."Contract Type", PurchLines."contract type"::PBRM);
                    PurchLines.CalcSums(Amount);
                    Purch."Bid Sum 2" := PurchLines.Amount;



                    Purch.Insert(true);


                    //Update Project with Contracting vendor No and Purchase conract ID
                    IFS.Reset;
                    IFS.SetRange(IFS.Code, NOA."IFS Code");
                    if IFS.FindSet then begin
                        ObjJob.Reset;
                        ObjJob.SetRange(ObjJob."No.", IFS."Project ID");
                        if ObjJob.FindFirst() then begin
                            ObjJob."Contractor No." := NOA."Awarded Bidder No.";
                            ObjJob.Validate("Contractor No.");
                            if Purch."Document Type" =Purch."Document Type"::"Blanket Order" then begin
                                 ObjJob."Purchase Contract ID" := Purch."No.";
                                 ObjJob.Validate("Purchase Contract ID");
                            end;
                            ObjJob."Directorate Code" := IFS."Directorate Code";
                            ObjJob.Validate("Directorate Code");
                            ObjJob."Department ID" := IFS."Department Code";
                            ObjJob.Validate("Department ID");
                            ObjJob.Modify(true);
                        end;
                    end;


                    /*Purch2.RESET;
                    Purch2.SETRANGE("No.",NOA."Awarded Bid No");
                    IF Purch2.FINDSET THEN BEGIN
                    Purch.COPY(NOA);
                     //Purch.VALIDATE("Invitation For Supply No",NOA."IFS Code");
                      Purch.MODIFY;
                      END;*/



                    PurchLines.Reset;
                    PurchLines.SetRange("Document No.", Purch."No.");
                    if PurchLines.FindSet then begin
                        PurchLines.DeleteAll;
                    end;
                    IFSLines.Reset;
                    IFSLines.SetRange("Document No.", NOA."Awarded Bid No");
                    if IFSLines.FindSet then begin
                        repeat

                            PurchLines.Init;
                            PurchLines.TransferFields(IFSLines);
                            PurchLines."Document Type" := PurchLines."document type"::Order;
                            PurchLines."Document No." := Purch."No.";
                            PurchLines.Insert(true);


                        until IFSLines.Next = 0;
                    end;



                    Page.Run(50, Purch);

                end;
                /////
                IFSList.Reset;
                IFSList.SetRange(Code, NOA."IFS Code");
                if IFSList.FindSet then begin
                    PurchaseHead.Reset;
                    PurchaseHead.SetRange("No.", IFSList."PRN No.");
                    if PurchaseHead.FindSet then begin
                        FnUncommitPRN(PurchaseHead);
                    end;
                end;
                PurchaseH.Reset;
                PurchaseH.SetRange("No.", Purch."No.");
                if PurchaseH.FindSet then begin
                    //REPEAT
                    FnLPOCommittment(PurchaseH);
                    //UNTIL PurchaseH.NEXT=0
                end;
                ///
            end;
            if optionselected = 1 then begin
                //Mtr
                //if purchase order
                IFSAppealHeader.Reset;
                IFSAppealHeader.SetRange("IFS Code", NOA."IFS Code");
                IFSAppealHeader.SetRange(Posted, true);
                IFSAppealHeader.SetRange(Decision, IFSAppealHeader.Decision::"Pending Verdict");
                if IFSAppealHeader.FindFirst then begin
                    Error('You cannot generate a contract, There is an ongoing Appeal Process');
                end;
                if NOA.Appealed = true then begin
                    Error('You cannot generate a contract, There is an ongoing Appeal Process');
                end;
                // if (NOA."Award Acceptance Response" > Today) or (NOA."Award Acceptance Response" <> Today) then begin
                //     Error('Acceptance Period has not lapsed, You can only generate a contract after the acceptance deadline');
                // end;
                fnchecktendersecurity(NOA);
                Vendor.Reset;
                Vendor.SetRange("No.", NOA."Awarded Bidder No.");
                if Vendor.FindFirst() then begin
                    Purch.Init;
                    Purch."Document Type" := Purch."document type"::"Blanket Order";
                    Purch."Awarded Bid No" := NOA."Awarded Bid No";
                    //Purch."Awarded Bid No":=NOA."Awarded Bidder No.";
                    Purch."Award Tender Sum Inc Taxes" := NOA."Award Tender Sum Inc Taxes";
                    Purch."Invitation For Supply No" := NOA."IFS Code";
                    Purch.Validate("Buy-from Vendor No.", NOA."Awarded Bidder No.");
                    Purch."Building/House No" := Vendor."Building/House No";
                    Purch."Plot No" := Vendor."Plot No";
                    Purch.Street := Vendor.Street;
                    Purch.Status := Purch.Status::Open;
                    Purch."Contract Status" := Purch."contract status"::"Pending Signing";
                    Purch."Nature of Business" := Vendor."Nature of Business";
                    Purch."Current Trade Licence No" := Vendor."Current Trade Licence No";
                    Purch."Trade Licence Expiry Date" := Vendor."Trade Licence Expiry Date";
                    Purch."Max Value of Business" := Vendor."Max Value of Business";
                    Purch."Preferred Bank Account Code" := Vendor."Preferred Bank Account Code";
                    Purch."Business Type" := Vendor."Business Type";
                    Purch."Nominal Capital LCY" := Vendor."Nominal Capital LCY";
                    Purch."Issued Capital LCY" := Vendor."Issued Capital LCY";
                    IFS.Reset;
                    IFS.SetRange(Code, NOA."IFS Code");
                    if IFS.Findfirst() then begin
                        Purch.INIT;
                        PRN.Reset();
                        PRN.SetRange("No.",IFS."PRN No.");
                        PRN.SetRange("Document Type",PRN."Document Type"::"Purchase Requisition");
                        if PRN.FindFirst() then begin
                            Purch.Validate("PP Preference/Reservation Code",PRN."PP Preference/Reservation Code");
    end;
                        Purch."Bid Envelope Type" := IFS."Bid Envelop Type";
                        Purch."Tender Description" := IFS."Tender Summary";
                        Purch."Responsibility Center" := IFS."Responsibility Center";
                        Purch.Validate("Location Code", IFS."Location Code");
                        Purch."Language Code" := IFS."Language Code";
                        Purch.Validate("Purchaser Code", IFS."Purchaser Code");
                        Purch."Currency Code" := IFS."Currency Code";
                        Purch."IFS Code" := NOA."IFS Code";
                        Purch."Requisition No" := IFS."PRN No.";
                        Purch."Bid Charge Code" := IFS."Bid Charge Code";
                        Purch."Bid Charge (LCY)" := IFS."Bid Charge (LCY)";
                        Purch."Works Category" := IFS."Works Category";
                        Purch.Job := IFS.Job;
                        Purch."Job Task No." := IFS."Job Task No.";
                        Purch."Road Code" := IFS."Road Code";
                        Purch."Link Name" := IFS."Road Link Name";
                        Purch.Consitituency := IFS."Constituency ID";
                        Purch."Engineer Estimate (LCY)" := IFS."Engineer Estimate (LCY)";
                        //Purch."Max Works Completion Duration":=IFS."Max Works Completion Duration";
                        Purch."Max Works Kickoff Duration" := IFS."Max Works Kickoff Duration";
                        Purch."Max Works Charter Duration" := IFS."Max Works Charter Duration";
                        Purch.Validate("Payment Terms Code", IFS."Payment Terms Code");
                        //Purch."Defects Liability Period":=IFS."Defects Liability Period";
                        Purch."Daily Liquidated Dam Unit Cost" := IFS."Daily Liquidated Dam Unit Cost";
                        Purch."Liquidated Damages Limit %" := IFS."Liquidated Damages Limit %";
                        Purch."Payment Retention %" := IFS."Payment Retention %";
                        Purch."Retention Amount Limit %" := IFS."Retention Amount Limit %";
                        Purch."Min Interim Certificate Amount" := IFS."Min Interim Certificate Amount";
                    end;
                    CompanyInfo.Get;
                    Purch."Procuring Entity (PE) Name" := CompanyInfo.Name;


                    Purch."Contract Description" := NOA."Tender Name";
                    Purch."Contract Start Date" := NOA."Document Date";
                    Purch."Tender Name" := NOA."Tender Name";
                    Purch."Notice of Award No." := NOA.Code;
                    Purch."Proffesion Opinion No" := NOA."Professional Opinion ID";
                    Purch."Final Evaluation Report" := NOA."Final Evaluation Report ID";


                    Purch.Insert(true);

                    ProcurementSetup.Get;
                    DocTemplateLine.Reset;
                    DocTemplateLine.SetRange("Template ID", ProcurementSetup."Default Procurement Template");
                    DocTemplateLine.SetRange("Procurement Process", DocTemplateLine."procurement process"::Contract);
                    if DocTemplateLine.FindSet then begin
                        repeat
                            ContractIssuanceDocs.Init;
                            ContractIssuanceDocs."Document ID" := Purch."No.";
                            ContractIssuanceDocs."Process Area" := ContractIssuanceDocs."process area"::Contract;
                            ContractIssuanceDocs."Procurement Document Type" := DocTemplateLine."Procurement Document Type";
                            ContractIssuanceDocs.Description := DocTemplateLine.Description;
                            ContractIssuanceDocs."Requirement Type" := DocTemplateLine."Requirement Type";
                            ContractIssuanceDocs."Track Certificate Expiry" := DocTemplateLine."Track Certificate Expiry";
                            ContractIssuanceDocs."Guidelines/Instruction" := DocTemplateLine."Guidelines/Instruction";
                            ContractIssuanceDocs."Contract ID" := Purch."No.";
                            ContractIssuanceDocs."Contract Index" := DocTemplateLine."Contract Index";
                            ContractIssuanceDocs."PRN No" := Purch."Requisition No";
                            ContractIssuanceDocs."IFS Code" := Purch."IFS Code";
                            ContractIssuanceDocs.Insert(true);
                        until DocTemplateLine.Next = 0;
                    end;


                    IFSPurchaseCode.Reset;
                    IFSPurchaseCode.SetRange(Code, NOA."IFS Code");
                    if IFSPurchaseCode.FindFirst() then begin
                        Jobs.Reset;
                        Jobs.SetRange("No.", IFSPurchaseCode.Job);
                        if IFSPurchaseCode.Findfirst() then begin
                            Jobs."Purchase Contract ID" := Purch."No.";
                            Jobs."Contractor No." := NOA."Awarded Bidder No.";
                            Jobs."Contractor Name" := NOA."Awarded Bidder Name";
                            if Jobs.Modify(true) then begin
                                IFSLineZ.Reset;
                                IFSLineZ.SetRange("Document No.", NOA."Awarded Bid No");
                                if IFSLineZ.FindSet then begin
                                    repeat
                                        JobPlanningLine.Reset;
                                        JobPlanningLine.SetRange("Job No.", IFSPurchaseCode.Job);
                                        JobPlanningLine.SetRange("No.", IFSLineZ."No.");
                                        if JobPlanningLine.FindSet then begin
                                            JobPlanningLine."Unit Cost" := IFSLineZ."Direct Unit Cost";
                                            JobPlanningLine.Modify(true);
                                        end;
                                    until IFSLineZ.Next = 0;
                                end;
                            end;
                        end;
                    end;

                    PurchLines.Reset;
                    PurchLines.SetRange("Document No.", Purch."No.");
                    if PurchLines.FindSet then begin
                        PurchLines.DeleteAll;
                    end;
                    IFSLines.Reset;
                    IFSLines.SetRange("Document No.", NOA."Awarded Bid No");
                    if IFSLines.FindSet then begin
                        repeat

                            PurchLines.Init;
                            PurchLines.TransferFields(IFSLines);
                            PurchLines."Document Type" := PurchLines."document type"::"Blanket Order";
                            PurchLines."Document No." := Purch."No.";
                            PurchLines.Insert(true);
                        /*PurchLines.VALIDATE("Document Type",PurchLines."Document Type"::"Blanket Order");
                        PurchLines.VALIDATE("Document No.",Purch."No.");
                        PurchLines.VALIDATE("Line No.",IFSLines."Line No.");
                        PurchLines.VALIDATE(Type,IFSLines.Type);
                        PurchLines.VALIDATE("No.",IFSLines."No.");
                        PurchLines.VALIDATE(Description,IFSLines.Description);
                        PurchLines.VALIDATE(Quantity,IFSLines.Quantity);
                        PurchLines.VALIDATE("Unit of Measure Code",IFSLines."Unit of Measure Code");
                        PurchLines.VALIDATE("Shortcut Dimension 1 Code",IFSLines."Shortcut Dimension 1 Code");
                        PurchLines.VALIDATE("Shortcut Dimension 2 Code",IFSLines."Shortcut Dimension 2 Code");
                        //PurchLines.VALIDATE("Variant Code",IFSLines."Variant Code");
                        PurchLines.VALIDATE("Dimension Set ID",IFSLines."Dimension Set ID");
                        PurchLines.VALIDATE("Item Category",IFSLines."Item Category");
                        IF PurchLines.INSERT(TRUE) THEN BEGIN
                        PurchLines.VALIDATE("No.",IFSLines."No.");
                        PurchLines.MODIFY;
              END;*/

                        /* PurchLines.INIT;
                        PurchLines."Document Type":=PurchLines."Document Type"::"Blanket Order";
                         PurchLines."Document No.":=Purch."No.";
                         PurchLines."Line No.":=IFSLines."Line No.";
                         PurchLines."Buy-from Vendor No.":=Purch."Buy-from Vendor No.";
                         PurchLines.Type:=IFSLines.Type;
                         PurchLines."No.":=IFSLines."No.";
                         //PurchLines."Location Code":=IFSLines.
                         //PurchLines."Posting Group":=IFSLines
                         PurchLines.VALIDATE(Description,IFSLines.Description);
                         PurchLines."Description 2":=IFSLines.Description;
                         //PurchLines."Unit of Measure":=IFSLines."Unit of Measure Code";
                         //PurchLines.VALIDATE(PurchLines.Quantity,IFSLines.Quantity);
                         PurchLines.Quantity:=IFSLines.Quantity;
                         PurchLines.Amount:=IFSLines."Amount Excl. VAT";
                         PurchLines."Unit of Measure Code":=IFSLines."Unit of Measure Code";
                         PurchLines."Shortcut Dimension 1 Code":=IFSLines."Shortcut Dimension 2 Code";
                         PurchLines."Shortcut Dimension 2 Code":=IFSLines."Shortcut Dimension 2 Code";
                         PurchLines."Variant Code":=IFSLines."Variant Code";
                         PurchLines."Dimension Set ID":=IFSLines."Dimension Set ID";
                         PurchLines."Item Category":=IFSLines."Item Category";
                         PurchLines.INSERT(TRUE);*/

                        until IFSLines.Next = 0;
                    end;
                    //committments......................



                    //committments.......................
                    //Contract securities
                    /*BidContractSecurity.RESET;
                    BidContractSecurity.SETRANGE("No.",NOA."Awarded Bid No");
                    IF BidContractSecurity.FINDSET THEN BEGIN
                    REPEAT
                    ContractSecurity.INIT;
                    ContractSecurity.TRANSFERFIELDS(BidContractSecurity);
                    ContractSecurity."No.":=Purch."No.";
                    ContractSecurity.INSERT(TRUE);
                    UNTIL BidContractSecurity.NEXT=0;
                    END;*/




                    //END;

                    Page.Run(75284, Purch);
                end;
                IFSList.Reset;
                IFSList.SetRange(Code, NOA."IFS Code");
                if IFSList.FindSet then begin
                    PurchaseHead.Reset;
                    PurchaseHead.SetRange("No.", IFSList."PRN No.");
                    if PurchaseHead.FindSet then begin
                        FnUncommitPRN(PurchaseHead);
                    end;
                end;
                PurchaseH.Reset;
                PurchaseH.SetRange("No.", Purch."No.");
                if PurchaseH.FindSet then begin
                    FnLPOCommittment(PurchaseH);
                end;
            end;
        end;
        //COMM

        //COMMI
        Message(Text002, Purch."No.");

    end;


    procedure FnUncommitPRNOnTermination(BidTabulationHeader: Record "Bid Tabulation Header")
    var
        CommitmentEntry: Record "Commitment Entries1";
        PurchHd1: Record "Purchase Header";
        PurchaseL1: Record "Purchase Line";
        PurchHd: Record "Purchase Header";
        IFSList: Record "Standard Purchase Code";
        Commitments: Record "Commitment Entries1";
        Purc: Record "Purchase Header";
    begin

        IFSList.Reset;
        IFSList.SetRange(Code, BidTabulationHeader."IFS Code");
        if IFSList.FindSet then
            PurchHd.Reset;
        PurchHd.SetRange("No.", IFSList."PRN No.");
        if PurchHd.FindSet then
            PurchaseL1.Reset;
        PurchaseL1.SetRange("Document No.", PurchHd."No.");
        if PurchaseL1.FindSet then begin
            repeat
                CommitmentEntry.Init;
                Commitments.Reset;
                Commitments.SetFilter("Entry No", '<>%1', 0);
                if Commitments.FindLast then begin
                    CommitmentEntry."Entry No" := Commitments."Entry No" + 1;
                end;
                CommitmentEntry."Document No." := IFSList."PRN No.";
                //CommitmentEntry."Entry No":=CommitmentEntry."Entry No"+1;
                // CommitmentEntry."Source Type" := PurchaseL1.Type;
                CommitmentEntry.Description := PurchaseL1.Description;
                CommitmentEntry.No := PurchaseL1."No.";
                //CommitmentEntry.Quantity:=PurchaseL1.Quantity;
                CommitmentEntry.Description := PurchaseL1.Description;
                CommitmentEntry."Unit Cost" := PurchaseL1."Direct Unit Cost";
                CommitmentEntry.Amount := -(PurchaseL1."Direct Unit Cost" * PurchaseL1.Quantity);
                CommitmentEntry."Procurement Plan" := PurchHd."Procurement Plan ID";
                CommitmentEntry."Vote Item" := PurchHd."Procurement Plan Entry No";
                CommitmentEntry."Global Dimension 1 Code" := PurchHd."Shortcut Dimension 1 Code";
                CommitmentEntry."Global Dimension 2 Code" := PurchHd."Shortcut Dimension 2 Code";
                CommitmentEntry."Commitment Type" := CommitmentEntry."commitment type"::PRN;
                CommitmentEntry."Commitment No" := IFSList."PRN No.";
                CommitmentEntry.Type := CommitmentEntry.Type::Reversal;
                CommitmentEntry."Line No." := PurchaseL1."Line No.";
                CommitmentEntry.Job := PurchHd.Job;
                CommitmentEntry."Job Task No" := PurchHd."Job Task No.";
                CommitmentEntry."User ID" := UserId;
                CommitmentEntry."Uncommittment Date" := Today;
                CommitmentEntry."Time Stamp" := Time;
                CommitmentEntry.Insert(true);
            until PurchaseL1.Next = 0;
        end;
        Message('PRN No %1 Terminated', IFSList."PRN No.");
    end;


    procedure FnGenerateLPODirect(NOA: Record "Standard Purchase Code")
    var
        PurchaseH: Record "Purchase Header";
        PurchaseHead: Record "Purchase Header";
        Procurement: Codeunit "Procurement Processing";
        IFSList: Record "Standard Purchase Code";
        Vendor: Record Vendor;
        BidOwner: Record "Bid Business Owner";
        VendBusinessOwner: Record "Vendor Business Owner";
        BidPreferences: Record "Bid Preference & Reservation";
        VendSpecialGroup: Record "Vendor Special Group Entry";
        BidLitigation: Record "Bid Litigation History";
        VendLitigation: Record "Vendor Litigation History";
        BidPastExperience: Record "Bid Past Experience";
        VendPastExperience: Record "Vendor Past Experience";
        BidAuditedBal: Record "Bid Audited Balance Sheet";
        VendAuditedBal: Record "Vendor Audited Balance Sheet";
        BidIncomeStat: Record "Bid Audited Income Statement";
        VendIncomeStat: Record "Vendor Audited Income Statemen";
        BidVendBankAccount: Record "Bid Vendor Bank Account";
        VendBankAccount: Record "Vendor Bank Account";
        BidKeyStaff: Record "Bid Key Staff";
        VendKeyStaff: Record "Vendor Professional Staff";
        BidKeyStaffQual: Record "Bid Key Staff Qualification";
        VendKeyStaffQual: Record "Vendor Staff Qualification";
        BidStaffExperience: Record "Bid Key Staff Experience";
        VendStaffExperience: Record "Vendor Staff Experience";
        Purch: Record "Purchase Header";
        CopyPurchDoc: Report "Copy Purchase Document";
        Purch2: Record "Purchase Header";
        PurchLines: Record "Purchase Line";
        PurchLines1: Record "Purchase Line";
        Purch3: Record "Purchase Header";
        IFS: Record "Standard Purchase Code";
        CompanyInfo: Record "Company Information";
        IFSLines: Record "Purchase Line";
        ContractSecurity: Record "Bid_Contract Security Register";
        BidContractSecurity: Record "Bid_Contract Security Register";
    begin
        //IF NOT ConfirmManagement.ConfirmProcess(Text001,TRUE) THEN
        //  EXIT;
        //if Contract
        //mtr
        conftxt := Confirm('Are you sure you want to Generate LPO/LSO or Contracts?');
        if Format(conftxt) = 'Yes' then begin


            Vendor.Reset;
            Vendor.SetRange("No.", NOA."Awarded Bidder No");
            if Vendor.FindSet then begin
                Purch.Init;
                Purch."Document Type" := Purch."document type"::Order;
                Purch."Awarded Bid No" := NOA."Awarded Bidder No";
                //Purch."Awarded Bid No":=NOA."Awarded Bidder No.";
                //Purch."Award Tender Sum Inc Taxes":=NOA."Award Tender Sum Inc Taxes";
                Purch."Invitation For Supply No" := NOA.Code;
                Purch.Validate("Buy-from Vendor No.", NOA."Awarded Bidder No");
                Purch."Building/House No" := Vendor."Building/House No";
                Purch."Plot No" := Vendor."Plot No";
                Purch.Street := Vendor.Street;
                Purch."Nature of Business" := Vendor."Nature of Business";
                Purch."Current Trade Licence No" := Vendor."Current Trade Licence No";
                Purch."Trade Licence Expiry Date" := Vendor."Trade Licence Expiry Date";
                Purch."Max Value of Business" := Vendor."Max Value of Business";
                Purch."Preferred Bank Account Code" := Vendor."Preferred Bank Account Code";
                Purch."Business Type" := Vendor."Business Type";
                Purch."Nominal Capital LCY" := Vendor."Nominal Capital LCY";
                Purch."Issued Capital LCY" := Vendor."Issued Capital LCY";
                IFS.Reset;
                IFS.SetRange(Code, NOA.Code);
                if IFS.FindSet then begin
                    //Purch.INIT;


                    Purch."Bid Envelope Type" := IFS."Bid Envelop Type";
                    Purch."Requisition No" := IFS."PRN No.";
                    Purch."Purchaser Code" := IFS."Purchaser Code";
                    Purch.Validate("Purchaser Code", IFS."Purchaser Code");
                    Purch."Procurement Plan ID" := IFS."Procurement Plan ID";
                    Purch."Procurement Plan Entry No" := IFS."Procurement Plan Entry No";
                    Purch."Tender Description" := IFS."Tender Summary";
                    Purch."Responsibility Center" := IFS."Responsibility Center";
                    Purch.Validate("Location Code", IFS."Location Code");
                    Purch."Language Code" := IFS."Language Code";
                    Purch.Validate("Purchaser Code", IFS."Purchaser Code");
                    Purch."Currency Code" := IFS."Currency Code";
                    Purch."IFS Code" := NOA.Code;
                    Purch."Bid Charge Code" := IFS."Bid Charge Code";
                    Purch."Bid Charge (LCY)" := IFS."Bid Charge (LCY)";
                    Purch."Works Category" := IFS."Works Category";
                    Purch."Road Code" := IFS."Road Code";
                    Purch."Link Name" := IFS."Road Link Name";
                    Purch.Consitituency := IFS."Constituency ID";
                    Purch."Engineer Estimate (LCY)" := IFS."Engineer Estimate (LCY)";
                    //Purch."Max Works Completion Duration":=IFS."Max Works Completion Duration";
                    Purch."Max Works Kickoff Duration" := IFS."Max Works Kickoff Duration";
                    Purch."Max Works Charter Duration" := IFS."Max Works Charter Duration";
                    Purch.Validate("Payment Terms Code", IFS."Payment Terms Code");
                    //Purch."Defects Liability Period":=IFS."Defects Liability Period";
                    Purch."Daily Liquidated Dam Unit Cost" := IFS."Daily Liquidated Dam Unit Cost";
                    Purch."Liquidated Damages Limit %" := IFS."Liquidated Damages Limit %";
                    Purch."Payment Retention %" := IFS."Payment Retention %";
                    Purch."Retention Amount Limit %" := IFS."Retention Amount Limit %";
                    Purch."Min Interim Certificate Amount" := IFS."Min Interim Certificate Amount";
                end;
                CompanyInfo.Get;
                Purch."Procuring Entity (PE) Name" := CompanyInfo.Name;


                Purch."Contract Description" := NOA."Tender Name";
                Purch."Contract Start Date" := NOA."Document Date";
                Purch."Tender Name" := NOA."Tender Name";
                Purch."Notice of Award No." := NOA.Code;



                Purch.Insert(true);

                /*Purch2.RESET;
                Purch2.SETRANGE("No.",NOA."Awarded Bid No");
                IF Purch2.FINDSET THEN BEGIN
                Purch.COPY(NOA);
                 //Purch.VALIDATE("Invitation For Supply No",NOA."IFS Code");
                  Purch.MODIFY;
                  END;*/



                PurchLines.Reset;
                PurchLines.SetRange("Document No.", Purch."No.");
                if PurchLines.FindSet then begin
                    PurchLines.DeleteAll;
                end;
                IFSLines.Reset;
                IFSLines.SetRange("Document No.", NOA."Awarded Quote No");
                if IFSLines.FindSet then begin
                    repeat

                        PurchLines.Init;
                        PurchLines.TransferFields(IFSLines);
                        PurchLines."Document Type" := PurchLines."document type"::Order;
                        PurchLines."Document No." := Purch."No.";
                        PurchLines.Insert(true);


                    until IFSLines.Next = 0;
                end;



                Page.Run(50, Purch);

            end;
            /////
            IFSList.Reset;
            IFSList.SetRange(Code, NOA.Code);
            if IFSList.FindSet then begin
                PurchaseHead.Reset;
                PurchaseHead.SetRange("No.", IFSList."PRN No.");
                if PurchaseHead.FindSet then begin
                    FnUncommitPRN(PurchaseHead);
                end;
            end;
            PurchaseH.Reset;
            PurchaseH.SetRange("No.", Purch."No.");
            if PurchaseH.FindSet then begin
                //REPEAT
                FnLPOCommittment(PurchaseH);
                //UNTIL PurchaseH.NEXT=0
            end;
            ///
        end;
        Message(Text002, Purch."No.");

    end;

    procedure FnGenerateLPODirect2(NOA: Record "Purchase Header")
    var
        PurchaseH: Record "Purchase Header";
        PurchaseHead: Record "Purchase Header";
        Procurement: Codeunit "Procurement Processing";
        IFSList: Record "Standard Purchase Code";
        Vendor: Record Vendor;
        BidOwner: Record "Bid Business Owner";
        VendBusinessOwner: Record "Vendor Business Owner";
        BidPreferences: Record "Bid Preference & Reservation";
        VendSpecialGroup: Record "Vendor Special Group Entry";
        BidLitigation: Record "Bid Litigation History";
        VendLitigation: Record "Vendor Litigation History";
        BidPastExperience: Record "Bid Past Experience";
        VendPastExperience: Record "Vendor Past Experience";
        BidAuditedBal: Record "Bid Audited Balance Sheet";
        VendAuditedBal: Record "Vendor Audited Balance Sheet";
        BidIncomeStat: Record "Bid Audited Income Statement";
        VendIncomeStat: Record "Vendor Audited Income Statemen";
        BidVendBankAccount: Record "Bid Vendor Bank Account";
        VendBankAccount: Record "Vendor Bank Account";
        BidKeyStaff: Record "Bid Key Staff";
        VendKeyStaff: Record "Vendor Professional Staff";
        BidKeyStaffQual: Record "Bid Key Staff Qualification";
        VendKeyStaffQual: Record "Vendor Staff Qualification";
        BidStaffExperience: Record "Bid Key Staff Experience";
        VendStaffExperience: Record "Vendor Staff Experience";
        Purch: Record "Purchase Header";
        CopyPurchDoc: Report "Copy Purchase Document";
        Purch2: Record "Purchase Header";
        PurchLines: Record "Purchase Line";
        PurchLines1: Record "Purchase Line";
        Purch3: Record "Purchase Header";
        IFS: Record "Standard Purchase Code";
        CompanyInfo: Record "Company Information";
        IFSLines: Record "Purchase Line";
        ContractSecurity: Record "Bid_Contract Security Register";
        BidContractSecurity: Record "Bid_Contract Security Register";
        PRNRec: record "Purchase Header";
        XPRN: Record "Purchase Header";
        Pline: Record "Purchase Line";
        copyline: Record "Purchase Line";
        FromDocumentAttachment: Record "Document Attachment";
        ToDocumentAttachment: Record "Document Attachment";
        FromFieldRef: FieldRef;
        ToFieldRef: FieldRef;
        FromDocumentType: Option Quote,"Order",Invoice,"Credit Memo","Blanket Order","Return Order","Purchase Requisition";
        FromLineNo: Integer;
        FromNo: Code[20];
        ToNo: Code[20];
        ToDocumentType: Option Quote,"Order",Invoice,"Credit Memo","Blanket Order","Return Order";
        ToLineNo: Integer;
        approvalTable: Record "Approval Entry";
        RecordLinkManagement: Codeunit "Record Link Management";

    begin

        conftxt := Confirm('Are you sure you want to Generate LPO/LSO or Contracts?');
        if Format(conftxt) = 'Yes' then begin

            Purch.Init;
            Purch."Document Type" := Purch."document type"::Order;
            PURCH."PRN" := NOA."No.";
            //TEST
            PURCH."Procurement Type" := 'Works';
            Purch."Assigned User ID" := USERID;
            Purch."Awarded Bid No" := NOA."Awarded Bid No";
            Purch."Invitation For Supply No" := NOA."No.";
            Purch."Building/House No" := Vendor."Building/House No";
            Purch."Plot No" := Vendor."Plot No";
            purch."Document Date" := calcdate('30D', NOA."Document Date");
            Purch.Street := Vendor.Street;
            Purch."Nature of Business" := Vendor."Nature of Business";
            Purch."Current Trade Licence No" := Vendor."Current Trade Licence No";
            Purch."Trade Licence Expiry Date" := Vendor."Trade Licence Expiry Date";
            Purch."Max Value of Business" := Vendor."Max Value of Business";
            Purch."Preferred Bank Account Code" := Vendor."Preferred Bank Account Code";
            Purch."Business Type" := Vendor."Business Type";
            Purch."Nominal Capital LCY" := Vendor."Nominal Capital LCY";
            Purch."Issued Capital LCY" := Vendor."Issued Capital LCY";
            CompanyInfo.Get;
            Purch."Procuring Entity (PE) Name" := CompanyInfo.Name;
            purch."Contract Description" := NOA."Tender Name";
            Purch."Contract Start Date" := NOA."Document Date";
            Purch."Tender Name" := NOA."Tender Name";
            Purch."Notice of Award No." := NOA."No.";
            Purch.Description := NOA.Description;
            Purch.Insert(true);

            //plines
            pline.Reset();
            pline.setrange("Document Type", Pline."Document Type"::"Purchase Requisition");
            pline.setrange("Document No.", NOA."No.");
            if Pline.findset() then begin
                // pline.testfield("Gen. Bus. Posting Group");
                pline.testfield("Unit of Measure");
                pline.testfield("Location Code");
                pline.testfield("Gen. Prod. Posting Group");

                copyline.reset();
                copyline.setrange("Document Type", copyline."Document Type"::Order);
                copyline.SetRange("Document No.", NOA."No.");
                if copyline.FindSet() then
                    copyline.DeleteAll();

                repeat
                    copyline.init;
                    copyline.TransferFields(Pline);
                    copyline."Document Type" := copyline."Document Type"::Order;
                    copyline."Document No." := Purch."No.";
                    Copyline.insert();

                until Pline.next() = 0;
            end;
            //kelly
            RecordLinkManagement.CopyLinks(Purch, NOA);
            CopyAttachments(NOA, Purch);

            NOA."Linked LPO No." := Purch."No.";
            NOA.Modify(true);

        end;

        Page.Run(50, Purch);
        Message(Text002, Purch."No.");

    end;

    //cc
    procedure CopyAttachments(var PurchasePrn: Record "Purchase Header"; var PurchaseOrder: Record "Purchase Header")
    var
        FromDocumentAttachment: Record "Document Attachment";
        ToDocumentAttachment: Record "Document Attachment";
        FromFieldRef: FieldRef;
        ToFieldRef: FieldRef;
        FromDocumentType: Option Quote,"Order",Invoice,"Credit Memo","Blanket Order","Return Order","Purchase Requisition";
        FromLineNo: Integer;
        FromNo: Code[20];
        ToNo: Code[20];
        ToDocumentType: Option Quote,"Order",Invoice,"Credit Memo","Blanket Order","Return Order";
        ToLineNo: Integer;
    begin
        FromDocumentAttachment.SetRange("Table ID", Database::"Purchase Header");
        if FromDocumentAttachment.IsEmpty() then
            exit;
        FromDocumentAttachment.setrange("No.", PurchasePrn."No.");
        if FromDocumentAttachment.FindSet() then begin
            repeat
                Clear(ToDocumentAttachment);
                ToDocumentAttachment.Init();
                ToDocumentAttachment.TransferFields(FromDocumentAttachment);
                ToDocumentAttachment.Validate("Table ID", database::"Purchase Header");
                ToDocumentAttachment.Validate("No.", PurchaseOrder."No.");
                ToDocumentAttachment.Validate("Document Type", ToDocumentType::"Order");
                if not ToDocumentAttachment.Insert(true) then;
                ToDocumentAttachment."Attached Date" := FromDocumentAttachment."Attached Date";
                ToDocumentAttachment.modify();
            until FromDocumentAttachment.Next() = 0;
        end;
        message('Attachments Copied Sucessfully');
    end;

    procedure fnConvertFile(fileLink: Text; extensionType: Text; tableId: Integer; fileName: Text; recordNo: Code[30]; documentType: Integer) status: Text
    var
        tbl_documentAttachments: Record "Document Attachment";
        importFile: File;
        fileInstream: InStream;
        fileId: Guid;
        PurchaseHeader: record "Purchase Header";


    begin
        tbl_documentAttachments.Reset();
        tbl_documentAttachments.Init();
        tbl_documentAttachments."Table ID" := tableId;
        tbl_documentAttachments."File Name" := fileName;
        /// // if documentType = 1 then begin
        ////     tbl_documentAttachments."Document Type" := PurchaseHeader."Document Type"::"Purchase Requisition";
        /////  end;
        //  else if documentType = 2 then begin
        //                 tbl_documentAttachments."Document Type" := PurchaseHeader."Document Type"::"Purchase Requisition"

        // end else if documentType = 3 then begin
        //                 tbl_documentAttachments."Document Type" := PurchaseHeader."Document Type"::"Purchase Requisition";

        // end
        tbl_documentAttachments."Line No." := 10000;
        tbl_documentAttachments."No." := recordNo;
        tbl_documentAttachments."File Extension" := extensionType;
        if (extensionType.ToLower() = 'pdf') then begin
            tbl_documentAttachments."File Type" := tbl_documentAttachments."File Type"::PDF;
        end else
            if (extensionType.ToLower() = 'docx') then begin
                tbl_documentAttachments."File Type" := tbl_documentAttachments."File Type"::Word;
            end
            else
                if (extensionType.ToLower() = 'xlsx') then begin
                    tbl_documentAttachments."File Type" := tbl_documentAttachments."File Type"::Excel;
                end else
                    if ((extensionType.ToLower() = 'png') OR (extensionType.ToLower() = 'jpeg') OR (extensionType.ToLower() = 'jpg')) then begin
                        tbl_documentAttachments."File Type" := tbl_documentAttachments."File Type"::Image;
                    end;
        importFile.Open(fileLink);
        importFile.CreateInstream(fileInstream);
        fileId := tbl_documentAttachments."Document Reference ID".ImportStream(fileInstream, fileName);
        if tbl_documentAttachments.Insert(true) then begin
            status := 'success*The document was successfully attached';
        end else begin
            status := 'error*An error occured during the process of creating a document link. kindly contact the administrator if this error persists';
        end;
        importFile.Close;

    end;



    procedure FnGenerateLPODirect1(NOA: Record "Bid Tabulation Header")
    var
        PurchaseH: Record "Purchase Header";
        PurchaseHead: Record "Purchase Header";
        Procurement: Codeunit "Procurement Processing";
        IFSList: Record "Standard Purchase Code";
        Vendor: Record Vendor;
        BidOwner: Record "Bid Business Owner";
        VendBusinessOwner: Record "Vendor Business Owner";
        BidPreferences: Record "Bid Preference & Reservation";
        VendSpecialGroup: Record "Vendor Special Group Entry";
        BidLitigation: Record "Bid Litigation History";
        VendLitigation: Record "Vendor Litigation History";
        BidPastExperience: Record "Bid Past Experience";
        VendPastExperience: Record "Vendor Past Experience";
        BidAuditedBal: Record "Bid Audited Balance Sheet";
        VendAuditedBal: Record "Vendor Audited Balance Sheet";
        BidIncomeStat: Record "Bid Audited Income Statement";
        VendIncomeStat: Record "Vendor Audited Income Statemen";
        BidVendBankAccount: Record "Bid Vendor Bank Account";
        VendBankAccount: Record "Vendor Bank Account";
        BidKeyStaff: Record "Bid Key Staff";
        VendKeyStaff: Record "Vendor Professional Staff";
        BidKeyStaffQual: Record "Bid Key Staff Qualification";
        VendKeyStaffQual: Record "Vendor Staff Qualification";
        BidStaffExperience: Record "Bid Key Staff Experience";
        VendStaffExperience: Record "Vendor Staff Experience";
        Purch: Record "Purchase Header";
        CopyPurchDoc: Report "Copy Purchase Document";
        Purch2: Record "Purchase Header";
        PurchLines: Record "Purchase Line";
        PurchLines1: Record "Purchase Line";
        Purch3: Record "Purchase Header";
        IFS: Record "Standard Purchase Code";
        CompanyInfo: Record "Company Information";
        IFSLines: Record "Purchase Line";
        ContractSecurity: Record "Bid_Contract Security Register";
        BidContractSecurity: Record "Bid_Contract Security Register";
    begin
        //IF NOT ConfirmManagement.ConfirmProcess(Text001,TRUE) THEN
        //  EXIT;
        //if Contract
        //mtr
        conftxt := Confirm('Are you sure you want to Generate LPO/LSO or Contracts?');
        if Format(conftxt) = 'Yes' then begin


            Vendor.Reset;
            Vendor.SetRange("No.", NOA."Awarded Bid No");
            if Vendor.FindSet then begin
                Purch.Init;
                Purch."Document Type" := Purch."document type"::Order;
                Purch."Awarded Bid No" := NOA."Awarded Bid No";
                //Purch."Awarded Bid No":=NOA."Awarded Bidder No.";
                //Purch."Award Tender Sum Inc Taxes":=NOA."Award Tender Sum Inc Taxes";
                Purch."Invitation For Supply No" := NOA.Code;
                Purch.Validate("Buy-from Vendor No.", NOA."Awarded Bid No");
                Purch."Building/House No" := Vendor."Building/House No";
                Purch."Plot No" := Vendor."Plot No";
                Purch.Street := Vendor.Street;
                Purch."Nature of Business" := Vendor."Nature of Business";
                Purch."Current Trade Licence No" := Vendor."Current Trade Licence No";
                Purch."Trade Licence Expiry Date" := Vendor."Trade Licence Expiry Date";
                Purch."Max Value of Business" := Vendor."Max Value of Business";
                Purch."Preferred Bank Account Code" := Vendor."Preferred Bank Account Code";
                Purch."Business Type" := Vendor."Business Type";
                Purch."Nominal Capital LCY" := Vendor."Nominal Capital LCY";
                Purch."Issued Capital LCY" := Vendor."Issued Capital LCY";
                IFS.Reset;
                IFS.SetRange(Code, NOA.Code);
                if IFS.FindSet then begin
                    //Purch.INIT;


                    Purch."Bid Envelope Type" := IFS."Bid Envelop Type";
                    Purch."Requisition No" := IFS."PRN No.";
                    Purch."Purchaser Code" := IFS."Purchaser Code";
                    Purch.Validate("Purchaser Code", IFS."Purchaser Code");
                    Purch."Procurement Plan ID" := IFS."Procurement Plan ID";
                    Purch."Procurement Plan Entry No" := IFS."Procurement Plan Entry No";
                    Purch."Tender Description" := IFS."Tender Summary";
                    Purch."Responsibility Center" := IFS."Responsibility Center";
                    Purch.Validate("Location Code", IFS."Location Code");
                    Purch."Language Code" := IFS."Language Code";
                    Purch.Validate("Purchaser Code", IFS."Purchaser Code");
                    Purch."Currency Code" := IFS."Currency Code";
                    Purch."IFS Code" := NOA.Code;
                    Purch."Bid Charge Code" := IFS."Bid Charge Code";
                    Purch."Bid Charge (LCY)" := IFS."Bid Charge (LCY)";
                    Purch."Works Category" := IFS."Works Category";
                    Purch."Road Code" := IFS."Road Code";
                    Purch."Link Name" := IFS."Road Link Name";
                    Purch.Consitituency := IFS."Constituency ID";
                    Purch."Engineer Estimate (LCY)" := IFS."Engineer Estimate (LCY)";
                    //Purch."Max Works Completion Duration":=IFS."Max Works Completion Duration";
                    Purch."Max Works Kickoff Duration" := IFS."Max Works Kickoff Duration";
                    Purch."Max Works Charter Duration" := IFS."Max Works Charter Duration";
                    Purch.Validate("Payment Terms Code", IFS."Payment Terms Code");
                    //Purch."Defects Liability Period":=IFS."Defects Liability Period";
                    Purch."Daily Liquidated Dam Unit Cost" := IFS."Daily Liquidated Dam Unit Cost";
                    Purch."Liquidated Damages Limit %" := IFS."Liquidated Damages Limit %";
                    Purch."Payment Retention %" := IFS."Payment Retention %";
                    Purch."Retention Amount Limit %" := IFS."Retention Amount Limit %";
                    Purch."Min Interim Certificate Amount" := IFS."Min Interim Certificate Amount";
                end;
                CompanyInfo.Get;
                Purch."Procuring Entity (PE) Name" := CompanyInfo.Name;


                Purch."Contract Description" := NOA."Tender Name";
                Purch."Contract Start Date" := NOA."Document Date";
                Purch."Tender Name" := NOA."Tender Name";
                Purch."Notice of Award No." := NOA.Code;



                Purch.Insert(true);

                /*Purch2.RESET;
                Purch2.SETRANGE("No.",NOA."Awarded Bid No");
                IF Purch2.FINDSET THEN BEGIN
                Purch.COPY(NOA);
                 //Purch.VALIDATE("Invitation For Supply No",NOA."IFS Code");
                  Purch.MODIFY;
                  END;*/



                PurchLines.Reset;
                PurchLines.SetRange("Document No.", Purch."No.");
                if PurchLines.FindSet then begin
                    PurchLines.DeleteAll;
                end;
                IFSLines.Reset;
                IFSLines.SetRange("Document No.", NOA."Awarded Bid No");
                if IFSLines.FindSet then begin
                    repeat

                        PurchLines.Init;
                        PurchLines.TransferFields(IFSLines);
                        PurchLines."Document Type" := PurchLines."document type"::Order;
                        PurchLines."Document No." := Purch."No.";
                        PurchLines.Insert(true);


                    until IFSLines.Next = 0;
                end;



                Page.Run(50, Purch);

            end;
            /////
            IFSList.Reset;
            IFSList.SetRange(Code, NOA.Code);
            if IFSList.FindSet then begin
                PurchaseHead.Reset;
                PurchaseHead.SetRange("No.", IFSList."PRN No.");
                if PurchaseHead.FindSet then begin
                    FnUncommitPRN(PurchaseHead);
                end;
            end;
            PurchaseH.Reset;
            PurchaseH.SetRange("No.", Purch."No.");
            if PurchaseH.FindSet then begin
                //REPEAT
                FnLPOCommittment(PurchaseH);
                //UNTIL PurchaseH.NEXT=0
            end;
            ///
        end;
        Message(Text002, Purch."No.");

    end;


    procedure SuggestRequiredDocEOI(IFP: Record "Request For Information")
    var
        ProcSetup: Record "Procurement Setup";
        ProccDocumentTempLine: Record "Procurement Doc Template Line";
        RFIRequiredDoc: Record "RFI Required Document";
    begin
        ProcSetup.Get;
        ProcSetup.TestField("Default Procurement Template");
        RFIRequiredDoc.Reset;
        RFIRequiredDoc.SetRange("Document No", IFP.Code);
        if not RFIRequiredDoc.FindSet then begin
            ProccDocumentTempLine.Reset;
            ProccDocumentTempLine.SetRange("Template ID", ProcSetup."Default Procurement Template");
            ProccDocumentTempLine.SetRange("Procurement Process", ProccDocumentTempLine."procurement process"::"EOI Response");
            if ProccDocumentTempLine.FindSet then begin
                repeat
                    RFIRequiredDoc.Init;
                    RFIRequiredDoc."Document No" := IFP.Code;
                    RFIRequiredDoc."Document Type" := IFP."Document Type";
                    RFIRequiredDoc."Procurement Document Type ID" := ProccDocumentTempLine."Procurement Document Type";
                    RFIRequiredDoc.Description := ProccDocumentTempLine.Description;
                    RFIRequiredDoc."Requirement Type" := ProccDocumentTempLine."Requirement Type";
                    RFIRequiredDoc.Insert(true);
                until ProccDocumentTempLine.Next = 0;
            end;

        end;

        RFICategory.Reset;
        RFICategory.SetRange("Document No", IFP.Code);
        if RFICategory.FindSet then begin
            repeat
                RFICategoryRequirement.Reset;
                RFICategoryRequirement.SetRange("Category ID", RFICategory."Prequalification Category ID");
                if RFICategoryRequirement.FindSet then begin
                    RFIRequiredDoc.Init;
                    RFIRequiredDoc."Document Type" := IFP."Document Type";
                    RFIRequiredDoc."Document No" := IFP.Code;
                    RFIRequiredDoc."Procurement Document Type ID" := RFICategoryRequirement."Requirement Code";
                    RFIRequiredDoc.Description := RFICategoryRequirement.Description;
                    RFIRequiredDoc."Requirement Type" := RFICategoryRequirement."Requirement Type";
                    RFIRequiredDoc."Specialized Provider Req" := true;
                    RFIRequiredDoc."Linked To category No" := RFICategory."Prequalification Category ID";
                    RFIRequiredDoc.Insert(true);
                end;

            until RFICategory.Next = 0;
        end;
    end;


    procedure FnSendAppraisalReport(PerfomanceEvaluation: Record "Perfomance Evaluation")
    var
        SupplierReq: Record Contact;
        LastFieldNo: Integer;
        FooterPrinted: Boolean;
        FileDirectory: Text[100];
        FileName: Text[100];
        ReportID: Integer;
        // //"Object": Record "Object";
        Window: Dialog;
        RunOnceFile: Text[1000];
        TimeOut: Integer;
        Customer2: Record Customer;
        Cust: Record Customer;
        cr: Integer;
        lf: Integer;
        EmailBody: array[2] of Text[30];
        BodyText: Text[250];
        mymail: Codeunit Mail;
        DefaultPrinter: Text[200];
        WindowisOpen: Boolean;
        FileDialog: Codeunit Mail;
        SendingDate: Date;
        SendingTime: Time;
        Counter: Integer;
        cu400: Codeunit Mail;
        DocLog: Record "Document E-mail Log";
        BranchName: Code[80];
        DimValue: Record "Dimension Value";
        SenderAddress: Text[100];
        CustEmail: Text[100];
        UserSetup: Record "User Setup";
        HRSetup: Record "Company Information";
        Emp: Record Vendor;
        PayrollMonth: Date;
        PayrollMonthText: Text[30];
        PayPeriodtext: Text;
        PayPeriod: Record "Payroll PeriodX";
        CompInfo: Record "Company Information";
        DateFilter: Text;
        FromDate: Date;
        ToDate: Date;
        FromDateS: Text;
        ToDateS: Text;
        vend: Record Vendor;
        StartDate: Date;
        EndDAte: Date;
        EmailVerifier: Codeunit Payroll3;
        IsEmailValid: Boolean;
        PPayableSetup: Record "Procurement Setup";
        RequesterName: Text[100];
        RequesterEmail: Text[100];
        emailhdr: Text[100];
        CompanyDetails: Text[250];
        SupplierDetails: Text[1000];
        SenderMessage: Text[1000];
        ProcNote: Text[1000];
        LoginDetails: Text[1000];
        PortalUser: Record "Dynasoft Portal User";
        Password: Text[50];
        ActivationDetails: Text[1000];
        IFSCommitteMembers: Record "IFS Tender Committee Member";
        IFS: Record "Standard Purchase Code";
        CommitteType: Record "Procurement Committee Types";
        CommitteMembers: Record "IFS Tender Committee";
    begin
        ///Notifying Employee Appraisal Report
        CompInfo.Get;
        HRSetup.Get;

        Employee.Reset;
        Employee.SetRange(Employee."No.", PerfomanceEvaluation."Employee No.");
        if Employee.FindSet then begin
            RequesterEmail := Employee."Company E-Mail";
            RequesterName := PerfomanceEvaluation."Employee Name";

            Window.Open('Notifying the employee...');

            WindowisOpen := true;


            Counter := Counter + 1;

            //Create message
            if HRSetup."E-Mail" = '' then
                Error('Please Contact the IT Admin to specify the E-mail address under Company Information Setup page!!');
            SenderAddress := HRSetup."E-Mail";
            CompanyDetails := 'Dear,  ' + RequesterName;
            SenderMessage := '<BR>This is to notify you that your appraisal was successfully submitted: ' + PerfomanceEvaluation.No + '</BR>';
            LoginDetails := 'Attached herein, please find an e-copy of your appraisal report';
            //ProcNote:='<BR> If you require any assistance, please contact our Supply Chain Management team by Phone '+ HRSetup."Phone No."+' or vendor support team via Email: '+PPayableSetup."Default Proc Email Contact";
            FileDirectory := 'C:\DOCS\';
            FileName := 'AppraisalReport_' + PerfomanceEvaluation.No + '.pdf';

            PerfomanceEvaluation.Reset;
            PerfomanceEvaluation.SetRange(No, PerfomanceEvaluation.No);
            if PerfomanceEvaluation.FindSet then begin

                //  //Report.SaveAsPdf(80016, FileDirectory + FileName, PerfomanceEvaluation);

            end;

            //IF CustEmail='' THEN
            //EXIT;

            //MESSAGE:='This is to notify you that there has been a request for Registration ' +  SupplierRequest."No." + ' From Supplier'+ SupplierRequest.Name;
            emailhdr := 'PERFORMANCE APPRAISAL ' + PerfomanceEvaluation.No;

            // //cu400.CreateMessage(CompInfo.Name, SenderAddress, RequesterEmail, emailhdr,
            // //CompanyDetails + '<BR></BR>' + SenderMessage + SupplierDetails + LoginDetails + ActivationDetails, true);

            // ////cu400.AddCC(RequesterEmail);
            // //cu400.AddAttachment(FileDirectory + FileName, FileName);

            // //cu400.AddBodyline(ProcNote);


            // //cu400.Send;
            SendingDate := Today;
            SendingTime := Time;




            Sleep(1000);
            Window.Close;

            //UNTIL IFSCommitteMembers.NEXT=0;
        end;
    end;


    procedure FnNotifyContractorSiteAgentNomination(WEPContractorSubmission: Record "WEP Contractor Submission")
    var
        "Code": Code[10];
        ProcurementSetup: Record "Procurement Setup";
        IFPResponseLine: Record "IFP Response Line";
        Vendors: Record Vendor;
        InsCoverageLedgerEntry: Record "Ins. Coverage Ledger Entry";
        InsuranceReg: Record Insurance;
        Window: Dialog;
        EmailBody: array[2] of Text[30];
        BodyText: Text[250];
        mymail: Codeunit Mail;
        WindowisOpen: Boolean;
        FileDialog: Codeunit Mail;
        SendingDate: Date;
        SendingTime: Time;
        Counter: Integer;
        cu400: Codeunit Mail;
        SenderAddress: Text[100];
        UserSetup: Record "User Setup";
        HRSetup: Record "Human Resources Setup";
        CompInfo: Record "Company Information";
        RequesterName: Text[100];
        RequesterEmail: Text[100];
        emailhdr: Text[100];
        ProcNote: Text[1000];
        LoginDetails: Text[1000];
        CustEmail: Text[100];
        CompanyDetails: Text[250];
        SupplierDetails: Text[1000];
        SenderMessage: Text[1000];
        FileDirectory: Text[100];
        FileName: Text[100];
        RFIResponse2: Record "RFI Response";
        RFIResponse: Record "RFI Response";
        IFPResponseLine1: Record "IFP Response Line";
        PurchaseHeader: Record "Purchase Header";
    begin
        Vendors.Reset;
        Vendors.SetRange("No.", WEPContractorSubmission."Contractor No");
        if Vendors.FindSet then begin
            Vendors.TestField("E-Mail");
            CustEmail := Vendors."E-Mail";
        end;

        CompInfo.Get;
        ProcurementSetup.Get;
        RequesterEmail := ProcurementSetup."Default Proc Email Contact";
        RequesterName := ProcurementSetup."Default Proc Email Contact";
        Window.Open('Sending...');
        WindowisOpen := true;
        //Create message
        if ProcurementSetup."Default Proc Email Contact" = '' then
            Error('Please Contact the IT Admin to specify the E-mail address under Procurement Setup page!!');
        SenderAddress := ProcurementSetup."Default Proc Email Contact";

        CompanyDetails := 'Dear' + ' ' + WEPContractorSubmission."Contractor Name" + ',<br>';
        SenderMessage := '<BR>This is to notify you that your nomination for site agent' + WEPContractorSubmission."Site Agent Name" + '<br/> has been ' + Format(WEPContractorSubmission."Approval Type")
        + '<br/><br/>';
        SupplierDetails := '';
        LoginDetails := 'If you require any assistance, please contact the Authority for more information.<br/>';
        ProcNote := '<BR> Regards';

        if CustEmail = '' then
            exit;

        emailhdr := UpperCase(CompInfo.Name) + ' SITE AGENT APPOINTMENT';
        // //cu400.CreateMessage(CompInfo.Name, SenderAddress, CustEmail, emailhdr,
        // //CompanyDetails + '<BR></BR>' + SenderMessage + SupplierDetails + LoginDetails, true);
        // ////cu400.AddCC(RequesterEmail);
        // //cu400.AddBodyline(ProcNote);
        // ////cu400.AddAttachment(FileDirectory+FileName,FileName);
        // //cu400.Send;
        SendingDate := Today;
        SendingTime := Time;
        Sleep(1000);
        Window.Close;
        Message('Notified Successfully');
    end;


    procedure FnNotifyContractorSiteAgentNominationTempApproval(WEPContractorSubmission: Record "WEP Contractor Submission")
    var
        "Code": Code[10];
        ProcurementSetup: Record "Procurement Setup";
        IFPResponseLine: Record "IFP Response Line";
        Vendors: Record Vendor;
        InsCoverageLedgerEntry: Record "Ins. Coverage Ledger Entry";
        InsuranceReg: Record Insurance;
        Window: Dialog;
        EmailBody: array[2] of Text[30];
        BodyText: Text[250];
        mymail: Codeunit Mail;
        WindowisOpen: Boolean;
        FileDialog: Codeunit Mail;
        SendingDate: Date;
        SendingTime: Time;
        Counter: Integer;
        cu400: Codeunit Mail;
        SenderAddress: Text[100];
        UserSetup: Record "User Setup";
        HRSetup: Record "Human Resources Setup";
        CompInfo: Record "Company Information";
        RequesterName: Text[100];
        RequesterEmail: Text[100];
        emailhdr: Text[100];
        ProcNote: Text[1000];
        LoginDetails: Text[1000];
        CustEmail: Text[100];
        CompanyDetails: Text[250];
        SupplierDetails: Text[1000];
        SenderMessage: Text[1000];
        FileDirectory: Text[100];
        FileName: Text[100];
        RFIResponse2: Record "RFI Response";
        RFIResponse: Record "RFI Response";
        IFPResponseLine1: Record "IFP Response Line";
        PurchaseHeader: Record "Purchase Header";
    begin
        Vendors.Reset;
        Vendors.SetRange("No.", WEPContractorSubmission."Contractor No");
        if Vendors.FindSet then begin
            Vendors.TestField("E-Mail");
            CustEmail := Vendors."E-Mail";
        end;

        CompInfo.Get;
        ProcurementSetup.Get;
        RequesterEmail := ProcurementSetup."Default Proc Email Contact";
        RequesterName := ProcurementSetup."Default Proc Email Contact";
        Window.Open('Sending...');
        WindowisOpen := true;
        //Create message
        if ProcurementSetup."Default Proc Email Contact" = '' then
            Error('Please Contact the IT Admin to specify the E-mail address under Procurement Setup page!!');
        SenderAddress := ProcurementSetup."Default Proc Email Contact";

        CompanyDetails := 'Dear' + ' ' + WEPContractorSubmission."Contractor Name" + ',<br>';
        SenderMessage := '<BR>This is to notify you that your nomination for site agent' + WEPContractorSubmission."Site Agent Name" + '<br/> has been ' + Format(WEPContractorSubmission."Approval Type")
        + 'for a period of ' + Format(WEPContractorSubmission."Validity Period") + ' expiring on ' + Format(WEPContractorSubmission."Expiry Date") + '<br/><br/>';
        SupplierDetails := '';
        LoginDetails := 'If you require any assistance, please contact the Authority for more information.<br/>';
        ProcNote := '<BR> Regards';

        if CustEmail = '' then
            exit;

        emailhdr := UpperCase(CompInfo.Name) + ' SITE AGENT NOMINATION';
        // //cu400.CreateMessage(CompInfo.Name, SenderAddress, CustEmail, emailhdr,
        // //CompanyDetails + '<BR></BR>' + SenderMessage + SupplierDetails + LoginDetails, true);
        // ////cu400.AddCC(RequesterEmail);
        // //cu400.AddBodyline(ProcNote);
        // ////cu400.AddAttachment(FileDirectory+FileName,FileName);
        // //cu400.Send;
        SendingDate := Today;
        SendingTime := Time;
        Sleep(1000);
        Window.Close;
        Message('Notified Successfully');
    end;


    procedure FnNotifyREFinalAccount(FinalAccount: Record "Final Account")
    var
        "Code": Code[10];
        ProcurementSetup: Record "Procurement Setup";
        IFPResponseLine: Record "IFP Response Line";
        Vendors: Record Vendor;
        InsCoverageLedgerEntry: Record "Ins. Coverage Ledger Entry";
        InsuranceReg: Record Insurance;
        Window: Dialog;
        EmailBody: array[2] of Text[30];
        BodyText: Text[250];
        mymail: Codeunit Mail;
        WindowisOpen: Boolean;
        FileDialog: Codeunit Mail;
        SendingDate: Date;
        SendingTime: Time;
        Counter: Integer;
        cu400: Codeunit Mail;
        SenderAddress: Text[100];
        UserSetup: Record "User Setup";
        HRSetup: Record "Human Resources Setup";
        CompInfo: Record "Company Information";
        RequesterName: Text[100];
        RequesterEmail: Text[100];
        emailhdr: Text[100];
        ProcNote: Text[1000];
        LoginDetails: Text[1000];
        CustEmail: Text[100];
        CompanyDetails: Text[250];
        SupplierDetails: Text[1000];
        SenderMessage: Text[1000];
        FileDirectory: Text[100];
        FileName: Text[100];
        RFIResponse2: Record "RFI Response";
        RFIResponse: Record "RFI Response";
        IFPResponseLine1: Record "IFP Response Line";
        PurchaseHeader: Record "Purchase Header";
        InternalProjectResource: Record "Internal Project Resource";
    begin
        InternalProjectResource.Reset;
        InternalProjectResource.SetRange(InternalProjectResource."Project ID", FinalAccount."Project ID");
        InternalProjectResource.SetRange(InternalProjectResource."Role Code", '  I-RE');
        if InternalProjectResource.FindSet then begin
            InternalProjectResource.TestField(Email);
            CustEmail := InternalProjectResource.Email;
        end;

        CompInfo.Get;
        ProcurementSetup.Get;
        RequesterEmail := ProcurementSetup."Default Proc Email Contact";
        RequesterName := ProcurementSetup."Default Proc Email Contact";
        Window.Open('Sending email to Resident Engineer');
        WindowisOpen := true;
        //Create message
        if ProcurementSetup."Default Proc Email Contact" = '' then
            Error('Please Contact the IT Admin to specify the E-mail address under Procurement Setup page!!');
        SenderAddress := ProcurementSetup."Default Proc Email Contact";

        InternalProjectResource.Reset;
        InternalProjectResource.SetRange(InternalProjectResource."Project ID", FinalAccount."Project ID");
        InternalProjectResource.SetRange(InternalProjectResource."Role Code", '  I-RE');
        if InternalProjectResource.FindSet then begin
            CompanyDetails := 'Dear' + ' ' + InternalProjectResource.Name + ',<br>';
            SenderMessage := '<BR>This is to notify you that the above named project ' + FinalAccount."Project Name" + '<br/> has been closed succefully'
            + '<br/><br/>';
            SenderMessage := SenderMessage + ' ' + 'Please find attached the acceptance letter.' + '<br/><br/>';
        end;
        SupplierDetails := '';
        LoginDetails := 'If you require any assistance, please contact the Authority for more information.<br/>';
        ProcNote := '<BR> Regards';
        FileDirectory := 'C:\DOCS\';
        FileName := 'Acceptance_Letter' + FinalAccount."Document No" + '.pdf';

        FinalAccount.Reset;
        FinalAccount.SetRange("Document No", FinalAccount."Document No");
        if FinalAccount.FindSet then begin

            // //Report.SaveAsPdf(72053, FileDirectory + FileName, FinalAccount);

        end;
        if CustEmail = '' then
            exit;

        emailhdr := UpperCase(CompInfo.Name) + ' FINAL ACCOUNT';
        // //cu400.CreateMessage(CompInfo.Name, SenderAddress, CustEmail, emailhdr,
        // //CompanyDetails + '<BR></BR>' + SenderMessage + SupplierDetails + LoginDetails, true);
        ////cu400.AddCC(RequesterEmail);
        ////cu400.AddBodyline(ProcNote);
        // //cu400.AddAttachment(FileDirectory + FileName, FileName);
        //  //cu400.Send;
        SendingDate := Today;
        SendingTime := Time;
        Sleep(1000);
        Window.Close;
        Message('Notified Successfully');
    end;


    procedure FnNotifyMainContractorFinalAccount(FinalAccount: Record "Final Account")
    var
        "Code": Code[10];
        ProcurementSetup: Record "Procurement Setup";
        IFPResponseLine: Record "IFP Response Line";
        Vendors: Record Vendor;
        InsCoverageLedgerEntry: Record "Ins. Coverage Ledger Entry";
        InsuranceReg: Record Insurance;
        Window: Dialog;
        EmailBody: array[2] of Text[30];
        BodyText: Text[250];
        mymail: Codeunit Mail;
        WindowisOpen: Boolean;
        FileDialog: Codeunit Mail;
        SendingDate: Date;
        SendingTime: Time;
        Counter: Integer;
        cu400: Codeunit Mail;
        SenderAddress: Text[100];
        UserSetup: Record "User Setup";
        HRSetup: Record "Human Resources Setup";
        CompInfo: Record "Company Information";
        RequesterName: Text[100];
        RequesterEmail: Text[100];
        emailhdr: Text[100];
        ProcNote: Text[1000];
        LoginDetails: Text[1000];
        CustEmail: Text[100];
        CompanyDetails: Text[250];
        SupplierDetails: Text[1000];
        SenderMessage: Text[1000];
        FileDirectory: Text[100];
        FileName: Text[100];
        RFIResponse2: Record "RFI Response";
        RFIResponse: Record "RFI Response";
        IFPResponseLine1: Record "IFP Response Line";
        PurchaseHeader: Record "Purchase Header";
        InternalProjectResource: Record "Internal Project Resource";
    begin
        Vendors.Reset;
        Vendors.SetRange(Vendors."No.", FinalAccount."Contractor No");
        if Vendors.FindSet then begin
            Vendors.TestField("E-Mail");
            CustEmail := Vendors."E-Mail";
        end;

        CompInfo.Get;
        ProcurementSetup.Get;
        RequesterEmail := ProcurementSetup."Default Proc Email Contact";
        RequesterName := ProcurementSetup."Default Proc Email Contact";
        Window.Open('Sending email to Resident Engineer');
        WindowisOpen := true;
        //Create message
        if ProcurementSetup."Default Proc Email Contact" = '' then
            Error('Please Contact the IT Admin to specify the E-mail address under Procurement Setup page!!');
        SenderAddress := ProcurementSetup."Default Proc Email Contact";

        CompanyDetails := 'Dear' + ' ' + FinalAccount."Contractor Name" + ',<br>';
        SenderMessage := '<BR>This is to notify you that the above named project ' + FinalAccount."Project Name" + '<br/> has been closed succefully'
        + '<br/><br/>';
        SenderMessage := SenderMessage + ' ' + 'Please find attached the acceptance letter.' + '<br/><br/>';

        SupplierDetails := '';
        LoginDetails := 'If you require any assistance, please contact the Authority for more information.<br/>';
        ProcNote := '<BR> Regards';
        FileDirectory := 'C:\DOCS\';
        FileName := 'Acceptance_Letter' + FinalAccount."Document No" + '.pdf';

        FinalAccount.Reset;
        FinalAccount.SetRange("Document No", FinalAccount."Document No");
        if FinalAccount.FindSet then begin
            //  //Report.SaveAsPdf(72053, FileDirectory + FileName, FinalAccount);
        end;

        if CustEmail = '' then
            exit;

        emailhdr := UpperCase(CompInfo.Name) + ' FINAL ACCOUNT';
        // //cu400.CreateMessage(CompInfo.Name, SenderAddress, CustEmail, emailhdr,
        // //CompanyDetails + '<BR></BR>' + SenderMessage + SupplierDetails + LoginDetails, true);
        ////cu400.AddCC(RequesterEmail);
        //  //cu400.AddBodyline(ProcNote);
        //  //cu400.AddAttachment(FileDirectory + FileName, FileName);
        // //cu400.Send;
        SendingDate := Today;
        SendingTime := Time;
        Sleep(1000);
        Window.Close;
        Message('Notified Successfully');
    end;


    procedure FnNotifySubcontractorFinalAccount(FinalAccount: Record "Final Account")
    var
        "Code": Code[10];
        ProcurementSetup: Record "Procurement Setup";
        IFPResponseLine: Record "IFP Response Line";
        Vendors: Record Vendor;
        InsCoverageLedgerEntry: Record "Ins. Coverage Ledger Entry";
        InsuranceReg: Record Insurance;
        Window: Dialog;
        EmailBody: array[2] of Text[30];
        BodyText: Text[250];
        mymail: Codeunit Mail;
        WindowisOpen: Boolean;
        FileDialog: Codeunit Mail;
        SendingDate: Date;
        SendingTime: Time;
        Counter: Integer;
        cu400: Codeunit Mail;
        SenderAddress: Text[100];
        UserSetup: Record "User Setup";
        HRSetup: Record "Human Resources Setup";
        CompInfo: Record "Company Information";
        RequesterName: Text[100];
        RequesterEmail: Text[100];
        emailhdr: Text[100];
        ProcNote: Text[1000];
        LoginDetails: Text[1000];
        CustEmail: Text[100];
        CompanyDetails: Text[250];
        SupplierDetails: Text[1000];
        SenderMessage: Text[1000];
        FileDirectory: Text[100];
        FileName: Text[100];
        RFIResponse2: Record "RFI Response";
        RFIResponse: Record "RFI Response";
        IFPResponseLine1: Record "IFP Response Line";
        PurchaseHeader: Record "Purchase Header";
        InternalProjectResource: Record "Internal Project Resource";
        ProjectVendors: Record "Project Vendors";
    begin
        ProjectVendors.Reset;
        ProjectVendors.SetRange(ProjectVendors."Vendor Type", ProjectVendors."vendor type"::"Sub Contractor");
        if ProjectVendors.FindFirst then begin
            Vendors.Reset;
            Vendors.SetRange(Vendors."No.", ProjectVendors."Vendor No");
            if Vendors.FindSet then begin
                Vendors.TestField("E-Mail");
                CustEmail := Vendors."E-Mail";
            end;
        end;
        CompInfo.Get;
        ProcurementSetup.Get;
        RequesterEmail := ProcurementSetup."Default Proc Email Contact";
        RequesterName := ProcurementSetup."Default Proc Email Contact";
        Window.Open('Sending email to Resident Engineer');
        WindowisOpen := true;
        //Create message
        if ProcurementSetup."Default Proc Email Contact" = '' then
            Error('Please Contact the IT Admin to specify the E-mail address under Procurement Setup page!!');
        SenderAddress := ProcurementSetup."Default Proc Email Contact";

        ProjectVendors.Reset;
        ProjectVendors.SetRange(ProjectVendors."Vendor Type", ProjectVendors."vendor type"::"Sub Contractor");
        if ProjectVendors.FindFirst then begin
            CompanyDetails := 'Dear' + ' ' + ProjectVendors."Vendor Name" + ',<br>';
            SenderMessage := '<BR>This is to notify you that the above named project ' + FinalAccount."Project Name" + '<br/> has been closed succefully.'
            + '<br/><br/>';
            SenderMessage := SenderMessage + ' ' + 'Please find attached the acceptance letter.' + '<br/><br/>';
        end;
        SupplierDetails := '';
        LoginDetails := 'If you require any assistance, please contact the Authority for more information.<br/>';
        ProcNote := '<BR> Regards';
        FileDirectory := 'C:\DOCS\';
        FileName := 'Acceptance_Letter' + FinalAccount."Document No" + '.pdf';

        FinalAccount.Reset;
        FinalAccount.SetRange("Document No", FinalAccount."Document No");
        if FinalAccount.FindSet then begin

            //  //Report.SaveAsPdf(72053, FileDirectory + FileName, FinalAccount);

        end;
        if CustEmail = '' then
            exit;

        emailhdr := UpperCase(CompInfo.Name) + ' FINAL ACCOUNT';
        // //cu400.CreateMessage(CompInfo.Name, SenderAddress, CustEmail, emailhdr,
        // //CompanyDetails + '<BR></BR>' + SenderMessage + SupplierDetails + LoginDetails, true);
        ////cu400.AddCC(RequesterEmail);
        // //cu400.AddBodyline(ProcNote);
        // //cu400.AddAttachment(FileDirectory + FileName, FileName);
        // //cu400.Send;
        SendingDate := Today;
        SendingTime := Time;
        Sleep(1000);
        Window.Close;
        Message('Notified Successfully');
    end;


    procedure FnNotifyAssigneeFinalAccount(FinalAccount: Record "Final Account")
    var
        "Code": Code[10];
        ProcurementSetup: Record "Procurement Setup";
        IFPResponseLine: Record "IFP Response Line";
        Vendors: Record Vendor;
        InsCoverageLedgerEntry: Record "Ins. Coverage Ledger Entry";
        InsuranceReg: Record Insurance;
        Window: Dialog;
        EmailBody: array[2] of Text[30];
        BodyText: Text[250];
        mymail: Codeunit Mail;
        WindowisOpen: Boolean;
        FileDialog: Codeunit Mail;
        SendingDate: Date;
        SendingTime: Time;
        Counter: Integer;
        cu400: Codeunit Mail;
        SenderAddress: Text[100];
        UserSetup: Record "User Setup";
        HRSetup: Record "Human Resources Setup";
        CompInfo: Record "Company Information";
        RequesterName: Text[100];
        RequesterEmail: Text[100];
        emailhdr: Text[100];
        ProcNote: Text[1000];
        LoginDetails: Text[1000];
        CustEmail: Text[100];
        CompanyDetails: Text[250];
        SupplierDetails: Text[1000];
        SenderMessage: Text[1000];
        FileDirectory: Text[100];
        FileName: Text[100];
        RFIResponse2: Record "RFI Response";
        RFIResponse: Record "RFI Response";
        IFPResponseLine1: Record "IFP Response Line";
        PurchaseHeader: Record "Purchase Header";
        InternalProjectResource: Record "Internal Project Resource";
        ProjectVendors: Record "Project Vendors";
    begin
        ProjectVendors.Reset;
        ProjectVendors.SetRange(ProjectVendors."Vendor Type", ProjectVendors."vendor type"::Assignee);
        if ProjectVendors.FindFirst then begin
            Vendors.Reset;
            Vendors.SetRange(Vendors."No.", ProjectVendors."Vendor No");
            if Vendors.FindSet then begin
                Vendors.TestField("E-Mail");
                CustEmail := Vendors."E-Mail";
            end;
        end;

        CompInfo.Get;
        ProcurementSetup.Get;
        RequesterEmail := ProcurementSetup."Default Proc Email Contact";
        RequesterName := ProcurementSetup."Default Proc Email Contact";
        Window.Open('Sending email to Resident Engineer');
        WindowisOpen := true;
        //Create message
        if ProcurementSetup."Default Proc Email Contact" = '' then
            Error('Please Contact the IT Admin to specify the E-mail address under Procurement Setup page!!');
        SenderAddress := ProcurementSetup."Default Proc Email Contact";

        ProjectVendors.Reset;
        ProjectVendors.SetRange(ProjectVendors."Vendor Type", ProjectVendors."vendor type"::Assignee);
        if ProjectVendors.FindFirst then begin
            CompanyDetails := 'Dear' + ' ' + ProjectVendors."Vendor Name" + ',<br>';
            SenderMessage := '<BR>This is to notify you that the above named project ' + FinalAccount."Project Name" + '<br/> has been closed succefully'
            + '<br/><br/>';
            SenderMessage := SenderMessage + ' ' + 'Please find attached the acceptance letter.' + '<br/><br/>';
        end;
        SupplierDetails := '';
        LoginDetails := 'If you require any assistance, please contact the Authority for more information.<br/>';
        ProcNote := '<BR> Regards';
        FileDirectory := 'C:\DOCS\';
        FileName := 'Acceptance_Letter' + FinalAccount."Document No" + '.pdf';

        FinalAccount.Reset;
        FinalAccount.SetRange("Document No", FinalAccount."Document No");
        // if FinalAccount.FindSet then begin

        //     //Report.SaveAsPdf(72053, FileDirectory + FileName, FinalAccount);

        // end;
        // if CustEmail = '' then
        //     exit;

        // emailhdr := UpperCase(CompInfo.Name) + ' FINAL ACCOUNT';
        // //cu400.CreateMessage(CompInfo.Name, SenderAddress, CustEmail, emailhdr,
        // //CompanyDetails + '<BR></BR>' + SenderMessage + SupplierDetails + LoginDetails, true);
        // ////cu400.AddCC(RequesterEmail);
        // //cu400.AddBodyline(ProcNote);
        // //cu400.AddAttachment(FileDirectory + FileName, FileName);
        // //cu400.Send;
        SendingDate := Today;
        SendingTime := Time;
        Sleep(1000);
        Window.Close;
        Message('Notified Successfully');
    end;


    procedure FnNotifyStaffTermination(ProjectStaffVoucher: Record "Project Staff Voucher")
    var
        "Code": Code[10];
        ProcurementSetup: Record "Procurement Setup";
        IFPResponseLine: Record "IFP Response Line";
        Vendors: Record Vendor;
        InsCoverageLedgerEntry: Record "Ins. Coverage Ledger Entry";
        InsuranceReg: Record Insurance;
        Window: Dialog;
        EmailBody: array[2] of Text[30];
        BodyText: Text[250];
        mymail: Codeunit Mail;
        WindowisOpen: Boolean;
        FileDialog: Codeunit Mail;
        SendingDate: Date;
        SendingTime: Time;
        Counter: Integer;
        cu400: Codeunit Mail;
        SenderAddress: Text[100];
        UserSetup: Record "User Setup";
        HRSetup: Record "Human Resources Setup";
        CompInfo: Record "Company Information";
        RequesterName: Text[100];
        RequesterEmail: Text[100];
        emailhdr: Text[100];
        ProcNote: Text[1000];
        LoginDetails: Text[1000];
        CustEmail: Text[100];
        CompanyDetails: Text[250];
        SupplierDetails: Text[1000];
        SenderMessage: Text[1000];
        FileDirectory: Text[100];
        FileName: Text[100];
        RFIResponse2: Record "RFI Response";
        RFIResponse: Record "RFI Response";
        IFPResponseLine1: Record "IFP Response Line";
        PurchaseHeader: Record "Purchase Header";
        InternalProjectResource: Record "Internal Project Resource";
        ProjectVendors: Record "Project Vendors";
        ProjectStaffTerminationLine: Record "Project Staff Termination Line";
    begin
        ProjectStaffTerminationLine.Reset;
        ProjectStaffTerminationLine.SetRange(ProjectStaffTerminationLine."Document No.", ProjectStaffVoucher."Document No.");
        if ProjectStaffTerminationLine.FindSet then
            repeat
                ProjectStaffTerminationLine.TestField(Email);
                CustEmail := ProjectStaffTerminationLine.Email;



                CompInfo.Get;
                ProcurementSetup.Get;
                RequesterEmail := ProcurementSetup."Default Proc Email Contact";
                RequesterName := ProcurementSetup."Default Proc Email Contact";
                Window.Open('Sending........');
                WindowisOpen := true;
                //Create message
                if ProcurementSetup."Default Proc Email Contact" = '' then
                    Error('Please Contact the IT Admin to specify the E-mail address under Procurement Setup page!!');
                SenderAddress := ProcurementSetup."Default Proc Email Contact";


                CompanyDetails := 'Dear' + ' ' + ProjectVendors."Vendor Name" + ',<br>';
                SenderMessage := '<BR>This is to notify you that you have been terminated from ' + ProjectStaffVoucher."Project Name" + '<br/>.'
                + '<br/><br/>';
                SenderMessage := SenderMessage + ' ' + 'Please find attached the termination letter.' + '<br/><br/>';

                SupplierDetails := '';
                LoginDetails := 'If you require any assistance, please contact the Authority for more information.<br/>';
                ProcNote := '<BR> Regards';
                FileDirectory := 'C:\DOCS\';
                FileName := 'Termination_Letter' + ProjectStaffVoucher."Document No." + '.pdf';

                ProjectStaffVoucher.Reset;
                ProjectStaffVoucher.SetRange("Document No.", ProjectStaffVoucher."Document No.");
                // if ProjectStaffVoucher.FindSet then begin

                //     //Report.SaveAsPdf(72032, FileDirectory + FileName, ProjectStaffVoucher);

                // end;
                // if CustEmail = '' then
                //     exit;

                // emailhdr := UpperCase(CompInfo.Name) + ' PROJECT STAFF TERMINATION';
                // //cu400.CreateMessage(CompInfo.Name, SenderAddress, CustEmail, emailhdr,
                // //CompanyDetails + '<BR></BR>' + SenderMessage + SupplierDetails + LoginDetails, true);
                // ////cu400.AddCC(RequesterEmail);
                // //cu400.AddBodyline(ProcNote);
                // //cu400.AddAttachment(FileDirectory + FileName, FileName);
                // //cu400.Send;
                SendingDate := Today;
                SendingTime := Time;
                Sleep(1000);
                Window.Close;

            until ProjectStaffTerminationLine.Next = 0;
        Message('Notified Successfully');
    end;


    procedure FnNotifyContractCirculationTeam(PurchaseHea: Record "Purchase Header")
    var
        ContractCirTeam: Record "Purchase Contract Cir Team";
        RecordLink: Record "Record Link";
        SMTPMailSetup1: Record "Email Account";
        ProjectMeetingAttendance: Record "Project Meeting Attendance";
        ProjectMeetingRegister: Record "Project Meeting Register";
        MeetingRegister: Record "Project Meeting Register";
        InsCoverageLedgerEntry: Record "Ins. Coverage Ledger Entry";
        InsuranceReg: Record Insurance;
        Window: Dialog;
        EmailBody: array[2] of Text[30];
        BodyText: Text[250];
        mymail: Codeunit Mail;
        WindowisOpen: Boolean;
        FileDialog: Codeunit Mail;
        SendingDate: Date;
        SendingTime: Time;
        Counter: Integer;
        cu400: Codeunit Mail;
        SenderAddress: Text[100];
        UserSetup: Record "User Setup";
        HRSetup: Record "Human Resources Setup";
        CompInfo: Record "Company Information";
        RequesterName: Text[100];
        RequesterEmail: Text[100];
        emailhdr: Text[100];
        ProcNote: Text[1000];
        LoginDetails: Text[1000];
        CustEmail: Text[100];
        CompanyDetails: Text[250];
        SupplierDetails: Text[1000];
        SenderMessage: Text[1000];
        FileDirectory: Text[100];
        FileName: Text[100];
        PurchaseHead: Record "Purchase Header";
        SerialNumber: Integer;
        SerialNamba: Integer;
        Body:Text;
        Email: Codeunit Email;
        Mail: Codeunit "Email Message";
    begin
        ContractCirTeam.Reset;
        ContractCirTeam.SetRange(No, PurchaseHea."No.");
        if ContractCirTeam.FindSet then begin
            repeat
                SMTPMailSetup1.Get;
                CompInfo.Get;
                HRSetup.Get;
                SerialNumber := 1;
                RequesterName := ContractCirTeam.Email;

                SenderAddress := CompInfo."E-Mail";
                CustEmail := ContractCirTeam.Email;
                CompanyDetails := 'Dear ' + ContractCirTeam."Representative Name" + ',';
                SenderMessage := '<BR>Find attached Contract for ' + PurchaseHea."Buy-from Vendor Name" + ' : ' + PurchaseHea."Contract Description" + ' for your review </BR> ';
                SupplierDetails := '<table> To access the Links use the following access codes below<BR/> Username: <b>Spadmin</b><BR/> Password: <b>Pass1234</b><BR/>';

              
                PurchaseHead.Reset;
                PurchaseHead.SetRange("No.", PurchaseHea."No.");
                if PurchaseHead.Findfirst() then
                    FileDirectory := 'C:\DOCS\';
                FileName := 'Contract.pdf';
                ////Report.SaveAsPdf(70052, FileDirectory + FileName, PurchaseHead);
                if CustEmail = '' then
                    exit;
                Body :='';
                emailhdr :='';
                emailhdr := 'Contract No: ' + PurchaseHea."No." + ')';
                Body := CompanyDetails + '<BR></BR>' + SenderMessage + SupplierDetails + LoginDetails + ProcNote;
                Mail.Create(RequesterName, emailhdr, Body, true);
                //if 
                Email.Send(Mail); //then;
                     //MESSAGE('Notified Successfully');
                SendingDate := Today;
                SendingTime := Time;
            until ContractCirTeam.Next = 0;
        end;
    end;

    procedure FnNotifyRESiteInstruction(SiteInstructionsHeader: Record "Site Instructions Header")
    var
        ContractCirTeam: Record "Purchase Contract Cir Team";
        RecordLink: Record "Record Link";
        SMTPMailSetup1: Record "Email Account";
        ProjectMeetingAttendance: Record "Project Meeting Attendance";
        ProjectMeetingRegister: Record "Project Meeting Register";
        MeetingRegister: Record "Project Meeting Register";
        InsCoverageLedgerEntry: Record "Ins. Coverage Ledger Entry";
        InsuranceReg: Record Insurance;
        Window: Dialog;
        EmailBody: array[2] of Text[30];
        BodyText: Text[250];
        mymail: Codeunit Mail;
        WindowisOpen: Boolean;
        FileDialog: Codeunit Mail;
        SendingDate: Date;
        SendingTime: Time;
        Counter: Integer;
        cu400: Codeunit Mail;
        SenderAddress: Text[100];
        UserSetup: Record "User Setup";
        HRSetup: Record "Human Resources Setup";
        CompInfo: Record "Company Information";
        RequesterName: Text[100];
        RequesterEmail: Text[100];
        emailhdr: Text[100];
        ProcNote: Text[1000];
        LoginDetails: Text[1000];
        CustEmail: Text[100];
        CompanyDetails: Text[250];
        SupplierDetails: Text[1000];
        SenderMessage: Text[1000];
        FileDirectory: Text[100];
        FileName: Text[100];
        PurchaseHead: Record "Purchase Header";
        SerialNumber: Integer;
        SerialNamba: Integer;
        Vendor: Record Vendor;
    begin
        SMTPMailSetup1.Get;
        CompInfo.Get;
        HRSetup.Get;
        SerialNumber := 1;
        RequesterName := ContractCirTeam.Email;
        SenderAddress := CompInfo."E-Mail";
        Vendor.Reset;
        Vendor.SetRange(Vendor."No.", SiteInstructionsHeader."Contractor No.");
        if Vendor.FindSet then begin
            Vendor.TestField("E-Mail");
            CustEmail := Vendor."E-Mail";
        end;
        CompanyDetails := 'Dear ' + SiteInstructionsHeader."Site Agent Name" + ',';
        SenderMessage := '<BR>Please find attached the site instructions ' + SiteInstructionsHeader."Works Instructions(Descriptio)" + ' for your review </BR> ';
        //SupplierDetails:='<table> To access the Links use the following access codes below<BR/> Username: <b>Spadmin</b><BR/> Password: <b>Pass1234</b><BR/>';

        //    RecordLink.RESET;
        //    RecordLink.SETRANGE("Record ID",PurchaseHea.RECORDID);
        //    IF RecordLink.FIND('-') THEN BEGIN
        //      REPEAT
        //      LoginDetails:='<tr><td><a href="'+RecordLink.URL1+'">'+RecordLink.Description+'</a></td></tr>';
        //   UNTIL RecordLink.NEXT=0;
        //      END;
        //       ProcNote:='</table>';
        SiteInstructionsHeader.Reset;
        SiteInstructionsHeader.SetRange("Document No.", SiteInstructionsHeader."Document No.");
        if SiteInstructionsHeader.FindSet then
            FileDirectory := 'C:\DOCS\';
        FileName := 'SiteInstructionsHeader.pdf';
        // //Report.SaveAsPdf(70052, FileDirectory + FileName, SiteInstructionsHeader);
        // if CustEmail = '' then
        //     exit;
        // //MESSAGE:='This is to notify you that there has been a request for Registration ' +  SupplierRequest."No." + ' From Supplier'+ SupplierRequest.Name;
        // emailhdr := 'Contract No: ' + SiteInstructionsHeader."Document No." + ')';
        // //cu400.CreateMessage(CompInfo.Name, SenderAddress, CustEmail, emailhdr,
        // //CompanyDetails + '<BR></BR>' + SenderMessage + SupplierDetails, true);
        // ////cu400.AddCC(RequesterEmail);
        // RecordLink.Reset;
        // RecordLink.SetRange("Record ID", SiteInstructionsHeader.RecordId);
        // if RecordLink.Find('-') then begin
        //     repeat

        //         LoginDetails := '<tr><td>' + Format(SerialNumber) + '</td><td>' + RecordLink.Description + '</td><td><a href="' + RecordLink.URL1 + '">' + RecordLink.URL1 + '</a></td></tr>';
        //         SerialNumber := SerialNumber + 1;
        //         //cu400.AddBodyline(LoginDetails);
        //     until RecordLink.Next = 0;
        // end;
        // ProcNote := '</table>';
        // //    //cu400.AddBodyline(LoginDetails);
        // //cu400.AddBodyline(ProcNote);
        // //cu400.AddAttachment(FileDirectory + FileName, FileName);
        // //cu400.Send;
        SendingDate := Today;
        SendingTime := Time;

    end;

    procedure FnNotifyContractorProjectTransition(ProjectTransitionHeader: Record "Project Transition Header")
    var
        ContractCirTeam: Record "Purchase Contract Cir Team";
        RecordLink: Record "Record Link";
        SMTPMailSetup1: Record "Email Account";
        ProjectMeetingAttendance: Record "Project Meeting Attendance";
        ProjectMeetingRegister: Record "Project Meeting Register";
        MeetingRegister: Record "Project Meeting Register";
        InsCoverageLedgerEntry: Record "Ins. Coverage Ledger Entry";
        InsuranceReg: Record Insurance;
        Window: Dialog;
        EmailBody: array[2] of Text[30];
        BodyText: Text[250];
        mymail: Codeunit Mail;
        WindowisOpen: Boolean;
        FileDialog: Codeunit Mail;
        SendingDate: Date;
        SendingTime: Time;
        Counter: Integer;
        cu400: Codeunit Mail;
        SenderAddress: Text[100];
        UserSetup: Record "User Setup";
        HRSetup: Record "Human Resources Setup";
        CompInfo: Record "Company Information";
        RequesterName: Text[100];
        RequesterEmail: Text[100];
        emailhdr: Text[100];
        ProcNote: Text[1000];
        LoginDetails: Text[1000];
        CustEmail: Text[100];
        CompanyDetails: Text[250];
        SupplierDetails: Text[1000];
        SenderMessage: Text[1000];
        FileDirectory: Text[100];
        FileName: Text[100];
        PurchaseHead: Record "Purchase Header";
        SerialNumber: Integer;
        SerialNamba: Integer;
        Vendor: Record Vendor;
    begin
        SMTPMailSetup1.Get;
        CompInfo.Get;
        HRSetup.Get;
        SerialNumber := 1;
        RequesterName := ContractCirTeam.Email;
        SenderAddress := CompInfo."E-Mail";
        Vendor.Reset;
        Vendor.SetRange(Vendor."No.", ProjectTransitionHeader."Contractor No.");
        if Vendor.FindSet then begin
            Vendor.TestField("E-Mail");
            CustEmail := Vendor."E-Mail";
        end;
        CompanyDetails := 'Dear ' + ProjectTransitionHeader."Contractor Name" + ',';
        SenderMessage := '<BR>You are hereby instructed to submit the the PBRM Performance guarantee for ' + ProjectTransitionHeader."Project Name" + '</BR> ';
        SenderMessage := SenderMessage + ' ' + 'Please login to the Contractors Hub and action' + '</br>';
        //     SiteInstructionsHeader.RESET;
        //     SiteInstructionsHeader.SETRANGE("Document No.",SiteInstructionsHeader."Document No.");
        //     IF SiteInstructionsHeader.FINDSET THEN
        //     FileDirectory := 'C:\DOCS\';
        //     FileName := 'SiteInstructionsHeader.pdf';
        //     //Report.SaveAsPdf(70052,FileDirectory+FileName,SiteInstructionsHeader);
        if CustEmail = '' then
            exit;
        //MESSAGE:='This is to notify you that there has been a request for Registration ' +  SupplierRequest."No." + ' From Supplier'+ SupplierRequest.Name;
        emailhdr := 'Contract No: ' + ProjectTransitionHeader."Contractor No." + ')';
        ////cu400.CreateMessage(CompInfo.Name, SenderAddress, CustEmail, emailhdr,
        //CompanyDetails + '<BR></BR>' + SenderMessage + SupplierDetails, true);
        ////cu400.AddCC(RequesterEmail);
        //     RecordLink.RESET;
        //    RecordLink.SETRANGE("Record ID",SiteInstructionsHeader.RECORDID);
        //    IF RecordLink.FIND('-') THEN BEGIN
        //      REPEAT
        //
        //      LoginDetails:='<tr><td>'+FORMAT(SerialNumber)+'</td><td>'+RecordLink.Description+'</td><td><a href="'+RecordLink.URL1+'">'+RecordLink.URL1+'</a></td></tr>';
        //        SerialNumber:=SerialNumber+1;
        //        //cu400.AddBodyline(LoginDetails);
        //   UNTIL RecordLink.NEXT=0;
        //      END;
        //       ProcNote:='</table>';
        //    //cu400.AddBodyline(LoginDetails);
        // //cu400.AddBodyline(ProcNote);
        // ////cu400.AddAttachment(FileDirectory+FileName,FileName);
        // //cu400.Send;
        SendingDate := Today;
        SendingTime := Time;

    end;


    procedure FnUnsealBid(BidOpeningRegister: Record "Bid Opening Register"; BidOpeningRegisterLine1: Record "Bid Opening Register Line")
    var
        IFSDetails: Record "Standard Vendor Purchase Code";
        BidOpeningLines: Record "Bid Opening Register Line";
        Bids: Record "Purchase Header";
        BidsSecurity: Record "Bid_Contract Security Register";
    begin

        BidOpeningRegister.TestField("Opening Person 1");
        BidOpeningRegister.TestField("Opening Person 2");
        BidOpeningRegister.TestField("Opening Person 3");
        //BidOpeningRegister.TESTFIELD("Opening Person 4");
        Bids.Reset;
        Bids.SetRange("Invitation For Supply No", BidOpeningRegister."IFS Code");
        Bids.SetRange("Document Type", Bids."document type"::Quote);
        // IF (Bids.COUNT<3) AND (BidOpeningRegister.Type=BidOpeningRegister.Type::Technical) THEN BEGIN
        //  ERROR('The must be atleast 3 Submitted Bids to Open');
        //  END;
        RankingNo := 0;
        //Bids.SETRANGE("Responsive Bid (Evaluation)",TRUE);
        if Bids.FindSet then begin
            repeat
                BidOpeningLines.Reset;
                BidOpeningLines.SetRange("Bid No.", Bids."No.");
                BidOpeningLines.SetRange("IFS Code", BidOpeningRegister."IFS Code");
                BidOpeningLines.SetRange(Code, BidOpeningRegister.Code);
                if not BidOpeningLines.FindSet then begin
                    BidOpeningLines.Init;
                    BidOpeningLines.Code := BidOpeningRegister.Code;
                    BidOpeningLines."Vendor No." := Bids."Buy-from Vendor No.";
                    BidOpeningLines."IFS Code" := BidOpeningRegister."IFS Code";
                    BidOpeningLines."Bidder Name" := Bids."Buy-from Vendor Name";
                    BidOpeningLines."Bid No." := Bids."No.";
                    BidOpeningLines."External Bid Reference No" := BidOpeningRegister."IFS Code";
                    BidsSecurity.Reset;
                    BidsSecurity.SetRange("No.", Bids."No.");
                    if BidsSecurity.FindSet then begin
                        if BidsSecurity."Security Amount (LCY)" > 0 then
                            BidOpeningLines."Valid Bid Security Provided" := true;
                        BidOpeningLines."Bid Security Issuer" := BidsSecurity."Issuer/Guarantor Name";
                        BidOpeningLines."Bid Security Amount (LCY)" := BidsSecurity."Security Amount (LCY)";
                        //MESSAGE('%1 %2',BidsSecurity."Security Amount (LCY)",BidsSecurity."Issuer/Guarantor Name");
                        if BidOpeningLines."Bid Security Amount (LCY)" >= BidsSecurity."Security Amount (LCY)" then
                            BidOpeningLines."Bid Security Amount Pass" := true
                        else
                            BidOpeningLines."Bid Security Amount Pass" := false;
                    end;
                    Bids.SetCurrentkey("Amount Including VAT");
                    Bids.SetAscending("Amount Including VAT", true);
                    BidOpeningLines."Total Tender Price (LCY)" := Bids2."Amount Including VAT";
                    //if same value maintain the ranking no.
                    BidOpeningRegisterLine1.Reset;
                    BidOpeningRegisterLine1.SetRange(Code, BidOpeningLines.Code);
                    if BidOpeningRegisterLine1.FindLast then begin
                        //MESSAGE('%1',BidOpeningRegisterLine1."Bid No.");
                        if BidOpeningRegisterLine1."Total Tender Price (LCY)" = BidOpeningLines."Total Tender Price (LCY)" then
                            BidOpeningLines.Rank := BidOpeningRegisterLine1.Rank
                        else
                            BidOpeningLines.Rank := RankingNo + 1;
                    end else
                        BidOpeningLines.Rank := RankingNo + 1;
                    //END;
                    Bids.CalcFields(Bids."Amount Including VAT");
                    BidOpeningLines."Total Tender Price (LCY)" := Bids."Amount Including VAT";
                    //BidOpeningLines."Complete Bid Doc Submitted":=
                    //BidOpeningLines."Late Bid":=
                    // BidOpeningLines."Late Bid Submission Time":=
                    BidOpeningLines."Bid Withdrawal Notice No." := Bids."Withdrawal Notice No";
                    //BidOpeningLines."Bid Modification Notice No.":=Bids.bid
                    BidOpeningLines."Bid Withdrawal Notice No." := Bids."Withdrawal Notice No";
                    if BidOpeningLines."Bid Modification Notice No." <> '' then
                        BidOpeningLines."Bid Modification Exists" := true
                    else
                        BidOpeningLines."Bid Modification Exists" := false;
                    if BidOpeningLines."Bid Withdrawal Notice No." <> '' then
                        BidOpeningLines."Bid Withdrawal Exists" := true
                    else
                        BidOpeningLines."Bid Withdrawal Exists" := false;
                    //BidOpeningLines."Final Bid Opening Result":=
                    //BidOpeningLines."Tender Opening Com Remarks":=
                    BidOpeningLines.Insert(true);
                    RankingNo := RankingNo + 1;
                end;
            until Bids.Next = 0;

            Message('Unsealed Successfully');
        end;
        /*BidOpeningRegister.Posted:=TRUE;
        BidOpeningRegister."Posted By":=USERID;
        BidOpeningRegister."Posted Date":=TODAY;*/

    end;


    procedure FnPostFinanceEvaluation(EvaluationHeader: Record "Bid Evaluation Register")
    var
        Bidevaluationscore: Record "Bid Evaluation Score Entry";
        BidSCoreGuide: Record "Bid Score Requirement";
        LineNo: Integer;
        IFSDetails: Record "Standard Vendor Purchase Code";
        ProcuremnetSetup: Record "Procurement Setup";
        IFS: Record "Standard Purchase Code";
        Bids: Record "Purchase Header";
        FinanceLine: Record "Finance Evaluation Line";
        FinanceLine1: Record "Finance Evaluation Line";
        FinalEvalReport: Record "Bid Tabulation Header";
        FinalEvalLine: Record "Bid Tabulation Line";
        BidEvaluationRegister: Record "Bid Evaluation Register";
        VendorPurchaseCode: Record "Standard Vendor Purchase Code";
        Text001: text;
    begin
        Text001 := 'Are you Sure you want to Post?';
        if not ConfirmManagement.GetResponseOrDefault(Text001, true) then
            exit;
        EvaluationHeader.TestField("IFS Code");
        EvaluationHeader.TestField("Tender Evaluation Comm Remarks");
        EvaluationHeader.TestField("Evaluation Date");
        EvaluationHeader.TestField("Evaluation Lead");
        //EvaluationHeader.TESTFIELD("Weighted Financial Eval Score");
        //EvaluationHeader.TESTFIELD("Award Decision");


        EvaluationHeader.Posted := true;
        EvaluationHeader."Posted By" := UserId;
        EvaluationHeader."Posted Date" := Today;

        FinanceLine.Reset;
        FinanceLine.SetRange("Document ID", EvaluationHeader.Code);
        if FinanceLine.FindSet then begin
            repeat
                Bids.Reset;
                Bids.SetRange("No.", FinanceLine."No.");
                Bids.SetRange("IFS Code", EvaluationHeader."IFS Code");
                if Bids.Findfirst() then begin
                    Bids."Final Evaluated Bid Price" := FinanceLine."Final Evaluated Bid Price";
                    Bids."Financial Evaluation Date" := EvaluationHeader."Evaluation Date";
                    Bids."Financial Evaluation Ranking" := FinanceLine."Financial Evaluation Ranking";
                    Bids."Aggregate Ranking" := FinanceLine."Aggregate Ranking";
                    Bids."Aggregate Weighted Score %" := FinanceLine."Aggregate Weighted Score %";
                    Bids."Weighted Financial Score %" := FinanceLine."Weighted Financial Score %";
                    Bids."Weighted Tech Score %" := FinanceLine."Weighted Tech Score %";
                    Bids."Read-out Bid Price (A)" := FinanceLine."Read-out Bid Price (A)";
                    Bids."Arithmetic Corrections (B)" := FinanceLine."Arithmetic Corrections (B)";
                    Bids."Corrected Bid Price (C=A+B)" := FinanceLine."Corrected Bid Price";
                    //Bids."Unconditional Discount % (D)":=
                    //Bids."Unconditional Disc Amount (E)":=
                    Bids."Corrected & Disc Bid Price" := FinanceLine."Corrected Bid Price";
                    ////Bids."Any Additional Adjustments (G)":=
                    //Bids."Any Priced Deviations (H))":=
                    //IF EvaluationHeader."Technical Evaluation  Decision"=EvaluationHeader."Technical Evaluation  Decision"::Pass THEN
                    Bids."Final Tender Outcome" := FinanceLine."Final Tender Outcome";
                    Bids."Document Status" := Bids."document status"::Evaluation;
                    //Bids."Weighted Tech Score %":=EvaluationHeader."Weighted Technical Eval Score";
                    Bids.Modify;
                    end;

                    IFSDetails.Reset;
                    IFSDetails.SetRange(Code, EvaluationHeader."IFS Code");
                    IFSDetails.SetRange("Vendor No.", Bids."Buy-from Vendor No.");
                    if IFSDetails.Findfirst() then begin
                        IFSDetails."Bid Opening Finance Register" := EvaluationHeader."Finance Opening Register No.";
                        IFSDetails."Bid Opening Date (Financial)" := EvaluationHeader."Finance Opening Date";
                        IFSDetails."Financial Eval Register No" := EvaluationHeader."Bid Scoring Document No.";
                        IFSDetails."Financial Evaluation Date" := EvaluationHeader."Evaluation Date";
                        IFSDetails."Read-out Bid Price (A)" := FinanceLine."Read-out Bid Price (A)";
                        IFSDetails."Arithmetic Corrections (B)" := FinanceLine."Arithmetic Corrections (B)";
                        IFSDetails."Corrected Bid Price (C=A+B)" := FinanceLine."Corrected Bid Price";
                        IFSDetails."Unconditional Discount % (D)" := FinanceLine."Unconditional Discount % (D)";
                        IFSDetails."Unconditional Disc Amount (E)" := FinanceLine."Unconditional Disc Amount (E)";
                        IFSDetails."Corrected & Disc Bid Price" := FinanceLine."Corrected & Disc Bid Price";
                        IFSDetails."Any Additional Adjustments (G)" := FinanceLine."Any Additional Adjustments (G)";
                        IFSDetails."Any Priced Deviations (H))" := FinanceLine."Any Priced Deviations (H))";
                        IFSDetails."Final Evaluated Bid Price" := FinanceLine."Final Evaluated Bid Price";
                        IFSDetails."Weighted Financial Score %" := FinanceLine."Weighted Financial Score %";
                        IFSDetails."Weighted Technical  Score %" := FinanceLine."Weighted Tech Score %";
                        IFSDetails."Evaluation Committee Rem" := FinanceLine."Evaluation Committee Remarks";
                        IFSDetails."Evaluation Committee Recomm" := FinanceLine."Evaluation Committee Recomm";
                        IFSDetails."Financial Evaluation Comm Rem" := FinanceLine."Evaluation Committee Remarks";
                        IFSDetails."Aggregate Weighted Score %" := FinanceLine."Aggregate Weighted Score %";
                        IFSDetails."Financial Evaluation Ranking" := Format(FinanceLine."Finacial Auto-Ranking");
                        IFSDetails.Modify(true);
                    end else begin
                        IFSDetails.Init;
                        IFSDetails.Validate("Vendor No.",FinanceLine."Bidder No");
                        IFSDetails.Code := EvaluationHeader."IFS Code";
                        IFS.Reset;
                        IFS.SetRange(Code, EvaluationHeader."IFS Code");
                        if IFS.FindFirst() then begin
                            IFSDetails.Description := IFS."Tender Name";
                            IFSDetails."IFS Code" := IFS.Code;
                        end;
                        IFSDetails."Bid No." := FinanceLine."No.";
                        IFSDetails."Vendor Name" := FinanceLine."Bidder Name";
                        //eIFSDetails."Primary Email":=Bids.
                        //IFSDetails."Invitation Email Sent":=
                        IFSDetails."Bid Opening Finance Register" := EvaluationHeader."Finance Opening Register No.";
                        IFSDetails."Bid Opening Date (Financial)" := EvaluationHeader."Finance Opening Date";
                        IFSDetails."Financial Eval Register No" := EvaluationHeader."Bid Scoring Document No.";
                        IFSDetails."Financial Evaluation Date" := EvaluationHeader."Evaluation Date";
                        IFSDetails."Read-out Bid Price (A)" := FinanceLine."Read-out Bid Price (A)";
                        IFSDetails."Arithmetic Corrections (B)" := FinanceLine."Arithmetic Corrections (B)";
                        IFSDetails."Corrected Bid Price (C=A+B)" := FinanceLine."Corrected Bid Price";
                        IFSDetails."Unconditional Discount % (D)" := FinanceLine."Unconditional Discount % (D)";
                        IFSDetails."Unconditional Disc Amount (E)" := FinanceLine."Unconditional Disc Amount (E)";
                        IFSDetails."Corrected & Disc Bid Price" := FinanceLine."Corrected & Disc Bid Price";
                        IFSDetails."Any Additional Adjustments (G)" := FinanceLine."Any Additional Adjustments (G)";
                        IFSDetails."Any Priced Deviations (H))" := FinanceLine."Any Priced Deviations (H))";
                        IFSDetails."Final Evaluated Bid Price" := FinanceLine."Final Evaluated Bid Price";
                        IFSDetails."Weighted Financial Score %" := FinanceLine."Weighted Financial Score %";
                        IFSDetails."Weighted Technical  Score %" := FinanceLine."Weighted Tech Score %";
                        IFSDetails."Evaluation Committee Rem" := FinanceLine."Evaluation Committee Remarks";
                        IFSDetails."Evaluation Committee Recomm" := FinanceLine."Evaluation Committee Recomm";
                        IFSDetails."Financial Evaluation Comm Rem" := FinanceLine."Evaluation Committee Remarks";
                        IFSDetails."Aggregate Weighted Score %" := FinanceLine."Aggregate Weighted Score %";
                        IFSDetails."Financial Evaluation Ranking" := Format(FinanceLine."Finacial Auto-Ranking");
                        IFSDetails.Insert(true);
                    end;
            until FinanceLine.Next = 0;
        /*ProcuremnetSetup.GET;
        IF ProcuremnetSetup."Notify Committe Members"=TRUE THEN
        FnSendBidEvaluationNotification(EvaluationHeader);*/
        IFS.Reset;
        IFS.SetRange(Code, EvaluationHeader."IFS Code");
        if IFS.FindFirst() then begin
            IFS."Document Status" := IFS."document status"::Evaluation;
            IFS."IFS Evaluation End Date" := Today;
            IFS.Modify(true);
        end;

        //Generate Final Evaluation Report
        FinalEvalReport.Reset;
        FinalEvalReport.SetRange("Document Type", FinalEvalReport."document type"::"Evaluation Report");
        FinalEvalReport.SetRange("IFS Code", EvaluationHeader."IFS Code");
            if not FinalEvalReport.FindFirst() then begin
            FinalEvalReport.Init;
            FinalEvalReport."Document Type" := FinalEvalReport."document type"::"Evaluation Report";
            FinalEvalReport."IFS Code" := EvaluationHeader."IFS Code";
            FinalEvalReport."Document Date" := EvaluationHeader."Evaluation Date";
            FinalEvalReport."Financial Evaluation ID" := EvaluationHeader.Code;
            FinalEvalReport.Description := 'Final Tender evaluation Report' + EvaluationHeader."IFS Code";
            IFS.Reset;
            IFS.SetRange(Code, EvaluationHeader."IFS Code");
            if IFS.FindFirst() then begin
                FinalEvalReport."Tender Name" := IFS."Tender Name";
                FinalEvalReport."Program Title" := IFS."Program Title";
                    if FinalEvalReport."Program Title" = '' then
                        FinalEvalReport."Program Title" := IFS."Tender Name";
                FinalEvalReport."Location of Project" := IFS."Location of Project";
                FinalEvalReport."Extent of Contract" := IFS."Extent of Contract";
                FinalEvalReport."Last Evaluation Version No." := IFS."Last Evaluation Version No.";
            end;
            FinalEvalReport."Raised By" := EvaluationHeader."Evaluation Lead";
            FinalEvalReport.Name := EvaluationHeader."Evaluation Lead Name";
            FinalEvalReport."Tender Committee Role" := FinalEvalReport."tender committee role"::Chairperson;
            FinalEvalReport."Bid Opening Date" := EvaluationHeader."Bid Opening Date";
            FinalEvalReport."Evaluation Completion Date" := EvaluationHeader."Evaluation Date";
            FinalEvalReport."Appointed Bid Opening Comm" := IFS."Bid Opening Committe";
            FinalEvalReport."Appointed Bid Evaluation Com" := EvaluationHeader."Appointed Bid Evaluation Commi";
            FinalEvalReport."Primary Region" := EvaluationHeader."Primary Region";
            FinalEvalReport."Bid Opening Register(Tech)" := EvaluationHeader."Bid Opening Register No.";
            FinalEvalReport."Process Type" := FinalEvalReport."process type"::IFS;
            FinalEvalReport."Bid Evaluation Criteria" := EvaluationHeader."Bid Scoring Document No.";
            FinalEvalReport."Bid Opening Register(Finance)" := EvaluationHeader."Finance Opening Register No.";
            if FinalEvalReport.Insert(true) then begin
                FinalEvalReport.Validate(FinalEvalReport."Appointed Bid Opening Comm");
                FinalEvalReport.Validate(FinalEvalReport."Appointed Bid Evaluation Com");
                //----------------------------------------------------------------------------------------------------------
                FinanceLine1.Reset;
                // VendorPurchaseCode.SetFilter("Bid No.", '<>%1', '');
                // VendorPurchaseCode.SetRange(Responded, true);
                FinanceLine1.SetRange("Document ID", EvaluationHeader.Code);
                if FinanceLine1.FindSet() then begin
                    repeat
                        VendorPurchaseCode.Reset();
                        VendorPurchaseCode.SetFilter("Bid No.", '<>%1', '');
                        VendorPurchaseCode.SetRange(Responded, true);
                        VendorPurchaseCode.SetRange("Vendor No.", FinanceLine1."Bidder No");
                        VendorPurchaseCode.SetRange(Code, EvaluationHeader."IFS Code");
                        VendorPurchaseCode.FindFirst();
                        FinalEvalLine.Init;
                        FinalEvalLine."Tabulation ID" := FinalEvalReport.Code;
                        FinalEvalLine."Tabulation Type" := FinalEvalLine."tabulation type"::"Evaluation Report";
                        FinalEvalLine."Document Type" := FinalEvalLine."document type"::Quote;
                        FinalEvalLine."No." := FinanceLine1."No.";
                        FinalEvalLine."Bidder Name" := FinanceLine1."Bidder Name";
                        FinalEvalLine."Bidder No" := FinanceLine1."Bidder No";
                        FinalEvalLine."Invitation For Supply No" := FinanceLine1."Invitation For Supply No";
                        FinalEvalLine."Bid Currency Code" := Bids."Currency Code";
                        //FinalEvalLine.ReFinanceLine."Read-out Bid Price (A)" := FinanceLine1."Read-out Bid Price (A)";
                        FinalEvalLine."Preliminary Evaluation Date" := FinanceLine1."Preliminary Evaluation Date";
                        FinalEvalLine."Responsive Bid" := FinanceLine1."Responsive Bid";
                        FinalEvalLine."Technical Evaluation Date" := FinanceLine1."Technical Evaluation Date";
                        FinalEvalLine."Weighted Tech Score %" := FinanceLine1."Weighted Tech Score %";
                        FinalEvalLine."Passed Tech Evaluation" := FinanceLine1."Passed Tech Evaluation";
                        FinalEvalLine."Tech Evaluation Ranking" := Format(FinanceLine1."Tech Evaluation Ranking");
                        //FinalEvalLine.fin
                        // FinalEvalLine."Bid Opening Date":=VendorPurchaseCode."Bid Opening Date (Technical)";
                        // FinalEvalLine.finaIFSDetails."Financial Eval Register No":=VendorPurchaseCode."Financial Eval Register No";
                        FinalEvalLine."Assigned Bid No" := VendorPurchaseCode."Assigned Bid No";
                        FinalEvalLine."Financial Evaluation Date" := FinanceLine1."Financial Evaluation Date";
                        FinalEvalLine."Read-out Bid Price (A)" := FinanceLine1."Read-out Bid Price (A)";
                        FinalEvalLine."Arithmetic Corrections (B)" := FinanceLine1."Arithmetic Corrections (B)";
                        FinalEvalLine."Corrected Bid Price (C=A+B)" := FinanceLine1."Corrected Bid Price";
                        FinalEvalLine."Unconditional Discount % (D)" := FinanceLine1."Unconditional Discount % (D)";
                        FinalEvalLine."Unconditional Disc Amount (E)" := FinanceLine1."Unconditional Disc Amount (E)";
                        FinalEvalLine."Corrected & Disc Bid Price" := FinanceLine1."Corrected & Disc Bid Price";
                        FinalEvalLine."Any Additional Adjustments (G)" := FinanceLine1."Any Additional Adjustments (G)";
                        FinalEvalLine."Any Priced Deviations (H))" := FinanceLine1."Any Priced Deviations (H))";
                        FinalEvalLine."Final Evaluated Bid Price" := FinanceLine1."Final Evaluated Bid Price";
                        FinalEvalLine."Weighted Financial Score %" := FinanceLine1."Weighted Financial Score %";
                        FinalEvalLine."Weighted Tech Score %" := FinanceLine1."Weighted Financial Score %";
                        if VendorPurchaseCode."Evaluation Committee Recomm" <> VendorPurchaseCode."evaluation committee recomm"::Award then begin
                            FinalEvalLine."Evaluation Committee Recomm" := FinalEvalLine."evaluation committee recomm"::Unsuccesful;
                        end else begin
                            FinalEvalLine."Evaluation Committee Recomm" := VendorPurchaseCode."Evaluation Committee Recomm";
                        end;
                        FinalEvalLine."Financial Evaluation Comm Rem" := VendorPurchaseCode."Financial Evaluation Comm Rem";
                        FinalEvalLine."Aggregate Weighted Score %" := FinanceLine1."Aggregate Weighted Score %";
                        FinalEvalLine."Pre-bid Register No." := VendorPurchaseCode."Prebid Register No.";
                        FinalEvalLine."Prebid Conference Date" := VendorPurchaseCode."Prebid Meeting Date";
                        FinalEvalLine."Bid Opening Date" := VendorPurchaseCode."Bid Opening Date (Technical)";
                        FinalEvalLine."Bid Opening Committee Remarks" := VendorPurchaseCode."Bid Opening Committee Remarks";
                        FinalEvalLine."Bid Opening Date (Financial)" := VendorPurchaseCode."Bid Opening Date (Financial)";
                        FinalEvalLine."Bid Opening Finance Register" := VendorPurchaseCode."Bid Opening Finance Register";
                        FinalEvalLine."Bid Opening Register No." := VendorPurchaseCode."Bid Opening Register No.";
                        FinalEvalLine."Bid Opening Result" := VendorPurchaseCode."Bid Opening Result";
                        FinalEvalLine."Preliminary Evaluation Date" := VendorPurchaseCode."Preliminary Evaluation Date";
                        FinalEvalLine."Preliminary Evaluation Outcome" := VendorPurchaseCode."Preliminary Evaluation Outcome";
                        FinalEvalLine."Preliminary Evaluation Reg" := VendorPurchaseCode."Preliminary Evaluation Reg";
                        FinalEvalLine."Preminary Evaluation Committee" := VendorPurchaseCode."Preminary Evaluation Committee";
                        FinalEvalLine."Financial Evaluation Ranking" := FinanceLine1."Financial Evaluation Ranking";
                        FinalEvalLine."Technical Evaluation Date" := FinanceLine1."Technical Evaluation Date";
                        //      END;
                        FinalEvalLine.Insert(true);
                    until FinanceLine1.Next = 0;

                end;



            end;
             end;
            Message('Finance Evaluation Completed, Proceed to Evaluation Report');
            Page.Run(75275, FinalEvalReport)
        end;

    end;


    procedure FnCopyEvaluationCriteria(EvalCriteria: Record "Bid Scoring Template")
    var
        EvalRequirement: Record "Bid Score Requirement";
        ScoreGuide: Record "Bid Score Guide";
        i: Integer;
        entryno: Integer;
        EvalCriteria1: Record "Bid Scoring Template";
        EvalRequirement1: Record "Bid Score Requirement";
        EvalCriteriaGroup: Record "Bid Score Criteria Group";
        EvalCriteriaGroup1: Record "Bid Score Criteria Group";
    begin
        EvalCriteria1.Init;
        EvalCriteria1.Code := EvalCriteria1.Code;
        EvalCriteria1.Description := EvalCriteria.Description + ' Copy';
        EvalCriteria1."Template type" := EvalCriteria."Template type";
        EvalCriteria1."Use Weighted Scoring" := EvalCriteria."Use Weighted Scoring";
        EvalCriteria1."Default Procurement Type" := EvalCriteria."Default Procurement Type";
        EvalCriteria1."Effective Date" := Today;
        if EvalCriteria1.Insert(true) then begin
            EvalCriteriaGroup.Reset;
            EvalCriteriaGroup.SetRange("Template ID", EvalCriteria.Code);
            if EvalCriteriaGroup.FindSet then begin
                repeat
                    EvalCriteriaGroup1.Init;
                    EvalCriteriaGroup1."Template ID" := EvalCriteria1.Code;
                    EvalCriteriaGroup1."Evaluation Type" := EvalCriteriaGroup."Evaluation Type";
                    EvalCriteriaGroup1."Criteria Group ID" := EvalCriteriaGroup."Criteria Group ID";
                    EvalCriteriaGroup1.Description := EvalCriteriaGroup.Description;
                    EvalCriteriaGroup1."Total Weight %" := EvalCriteriaGroup."Total Weight %";
                    EvalCriteriaGroup1.Insert(true);
                until EvalCriteriaGroup.Next = 0;
                EvalRequirement.Reset;
                EvalRequirement.SetRange("Template ID", EvalCriteria.Code);
                if EvalRequirement.FindSet then begin
                    repeat
                        EvalRequirement1."Template ID" := EvalCriteria1.Code;
                        EvalRequirement1."Criteria Group ID" := EvalRequirement."Criteria Group ID";
                        EvalRequirement1."Requirement ID" := EvalRequirement1."Requirement ID" + 1;
                        EvalRequirement1."Evaluation Requirement" := EvalRequirement."Evaluation Requirement";
                        EvalRequirement1."Bidder Response" := EvalRequirement."Bidder Response";
                        EvalRequirement1."Rating Type" := EvalRequirement."Rating Type";
                        EvalRequirement1."Target Value" := EvalRequirement."Target Value";
                        EvalRequirement1."Assigned Weight %" := EvalRequirement."Assigned Weight %";
                        EvalRequirement1."Evaluation Type" := EvalRequirement."Evaluation Type";
                        EvalRequirement1."Equipment Type" := EvalRequirement."Equipment Type";
                        EvalRequirement1."Unit of Measure" := EvalRequirement."Unit of Measure";
                        EvalRequirement1."Requirement Type" := EvalRequirement."Requirement Type";
                        EvalRequirement1.Priority := EvalRequirement.Priority;
                        EvalRequirement1."Contract Ref Clause" := EvalRequirement."Contract Ref Clause";
                        EvalRequirement1."Target Qty" := EvalRequirement."Target Qty";
                        EvalRequirement1."Desired Perfomance Direction" := EvalRequirement."Desired Perfomance Direction";
                        EvalRequirement1."Target Value" := EvalRequirement."Target Value";
                        EvalRequirement1.Insert(true);
                    until EvalRequirement.Next = 0;

                end;


            end;
            SuggestBidScoreGuide(EvalCriteria1);
            Page.Run(75052, EvalCriteria1)
        end;
    end;


    procedure FnSendIFSClarification(var AddendumNotice: Record "Tender Addendum Notice")
    var
        AddendumNotice1: Record "Tender Addendum Notice";
        PurcHeader: Record "Purchase Header";
        SMTPMailSetup: Record "Email Account";
        AddendumAmendment: Record "Tender Addendum Amendment";
        ObjVend: Record Vendor;
        IFSList: Record "Standard Purchase Code";
        SupplierReq: Record Contact;
        LastFieldNo: Integer;
        FooterPrinted: Boolean;
        FileDirectory: Text[100];
        FileName: Text[100];
        ReportID: Integer;
        //   //"Object": Record "Object";
        Window: Dialog;
        RunOnceFile: Text[1000];
        TimeOut: Integer;
        Customer2: Record Customer;
        Cust: Record Customer;
        cr: Integer;
        lf: Integer;
        EmailBody: array[2] of Text[30];
        BodyText: Text[250];
        mymail: Codeunit Mail;
        DefaultPrinter: Text[200];
        WindowisOpen: Boolean;
        FileDialog: Codeunit Mail;
        SendingDate: Date;
        SendingTime: Time;
        Counter: Integer;
        cu400: Codeunit Mail;
        DocLog: Record "Document E-mail Log";
        BranchName: Code[80];
        DimValue: Record "Dimension Value";
        SenderAddress: Text[100];
        CustEmail: Text[100];
        UserSetup: Record "User Setup";
        HRSetup: Record "Company Information";
        Emp: Record Vendor;
        PayrollMonth: Date;
        PayrollMonthText: Text[30];
        PayPeriodtext: Text;
        PayPeriod: Record "Payroll PeriodX";
        CompInfo: Record "Company Information";
        DateFilter: Text;
        FromDate: Date;
        ToDate: Date;
        FromDateS: Text;
        ToDateS: Text;
        vend: Record Vendor;
        StartDate: Date;
        EndDAte: Date;
        EmailVerifier: Codeunit Payroll3;
        IsEmailValid: Boolean;
        PPayableSetup: Record "Procurement Setup";
        RequesterName: Text[100];
        RequesterEmail: Text[100];
        emailhdr: Text[100];
        CompanyDetails: Text[250];
        SupplierDetails: Text[1000];
        SenderMessage: Text[1000];
        ProcNote: Text[1000];
        LoginDetails: Text[1000];
        PortalUser: Record "Dynasoft Portal User";
        Password: Text[50];
        ActivationDetails: Text[1000];
        RFQReqVendors: Record "Standard Vendor Purchase Code";
        StandardPurchaseCode: Record "Standard Purchase Code";
        RFQReqVendors1: Record "Standard Vendor Purchase Code";
    begin
        ///Notifying Procurement Team on supplier Request

        SMTPMailSetup.Get;
        CompInfo.Get;
        HRSetup.Get;
        PPayableSetup.Get;
        PurcHeader.Reset;
        PurcHeader.SetRange("Invitation For Supply No", AddendumNotice."Invitation Notice No.");
        PurcHeader.SetRange("Document Type", PurcHeader."document type"::Quote);
        if PurcHeader.FindSet then begin
            repeat
                ObjVend.Reset;
                ObjVend.SetRange("No.", PurcHeader."Buy-from Vendor No.");
                if ObjVend.FindSet then
                    ObjVend.TestField("E-Mail");
                RequesterEmail := ObjVend."E-Mail";
                RequesterName := ObjVend.Name;

                Window.Open('Sending...');

                WindowisOpen := true;


                Counter := Counter + 1;

                //Create message
                if HRSetup."E-Mail" = '' then
                    Error('Please Contact the IT Admin to specify the E-mail address under Company Information Setup page!!');
                SenderAddress := SMTPMailSetup."Email Address";

                if PPayableSetup."Default Proc Email Contact" = '' then
                    Error('Please Contact the IT Admin to specify the Procurement Manager E-mail address under Purchases&Payable Setup page!!');
                CustEmail := PPayableSetup."Default Proc Email Contact";

                CompanyDetails := 'Dear: ' + RequesterName;
                SenderMessage := '<BR>You are hereby notified on the following clarifications made on tender no ' + AddendumNotice."Invitation Notice No." + ' </BR>';
                SupplierDetails := 'Find attached Clarification<br>';
                LoginDetails := '';


                ProcNote := '<BR> If you require any assistance, please contact our Supply Chain Management Team by Phone ' + HRSetup."Phone No." + ' or vendor support team via Email: ' + PPayableSetup."Default Proc Email Contact";
                FileDirectory := 'C:\DOCS\';
                FileName := 'Clarification.pdf';
                AddendumNotice1.Reset;
                AddendumNotice1.SetRange("Addendum Notice No.", AddendumNotice."Addendum Notice No.");
                if AddendumNotice1.FindSet then begin


                    //Report.SaveAsPdf(70117, FileDirectory + FileName, AddendumNotice1);
                end;
                if CustEmail = '' then
                    exit;
                //MESSAGE:='This is to notify you that there has been a request for Registration ' +  SupplierRequest."No." + ' From Supplier'+ SupplierRequest.Name;
                emailhdr := 'Tender Clarification';

                //cu400.CreateMessage(CompInfo.Name, SenderAddress, CustEmail, emailhdr,
                //CompanyDetails + '<BR></BR>' + SenderMessage + SupplierDetails + LoginDetails + ActivationDetails, true);

                //cu400.AddCC(RequesterEmail);
                //cu400.AddAttachment(FileDirectory + FileName, FileName);
                //cu400.AddBodyline(ProcNote);


                //cu400.Send;
                SendingDate := Today;
                SendingTime := Time;

                Sleep(1000);
                Window.Close;

            //END;
            until PurcHeader.Next = 0;
        end;
    end;


    procedure FnSendEvaluationNotification(var BidTabulationHeader: Record "Bid Tabulation Header")
    var
        BidEvaluationCommittee: Record "Bid Evaluation Committee";
        AddendumNotice1: Record "Tender Addendum Notice";
        PurcHeader: Record "Purchase Header";
        SMTPMailSetup: Record "Email Account";
        AddendumAmendment: Record "Tender Addendum Amendment";
        ObjVend: Record Vendor;
        IFSList: Record "Standard Purchase Code";
        SupplierReq: Record Contact;
        LastFieldNo: Integer;
        FooterPrinted: Boolean;
        FileDirectory: Text[100];
        FileName: Text[100];
        ReportID: Integer;
        // //"Object": Record "Object";
        Window: Dialog;
        RunOnceFile: Text[1000];
        TimeOut: Integer;
        Customer2: Record Customer;
        Cust: Record Customer;
        cr: Integer;
        lf: Integer;
        EmailBody: array[2] of Text[30];
        BodyText: Text[250];
        mymail: Codeunit Mail;
        DefaultPrinter: Text[200];
        WindowisOpen: Boolean;
        FileDialog: Codeunit Mail;
        SendingDate: Date;
        SendingTime: Time;
        Counter: Integer;
        cu400: Codeunit Mail;
        DocLog: Record "Document E-mail Log";
        BranchName: Code[80];
        DimValue: Record "Dimension Value";
        SenderAddress: Text[100];
        CustEmail: Text[100];
        UserSetup: Record "User Setup";
        HRSetup: Record "Company Information";
        Emp: Record Vendor;
        PayrollMonth: Date;
        PayrollMonthText: Text[30];
        PayPeriodtext: Text;
        PayPeriod: Record "Payroll PeriodX";
        CompInfo: Record "Company Information";
        DateFilter: Text;
        FromDate: Date;
        ToDate: Date;
        FromDateS: Text;
        ToDateS: Text;
        vend: Record Vendor;
        StartDate: Date;
        EndDAte: Date;
        EmailVerifier: Codeunit Payroll3;
        IsEmailValid: Boolean;
        PPayableSetup: Record "Procurement Setup";
        RequesterName: Text[100];
        RequesterEmail: Text[100];
        emailhdr: Text[100];
        CompanyDetails: Text[250];
        SupplierDetails: Text[1000];
        SenderMessage: Text[1000];
        ProcNote: Text[1000];
        LoginDetails: Text[1000];
        PortalUser: Record "Dynasoft Portal User";
        Password: Text[50];
        ActivationDetails: Text[1000];
        RFQReqVendors: Record "Standard Vendor Purchase Code";
        StandardPurchaseCode: Record "Standard Purchase Code";
        RFQReqVendors1: Record "Standard Vendor Purchase Code";
    begin
        ///Notifying Procurement Team on supplier Request

        SMTPMailSetup.Get;
        CompInfo.Get;
        HRSetup.Get;
        PPayableSetup.Get;

        BidEvaluationCommittee.Reset;
        BidEvaluationCommittee.SetRange("Document No.", BidTabulationHeader.Code);
        //BidEvaluationCommittee.SETRANGE("Document Type",PurcHeader."Document Type"::Quote);
        if BidEvaluationCommittee.FindSet then begin
            repeat

                RequesterEmail := BidEvaluationCommittee.Email;
                RequesterName := BidEvaluationCommittee."Member Name";

                Window.Open('Sending...');

                WindowisOpen := true;


                Counter := Counter + 1;

                //Create message
                if HRSetup."E-Mail" = '' then
                    Error('Please Contact the IT Admin to specify the E-mail address under Company Information Setup page!!');
                SenderAddress := SMTPMailSetup."Email Address";

                if PPayableSetup."Default Proc Email Contact" = '' then
                    Error('Please Contact the IT Admin to specify the Procurement Manager E-mail address under Purchases&Payable Setup page!!');
                CustEmail := PPayableSetup."Default Proc Email Contact";

                CompanyDetails := 'Dear: ' + RequesterName;
                SenderMessage := '<BR>This is to notify you that the Final Evaluation report  for ' + BidTabulationHeader."Tender Name" + 'has been submitted to the Head of Supply chain Department  </BR>';
                SupplierDetails := '';
                LoginDetails := '';


                ProcNote := '<BR> If you require any assistance, please contact our Supply Chain Management Team by Phone ' + HRSetup."Phone No." + ' or vendor support team via Email: ' + PPayableSetup."Default Proc Email Contact";
                // FileDirectory := 'C:\DOCS\';
                // FileName := 'Clarification.pdf';
                // AddendumNotice1.RESET;
                // AddendumNotice1.SETRANGE("Addendum Notice No.",AddendumNotice."Addendum Notice No.");
                // IF AddendumNotice1.FINDSET THEN BEGIN
                //
                //
                // //Report.SaveAsPdf(70117,FileDirectory+FileName,AddendumNotice1);
                // END;
                if CustEmail = '' then
                    exit;
                //MESSAGE:='This is to notify you that there has been a request for Registration ' +  SupplierRequest."No." + ' From Supplier'+ SupplierRequest.Name;
                emailhdr := 'Tender Evaluation Report Update';

                //cu400.CreateMessage(CompInfo.Name, SenderAddress, CustEmail, emailhdr,
                //CompanyDetails + '<BR></BR>' + SenderMessage + SupplierDetails + LoginDetails + ActivationDetails, true);

                //cu400.AddCC(RequesterEmail);
                //cu400.AddAttachment(FileDirectory + FileName, FileName);
                //cu400.AddBodyline(ProcNote);


                //cu400.Send;
                SendingDate := Today;
                SendingTime := Time;

                Sleep(1000);
                Window.Close;

            //END;
            until BidEvaluationCommittee.Next = 0;
        end;
    end;

    procedure FnNotifyAgencyNotice(AgencyNoticeHeader: Record "Agency Notice Header")
    var
        CompInfo: Record "Company Information";
        CashManagementSetup: Record "Cash Management Setup";
        RequesterName: Text[100];
        RequesterEmail: Text[100];
        Window: Dialog;
        WindowisOpen: Boolean;
        SenderAddress: Text[100];
        SenderMessage: Text[1000];
        CompanyDetails: Text[250];
        LoginDetails: Text[1000];
        ProcNote: Text[1000];
        emailhdr: Text[100];
        cu400: Codeunit Mail;
        CustEmail: Text[100];
        SupplierDetails: Text[1000];
        SendingDate: Date;
        SendingTime: Time;
    begin
        CompInfo.Get;
        CashManagementSetup.Get;
        CashManagementSetup.TestField("Imprest Email");
        RequesterEmail := CashManagementSetup."Imprest Email";
        RequesterName := CashManagementSetup."Imprest Email";
        Window.Open('Sending...');
        WindowisOpen := true;
        //Create message
        CustEmail := CashManagementSetup."Imprest Email";
        if CashManagementSetup."Imprest Email" = '' then
            Error('Please Contact the IT Admin to specify the E-mail address under Procurement Setup page!!');
        SenderAddress := CompInfo."E-Mail";

        //CompanyDetails:='Dear'+' '+ WEPContractorSubmission."Contractor Name"+',<br>';
        SenderMessage := '<BR>This is to notify you that the contractor' + ' ' + AgencyNoticeHeader."Contractor Name" + '<br/> has an agency notice ' + Format(AgencyNoticeHeader."Document No") + ' ' + 'dated ' + Format(AgencyNoticeHeader."Notice Date") +
        '<br/><br/>';
        //SupplierDetails:='';
        LoginDetails := 'If you require any assistance, please contact the Authority for more information.<br/>';
        ProcNote := '<BR> Regards';

        if CustEmail = '' then
            exit;

        emailhdr := UpperCase(CompInfo.Name) + ' AGENCY NOTICE';
        //cu400.CreateMessage(CompInfo.Name, SenderAddress, CustEmail, emailhdr,
        //CompanyDetails + '<BR></BR>' + SenderMessage + SupplierDetails + LoginDetails, true);
        //cu400.AddCC(RequesterEmail);
        //cu400.AddBodyline(ProcNote);
        ////cu400.AddAttachment(FileDirectory+FileName,FileName);
        //cu400.Send;
        SendingDate := Today;
        SendingTime := Time;
        Sleep(1000);
        Window.Close;
        Message('Notified Successfully');

    end;


    procedure FnNotifyAccountantAgencyNotice(NOA: Record "Bid Tabulation Header")
    var
        "Code": Code[10];
        ProcurementSetup: Record "Procurement Setup";
        IFPResponseLine: Record "IFP Response Line";
        Vendors: Record Vendor;
        InsCoverageLedgerEntry: Record "Ins. Coverage Ledger Entry";
        InsuranceReg: Record Insurance;
        Window: Dialog;
        EmailBody: array[2] of Text[30];
        BodyText: Text[250];
        mymail: Codeunit Mail;
        WindowisOpen: Boolean;
        FileDialog: Codeunit Mail;
        SendingDate: Date;
        SendingTime: Time;
        Counter: Integer;
        cu400: Codeunit Mail;
        SenderAddress: Text[100];
        UserSetup: Record "User Setup";
        HRSetup: Record "Human Resources Setup";
        CompInfo: Record "Company Information";
        RequesterName: Text[100];
        RequesterEmail: Text[100];
        emailhdr: Text[100];
        ProcNote: Text[1000];
        LoginDetails: Text[1000];
        CustEmail: Text[100];
        CompanyDetails: Text[250];
        SupplierDetails: Text[1000];
        SenderMessage: Text[1000];
        FileDirectory: Text[100];
        FileName: Text[100];
        RFIResponse2: Record "RFI Response";
        RFIResponse: Record "RFI Response";
        IFPResponseLine1: Record "IFP Response Line";
    begin
        /*RFIResponse.RESET;
        RFIResponse.SETRANGE("RFI Document No.",NOA."IFP Code");
        IF RFIResponse.FINDSET THEN BEGIN
            REPEAT
         Vendors.RESET;
         Vendors.SETRANGE("No.",RFIResponse."Vendor No.");
         IF Vendors.FINDSET THEN BEGIN
         Vendors.TESTFIELD("E-Mail");
        
        IFPResponseLine1.RESET;
        IFPResponseLine1.SETRANGE("Document No.",RFIResponse."Document No.");
        // IFPResponseLine.SETFILTER("Document No.",'<>%1',' ');
        // IFPResponseLine.SETFILTER("Vendor No.",'<>%1',' ');
        IF IFPResponseLine1.FINDSET THEN
         // MESSAGE('Vendor %1',Vendors."E-Mail");
         // MESSAGE('%1',IFPResponseLine."RFI Document No.");
         // MESSAGE('Email %1',Vendors.Name);
          CompInfo.GET;
          ProcurementSetup.GET;
          RequesterEmail:=ProcurementSetup."Default Proc Email Contact";
          RequesterName:=ProcurementSetup."Default Proc Email Contact";
          Window.OPEN('Sending...');
          WindowisOpen := TRUE;
          //Create message
        IF ProcurementSetup."Default Proc Email Contact"='' THEN
         ERROR('Please Contact the IT Admin to specify the E-mail address under Procurement Setup page!!');
        SenderAddress:=ProcurementSetup."Default Proc Email Contact";
        CustEmail:=Vendors."E-Mail";
        CompanyDetails:='Dear Sir/Madam,<br>';
        SenderMessage:='<BR>Thank you for Participating in the Prequalification Exercise<br/> Attached are the'
        +' results for your Prequalification Application<br/><br/>';
        SupplierDetails:='';
        //SupplierDetails:='<table style="border:2px;"><tr><th><b>CATEGORY</B></th><th>&nbsp;&nbsp;</th><th><b>RESULT</b></th></tr><tr><td>'+IFPResponseLine1."Category Description"
        //+'</td><td>&nbsp;&nbsp;'+IFPResponseLine1."Vendor No."+'</td><td>'+FORMAT(IFPResponseLine1."Evaluation Decision")+'</td></tr></table><br/><br/>';
        LoginDetails:='If you require any assistance, please contact the Supply Chain Management Department<br/>';
        ProcNote:='<BR> Regards';
          RFIResponse2.RESET;
          RFIResponse2.SETRANGE("Document No.",RFIResponse."Document No.");
          IF RFIResponse2.FINDSET THEN
          FileDirectory :=  'C:\DOCS\';
          FileName := 'Prequalification_'+RFIResponse2."Document No."+'.pdf';
           //Report.SaveAsPdf(70110,FileDirectory+FileName,RFIResponse2);
        IF CustEmail='' THEN
        EXIT;
          //MESSAGE:='This is to notify you that there has been a request for Registration ' +  SupplierRequest."No." + ' From Supplier'+ SupplierRequest.Name;
        emailhdr:=CompInfo.Name +' PREQUALIFICATION OUTCOME';
        //cu400.CreateMessage(CompInfo.Name,SenderAddress,CustEmail,emailhdr,
        CompanyDetails+'<BR></BR>'+SenderMessage+SupplierDetails+LoginDetails, TRUE);
        //cu400.AddCC(RequesterEmail);
        //cu400.AddBodyline(ProcNote);
        //cu400.AddAttachment(FileDirectory+FileName,FileName);
        //cu400.Send;
        SendingDate:=TODAY;
        SendingTime:=TIME;
          SLEEP(1000);
          Window.CLOSE;
          //  UNTIL InsuranceReg.NEXT=0;
          // END;
          //MESSAGE('Notified on %1',Vendors."E-Mail");
        
          END;
        UNTIL RFIResponse.NEXT=0;
        END;
        //MESSAGE('Notified on this  %1',Vendors."E-Mail");
        MESSAGE('Notified Successfully');
        //MESSAGE('Done');*/

    end;


    procedure FnNotifyRERequestForTakingOver(TakeOver: Record "Measurement &  Payment Header")
    var
        "Code": Code[10];
        ProcurementSetup: Record "Procurement Setup";
        IFPResponseLine: Record "IFP Response Line";
        Vendors: Record Vendor;
        InsCoverageLedgerEntry: Record "Ins. Coverage Ledger Entry";
        InsuranceReg: Record Insurance;
        Window: Dialog;
        EmailBody: array[2] of Text[30];
        BodyText: Text[250];
        mymail: Codeunit Mail;
        WindowisOpen: Boolean;
        FileDialog: Codeunit Mail;
        SendingDate: Date;
        SendingTime: Time;
        Counter: Integer;
        cu400: Codeunit Mail;
        SenderAddress: Text[100];
        UserSetup: Record "User Setup";
        HRSetup: Record "Human Resources Setup";
        CompInfo: Record "Company Information";
        RequesterName: Text[100];
        RequesterEmail: Text[100];
        emailhdr: Text[100];
        ProcNote: Text[1000];
        LoginDetails: Text[1000];
        CustEmail: Text[100];
        CompanyDetails: Text[250];
        SupplierDetails: Text[1000];
        SenderMessage: Text[1000];
        FileDirectory: Text[100];
        FileName: Text[100];
        RFIResponse2: Record "RFI Response";
        RFIResponse: Record "RFI Response";
        IFPResponseLine1: Record "IFP Response Line";
    begin
        CompInfo.Get;
        ProcurementSetup.Get;
        RequesterEmail := ProcurementSetup."Default Proc Email Contact";
        RequesterName := ProcurementSetup."Default Proc Email Contact";
        Window.Open('Sending...');
        WindowisOpen := true;
        //Create message
        if ProcurementSetup."Default Proc Email Contact" = '' then
            Error('Please Contact the IT Admin to specify the E-mail address under Procurement Setup page!!');
        SenderAddress := ProcurementSetup."Default Proc Email Contact";
        CustEmail := TakeOver."Resident Engineer Mail";
        CompanyDetails := 'Dear Sir/Madam,<br>';
        SenderMessage := '<BR>You are hereby notified of ' + ' ' + Format(TakeOver."Document Type") + ' ' + TakeOver."Document No." + ' ' + TakeOver."Project ID" + ' - ' + TakeOver."Project Name" + '<br/>';
        SupplierDetails := '';
        LoginDetails := 'Kindly log in to the system for more details.<br/>';
        ProcNote := '<BR> Regards';
        if CustEmail = '' then
            exit;

        emailhdr := CompInfo.Name + ' ' + Format(TakeOver."Document Type");
        //cu400.CreateMessage(CompInfo.Name, SenderAddress, CustEmail, emailhdr,
        //CompanyDetails + '<BR></BR>' + SenderMessage + SupplierDetails + LoginDetails, true);
        //cu400.AddCC(RequesterEmail);
        //cu400.AddBodyline(ProcNote);
        ////cu400.AddAttachment(FileDirectory+FileName,FileName);
        //cu400.Send;
        SendingDate := Today;
        SendingTime := Time;
        Sleep(1000);
        Window.Close;


        Message('Notified Successfully');
    end;


    procedure FnNotifyInsurer(TakeOver: Record "Measurement &  Payment Header")
    var
        "Code": Code[10];
        ProcurementSetup: Record "Procurement Setup";
        IFPResponseLine: Record "IFP Response Line";
        Vendors: Record Vendor;
        InsCoverageLedgerEntry: Record "Ins. Coverage Ledger Entry";
        InsuranceReg: Record Insurance;
        Window: Dialog;
        EmailBody: array[2] of Text[30];
        BodyText: Text[250];
        mymail: Codeunit Mail;
        WindowisOpen: Boolean;
        FileDialog: Codeunit Mail;
        SendingDate: Date;
        SendingTime: Time;
        Counter: Integer;
        cu400: Codeunit Mail;
        SenderAddress: Text[100];
        UserSetup: Record "User Setup";
        HRSetup: Record "Human Resources Setup";
        CompInfo: Record "Company Information";
        RequesterName: Text[100];
        RequesterEmail: Text[100];
        emailhdr: Text[100];
        ProcNote: Text[1000];
        LoginDetails: Text[1000];
        CustEmail: Text[100];
        CompanyDetails: Text[250];
        SupplierDetails: Text[1000];
        SenderMessage: Text[1000];
        FileDirectory: Text[100];
        FileName: Text[100];
        RFIResponse2: Record "RFI Response";
        RFIResponse: Record "RFI Response";
        IFPResponseLine1: Record "IFP Response Line";
    begin
        CompInfo.Get;
        ProcurementSetup.Get;
        RequesterEmail := ProcurementSetup."Default Proc Email Contact";
        RequesterName := ProcurementSetup."Default Proc Email Contact";
        Window.Open('Sending...');
        WindowisOpen := true;
        //Create message
        if ProcurementSetup."Default Proc Email Contact" = '' then
            Error('Please Contact the IT Admin to specify the E-mail address under Procurement Setup page!!');
        SenderAddress := ProcurementSetup."Default Proc Email Contact";
        CustEmail := TakeOver."Resident Engineer Mail";
        CompanyDetails := 'Dear Sir/Madam,<br>';
        SenderMessage := '<BR>You are hereby notified of ' + Format(TakeOver."Document Type") + ' ' + TakeOver."Document No." + '<br/>';
        SupplierDetails := '';
        LoginDetails := 'If you require any assistance, please contact the ICT Department.<br/>';
        ProcNote := '<BR> Regards';
        if CustEmail = '' then
            exit;

        emailhdr := CompInfo.Name + ' ' + Format(TakeOver."Document Type");
        //cu400.CreateMessage(CompInfo.Name, SenderAddress, CustEmail, emailhdr,
        //CompanyDetails + '<BR></BR>' + SenderMessage + SupplierDetails + LoginDetails, true);
        //cu400.AddCC(RequesterEmail);
        //cu400.AddBodyline(ProcNote);
        ////cu400.AddAttachment(FileDirectory+FileName,FileName);
        //cu400.Send;
        SendingDate := Today;
        SendingTime := Time;
        Sleep(1000);
        Window.Close;


        Message('Notified Successfully');
    end;


    procedure FnSendInsurerNotification(var Ins: Record "Insurance/Guarantee Header")
    var
        BidEvaluationCommittee: Record "Bid Evaluation Committee";
        AddendumNotice1: Record "Tender Addendum Notice";
        PurcHeader: Record "Purchase Header";
        SMTPMailSetup: Record "Email Account";
        AddendumAmendment: Record "Tender Addendum Amendment";
        ObjVend: Record Vendor;
        IFSList: Record "Standard Purchase Code";
        SupplierReq: Record Contact;
        LastFieldNo: Integer;
        FooterPrinted: Boolean;
        FileDirectory: Text[100];
        FileName: Text[100];
        ReportID: Integer;
        //"Object": Record "Object";
        Window: Dialog;
        RunOnceFile: Text[1000];
        TimeOut: Integer;
        Customer2: Record Customer;
        Cust: Record Customer;
        cr: Integer;
        lf: Integer;
        EmailBody: array[2] of Text[30];
        BodyText: Text[250];
        mymail: Codeunit Mail;
        DefaultPrinter: Text[200];
        WindowisOpen: Boolean;
        FileDialog: Codeunit Mail;
        SendingDate: Date;
        SendingTime: Time;
        Counter: Integer;
        cu400: Codeunit Mail;
        DocLog: Record "Document E-mail Log";
        BranchName: Code[80];
        DimValue: Record "Dimension Value";
        SenderAddress: Text[100];
        CustEmail: Text[100];
        UserSetup: Record "User Setup";
        HRSetup: Record "Company Information";
        Emp: Record Vendor;
        PayrollMonth: Date;
        PayrollMonthText: Text[30];
        PayPeriodtext: Text;
        PayPeriod: Record "Payroll PeriodX";
        CompInfo: Record "Company Information";
        DateFilter: Text;
        FromDate: Date;
        ToDate: Date;
        FromDateS: Text;
        ToDateS: Text;
        vend: Record Vendor;
        StartDate: Date;
        EndDAte: Date;
        EmailVerifier: Codeunit Payroll3;
        IsEmailValid: Boolean;
        PPayableSetup: Record "Procurement Setup";
        RequesterName: Text[100];
        RequesterEmail: Text[100];
        emailhdr: Text[100];
        CompanyDetails: Text[250];
        SupplierDetails: Text[1000];
        SenderMessage: Text[1000];
        ProcNote: Text[1000];
        LoginDetails: Text[1000];
        PortalUser: Record "Dynasoft Portal User";
        Password: Text[50];
        ActivationDetails: Text[1000];
        RFQReqVendors: Record "Standard Vendor Purchase Code";
        StandardPurchaseCode: Record "Standard Purchase Code";
        RFQReqVendors1: Record "Standard Vendor Purchase Code";
        Email: Codeunit Email;
        Mail: Codeunit "Email Message";
        Body: Text;
        TempBlob: Codeunit "Temp Blob";
        DocStream: Instream;
        Outs: Outstream;
        RecRef: RecordRef;
        fref: FieldRef;
        RespCenter: Record "Responsibility Center";
        ReplyMail:Text;
    begin
        ///Notifying Procurement Team on supplier Request
        Ins.TestField("Verified Insurer Email Address");
        Ins.TestField(Status,Ins.Status::Approved);
       // SMTPMailSetup.Get;
        CompInfo.Get;
        HRSetup.Get;
        PPayableSetup.Get;


        RequesterEmail := Ins."Verified Insurer Email Address";
        RequesterName := Ins."Insurer/Guarantor Name";

        Window.Open('Sending...');

        WindowisOpen := true;


        Counter := Counter + 1;

        //Create message
        if HRSetup."E-Mail" = '' then
            Error('Please Contact the IT Admin to specify the E-mail address under Company Information Setup page!!');
        //SenderAddress := SMTPMailSetup."Email Address";

        if PPayableSetup."Default Proc Email Contact" = '' then
            Error('Please Contact the IT Admin to specify the Procurement Manager E-mail address under Purchases&Payable Setup page!!');
        CustEmail := Ins."Verified Insurer Email Address";
        ReplyMail:='';
        RespCenter.Reset();
        RespCenter.SetRange(Identifier,RespCenter.Identifier);
        if RespCenter.FindFirst() then
        ReplyMail:= RespCenter."E-Mail";
        CompanyDetails := 'Dear: ' + RequesterName;
        SenderMessage := '<BR>This is to notify you that ' + Ins."Contractor Name" + ' ' + 'has submitted ' + Format(Ins."Document Type") + '  </BR>';
        SenderMessage := SenderMessage + ' ' + '<BR>issued by your Institution.Reference No ' + Ins."Policy/Guarantee No" + ' Amount of ' + Format(Ins."Amount Insured/Guaranteed") + '.Please confirm via the' + ReplyMail + '  </BR>';
        SupplierDetails := '';
        LoginDetails := '';
        

        ProcNote := '<BR> This is a system generated email and you are advised to reply via the above email.';

        if CustEmail = '' then
            exit;
        Body := '';
        Body := CompanyDetails + SenderMessage + ProcNote;
        //MESSAGE:='This is to notify you that there has been a request for Registration ' +  SupplierRequest."No." + ' From Supplier'+ SupplierRequest.Name;
        emailhdr := 'INSURANCE/GUARANTEE OF WORKS';
        Mail.Create(CustEmail, emailhdr, Body, TRUE);
        //  Ins.Reset;
        // Ins.SetRange(Ins."Document No.", Ins."Document No.");
        // if Ins.FindFirst() then begin
        //     TempBlob.CreateOutstream(Outs);
        //     RecRef.GetTable(Ins);
        //     //Report.SaveAs(Report::"Site Instructed Works", '', ReportFormat::PDF, Outs, RecRef);
        //     TempBlob.CreateInstream(DocStream);
        //     //Mail.AddAttachment('ADVANCE GUARANTEE.pdf', 'PDF', DocStream);
        //     //Report.SaveAsPdf(72072, FileDirectory + FileName, Ins);
        // end;

        Email.Send(Mail);

        //cu400.CreateMessage(CompInfo.Name, SenderAddress, CustEmail, emailhdr,
        //CompanyDetails + '<BR></BR>' + SenderMessage + SupplierDetails + LoginDetails + ActivationDetails, true);

        //cu400.AddCC(RequesterEmail);
        //cu400.AddAttachment(FileDirectory + FileName, FileName);
        //cu400.AddBodyline(ProcNote);


        //cu400.Send;


        //END;
        //UNTIL BidEvaluationCommittee.NEXT=0;
        //END;
    end;


    procedure FnGenerateICM(BidTab2: Record "Bid Tabulation Header")
    var
        "Code": Code[10];
        ProcurementSetup: Record "Procurement Setup";
        IFPResponseLine: Record "IFP Response Line";
        Vendors: Record Vendor;
        InsCoverageLedgerEntry: Record "Ins. Coverage Ledger Entry";
        InsuranceReg: Record Insurance;
        Window: Dialog;
        EmailBody: array[2] of Text[30];
        BodyText: Text[250];
        mymail: Codeunit Mail;
        WindowisOpen: Boolean;
        FileDialog: Codeunit Mail;
        SendingDate: Date;
        SendingTime: Time;
        Counter: Integer;
        cu400: Codeunit Mail;
        SenderAddress: Text[100];
        UserSetup: Record "User Setup";
        HRSetup: Record "Human Resources Setup";
        CompInfo: Record "Company Information";
        RequesterName: Text[100];
        RequesterEmail: Text[100];
        emailhdr: Text[100];
        ProcNote: Text[1000];
        LoginDetails: Text[1000];
        CustEmail: Text[100];
        CompanyDetails: Text[250];
        SupplierDetails: Text[1000];
        SenderMessage: Text[1000];
        FileDirectory: Text[100];
        FileName: Text[100];
        RFIResponse2: Record "RFI Response";
        RFIResponse: Record "RFI Response";
        IFPResponseLine1: Record "IFP Response Line";
        DEmail: Text;
        SMTPMailSetup: Record "Email Account";
    begin

        CompInfo.Get;
        ProcurementSetup.Get;

        ResponsibilityCenter.Reset;
        ResponsibilityCenter.SetRange(ResponsibilityCenter.Code, BidTab2."Directorate ID");
        if ResponsibilityCenter.FindSet then begin
            ResponsibilityCenter.TestField("E-Mail");

            CustEmail := ResponsibilityCenter."E-Mail";

        end;
        RequesterEmail := ProcurementSetup."Default Proc Email Contact";
        RequesterName := ProcurementSetup."Default Proc Email Contact";
        Window.Open('Sending...');
        WindowisOpen := true;
        //Create message
        if ProcurementSetup."Default Proc Email Contact" = '' then
            Error('Please Contact the IT Admin to specify the E-mail address under Procurement Setup page!!');
        SenderAddress := ProcurementSetup."Default Proc Email Contact";
        //MESSAGE('%1',CustEmail);

        CompanyDetails := 'Director ' + ResponsibilityCenter.Name + ',';
        SenderMessage := '<BR>The above matter refers. ';
        SupplierDetails := 'Pursuant to Section (84) of the Public Procurement and Asset Disposal Act (PPADA) 2015, the Director General reviewed the above application from the evaluation committee for the captioned tender together with the ';
        DEmail := 'DD Supply Chain Management Professional Opinion and awarded the Tender for' + ' ' + BidTab2."Tender Name" + ' ' + 'to' + ' ' + BidTab2."Awarded Bidder Name" + ' ' + 'at their tender sum of ' + ' ' + Format(BidTab2."Award Tender Sum Inc Taxes");
        DEmail := DEmail + ' ' + 'for being the lowest evaluated bidder.<BR>';
        LoginDetails := 'You may now take the necessary action as per the decision made.<br/>';
        ProcNote := '<BR> Regards';
        if CustEmail = '' then
            Error('THERE IS NO DIRECTORATE EMAIL DEFINED');


        emailhdr := CompInfo.Name;
        //cu400.CreateMessage(CompInfo.Name, SenderAddress, CustEmail, emailhdr,
        //CompanyDetails + '<BR></BR>' + SenderMessage + SupplierDetails + DEmail + LoginDetails, true);
        //cu400.AddCC(RequesterEmail);
        //cu400.AddBodyline(ProcNote);
        ////cu400.AddAttachment(FileDirectory+FileName,FileName);
        //cu400.Send;
        SendingDate := Today;
        SendingTime := Time;
        Sleep(1000);
        Window.Close;



        Message('ICM Generated and Sent Sucessfully.');
    end;


    procedure FnSendProfessionalOpinionToProc(var PEVal: Record "Project Evaluation Header")
    var
        BidEvaluationCommittee: Record "Bid Evaluation Committee";
        AddendumNotice1: Record "Tender Addendum Notice";
        PurcHeader: Record "Purchase Header";
        SMTPMailSetup: Record "Email Account";
        AddendumAmendment: Record "Tender Addendum Amendment";
        ObjVend: Record Vendor;
        IFSList: Record "Standard Purchase Code";
        SupplierReq: Record Contact;
        LastFieldNo: Integer;
        FooterPrinted: Boolean;
        FileDirectory: Text[100];
        FileName: Text[100];
        ReportID: Integer;
        //"Object": Record "Object";
        Window: Dialog;
        RunOnceFile: Text[1000];
        TimeOut: Integer;
        Customer2: Record Customer;
        Cust: Record Customer;
        cr: Integer;
        lf: Integer;
        EmailBody: array[2] of Text[30];
        BodyText: Text[250];
        mymail: Codeunit Mail;
        DefaultPrinter: Text[200];
        WindowisOpen: Boolean;
        FileDialog: Codeunit Mail;
        SendingDate: Date;
        SendingTime: Time;
        Counter: Integer;
        cu400: Codeunit Mail;
        DocLog: Record "Document E-mail Log";
        BranchName: Code[80];
        DimValue: Record "Dimension Value";
        SenderAddress: Text[100];
        CustEmail: Text[100];
        UserSetup: Record "User Setup";
        HRSetup: Record "Company Information";
        Emp: Record Vendor;
        PayrollMonth: Date;
        PayrollMonthText: Text[30];
        PayPeriodtext: Text;
        PayPeriod: Record "Payroll PeriodX";
        CompInfo: Record "Company Information";
        DateFilter: Text;
        FromDate: Date;
        ToDate: Date;
        FromDateS: Text;
        ToDateS: Text;
        vend: Record Vendor;
        StartDate: Date;
        EndDAte: Date;
        EmailVerifier: Codeunit Payroll3;
        IsEmailValid: Boolean;
        PPayableSetup: Record "Procurement Setup";
        RequesterName: Text[100];
        RequesterEmail: Text[100];
        emailhdr: Text[100];
        CompanyDetails: Text[250];
        SupplierDetails: Text[1000];
        SenderMessage: Text[1000];
        ProcNote: Text[1000];
        LoginDetails: Text[1000];
        PortalUser: Record "Dynasoft Portal User";
        Password: Text[50];
        ActivationDetails: Text[1000];
        RFQReqVendors: Record "Standard Vendor Purchase Code";
        StandardPurchaseCode: Record "Standard Purchase Code";
        RFQReqVendors1: Record "Standard Vendor Purchase Code";
    begin
        ///Notifying Procurement Team on supplier Request

        SMTPMailSetup.Get;
        CompInfo.Get;
        HRSetup.Get;
        PPayableSetup.Get;

        ResponsibilityCenter.Reset;
        ResponsibilityCenter.SetRange(ResponsibilityCenter.Code, PEVal."Directorate ID");
        if ResponsibilityCenter.FindSet then begin
            ResponsibilityCenter.TestField("E-Mail");

            RequesterEmail := ResponsibilityCenter."E-Mail";
            RequesterName := ResponsibilityCenter.Name;
        end;

        Window.Open('Sending...');

        WindowisOpen := true;


        Counter := Counter + 1;

        //Create message
        if HRSetup."E-Mail" = '' then
            Error('Please Contact the IT Admin to specify the E-mail address under Company Information Setup page!!');
        SenderAddress := SMTPMailSetup."Email Address";

        if PPayableSetup."Default Proc Email Contact" = '' then
            Error('Please Contact the IT Admin to specify the Procurement Manager E-mail address under Purchases&Payable Setup page!!');
        CustEmail := PPayableSetup."Default Proc Email Contact";

        CompanyDetails := 'Dear: ' + RequesterName;
        SenderMessage := '<BR>This is to notify you that the professional opinion  for ' + PEVal."Purchase Contract ID" + 'has been posted.  </BR>';
        SupplierDetails := '';
        LoginDetails := '';


        ProcNote := '<BR> If you require any assistance, please contact our Supply Chain Management Team by Phone ' + HRSetup."Phone No." + ' or vendor support team via Email: ' + PPayableSetup."Default Proc Email Contact";
        // FileDirectory := 'C:\DOCS\';
        // FileName := 'Clarification.pdf';
        // AddendumNotice1.RESET;
        // AddendumNotice1.SETRANGE("Addendum Notice No.",AddendumNotice."Addendum Notice No.");
        // IF AddendumNotice1.FINDSET THEN BEGIN
        //
        //
        // //Report.SaveAsPdf(70117,FileDirectory+FileName,AddendumNotice1);
        // END;
        if CustEmail = '' then
            exit;
        //MESSAGE:='This is to notify you that there has been a request for Registration ' +  SupplierRequest."No." + ' From Supplier'+ SupplierRequest.Name;
        emailhdr := 'PROJECT PROFESSIONAL OPINION POSTING' + ' ' + PEVal."Project Name";

        //cu400.CreateMessage(CompInfo.Name, SenderAddress, CustEmail, emailhdr,
        //CompanyDetails + '<BR></BR>' + SenderMessage + SupplierDetails + LoginDetails + ActivationDetails, true);

        //cu400.AddCC(RequesterEmail);
        ////cu400.AddAttachment(FileDirectory+FileName,FileName);
        //cu400.AddBodyline(ProcNote);


        //cu400.Send;
        SendingDate := Today;
        SendingTime := Time;

        Sleep(1000);
        Window.Close;

        //END;
    end;


    procedure FnNotifyContractorTakingOverInspectionAccept(TakeOver: Record "Inspection Headersss")
    var
        "Code": Code[10];
        ProcurementSetup: Record "Procurement Setup";
        IFPResponseLine: Record "IFP Response Line";
        Vendors: Record Vendor;
        InsCoverageLedgerEntry: Record "Ins. Coverage Ledger Entry";
        InsuranceReg: Record Insurance;
        Window: Dialog;
        EmailBody: array[2] of Text[30];
        BodyText: Text[250];
        mymail: Codeunit Mail;
        WindowisOpen: Boolean;
        FileDialog: Codeunit Mail;
        SendingDate: Date;
        SendingTime: Time;
        Counter: Integer;
        cu400: Codeunit Mail;
        SenderAddress: Text[100];
        UserSetup: Record "User Setup";
        HRSetup: Record "Human Resources Setup";
        CompInfo: Record "Company Information";
        RequesterName: Text[100];
        RequesterEmail: Text[100];
        emailhdr: Text[100];
        ProcNote: Text[1000];
        LoginDetails: Text[1000];
        CustEmail: Text[100];
        CompanyDetails: Text[250];
        SupplierDetails: Text[1000];
        SenderMessage: Text[1000];
        FileDirectory: Text[100];
        FileName: Text[100];
        RFIResponse2: Record "RFI Response";
        RFIResponse: Record "RFI Response";
        IFPResponseLine1: Record "IFP Response Line";
    begin
        CompInfo.Get;
        ProcurementSetup.Get;
        RequesterEmail := ProcurementSetup."Default Proc Email Contact";
        RequesterName := ProcurementSetup."Default Proc Email Contact";
        Window.Open('Sending...');
        WindowisOpen := true;
        //Create message
        if ProcurementSetup."Default Proc Email Contact" = '' then
            Error('Please Contact the IT Admin to specify the E-mail address under Procurement Setup page!!');
        SenderAddress := ProcurementSetup."Default Proc Email Contact";
        ProjectVendors.Reset;
        ProjectVendors.SetRange(ProjectVendors."Contract No", TakeOver."Contract ID");
        if ProjectVendors.FindSet then begin
            ProjectVendors.TestField("E-mail Address");
            repeat
                CustEmail := ProjectVendors."E-mail Address";
            until ProjectVendors.Next = 0;
        end;

        FileDirectory := 'C:\DOCS\';
        FileName := 'TakingOverCertificate.pdf';
        TakeOver.Reset;
        TakeOver.SetRange(TakeOver."Inspection No", TakeOver."Inspection No");
        if TakeOver.FindSet then begin


            //Report.SaveAsPdf(72054, FileDirectory + FileName, TakeOver);
        end;

        CompanyDetails := 'Dear Sir/Madam,<br>';
        SenderMessage := '<BR>You are hereby notified of ' + Format(TakeOver."Inspection Type") + ' ' + TakeOver."Inspection No" + ' ' + 'dated' + Format(TakeOver."Inspection Date") + '<br/>';
        SenderMessage := SenderMessage + ' ' + '<BR>Based on the taking over inspection ,the road sections enlisted the taking over certificate attached herein have been substantially completed' + '<br/>';
        SupplierDetails := '';
        LoginDetails := 'If you require any assistance, please contact the Resident Engineer Office.<br/>';
        ProcNote := '<BR> Regards';
        if CustEmail = '' then
            exit;

        emailhdr := CompInfo.Name + ' ' + Format(TakeOver."Inspection Type");
        //cu400.CreateMessage(CompInfo.Name, SenderAddress, CustEmail, emailhdr,
        //CompanyDetails + '<BR></BR>' + SenderMessage + SupplierDetails + LoginDetails, true);
        //cu400.AddCC(RequesterEmail);
        //cu400.AddBodyline(ProcNote);
        //cu400.AddAttachment(FileDirectory + FileName, FileName);
        //cu400.Send;
        SendingDate := Today;
        SendingTime := Time;
        Sleep(1000);
        Window.Close;


        Message('Notified Successfully');
    end;


    procedure FnNotifyContractorTakingOverInspectionReject(TakeOver: Record "Inspection Headersss")
    var
        "Code": Code[10];
        ProcurementSetup: Record "Procurement Setup";
        IFPResponseLine: Record "IFP Response Line";
        Vendors: Record Vendor;
        InsCoverageLedgerEntry: Record "Ins. Coverage Ledger Entry";
        InsuranceReg: Record Insurance;
        Window: Dialog;
        EmailBody: array[2] of Text[30];
        BodyText: Text[250];
        mymail: Codeunit Mail;
        WindowisOpen: Boolean;
        FileDialog: Codeunit Mail;
        SendingDate: Date;
        SendingTime: Time;
        Counter: Integer;
        cu400: Codeunit Mail;
        SenderAddress: Text[100];
        UserSetup: Record "User Setup";
        HRSetup: Record "Human Resources Setup";
        CompInfo: Record "Company Information";
        RequesterName: Text[100];
        RequesterEmail: Text[100];
        emailhdr: Text[100];
        ProcNote: Text[1000];
        LoginDetails: Text[1000];
        CustEmail: Text[100];
        CompanyDetails: Text[250];
        SupplierDetails: Text[1000];
        SenderMessage: Text[1000];
        FileDirectory: Text[100];
        FileName: Text[100];
        RFIResponse2: Record "RFI Response";
        RFIResponse: Record "RFI Response";
        IFPResponseLine1: Record "IFP Response Line";
    begin
        CompInfo.Get;
        ProcurementSetup.Get;
        RequesterEmail := ProcurementSetup."Default Proc Email Contact";
        RequesterName := ProcurementSetup."Default Proc Email Contact";
        Window.Open('Sending...');
        WindowisOpen := true;
        //Create message
        if ProcurementSetup."Default Proc Email Contact" = '' then
            Error('Please Contact the IT Admin to specify the E-mail address under Procurement Setup page!!');
        SenderAddress := ProcurementSetup."Default Proc Email Contact";
        ProjectVendors.Reset;
        ProjectVendors.SetRange(ProjectVendors."Contract No", TakeOver."Contract ID");
        if ProjectVendors.FindSet then begin
            ProjectVendors.TestField("E-mail Address");
            repeat
                CustEmail := ProjectVendors."E-mail Address";
            until ProjectVendors.Next = 0;
        end;

        /*FileDirectory := 'C:\DOCS\';
        FileName := 'TakingOverCertificate.pdf';
        TakeOver.RESET;
        TakeOver.SETRANGE(TakeOver."Inspection No",TakeOver."Inspection No");
        IF TakeOver.FINDSET THEN BEGIN


        //Report.SaveAsPdf(72054,FileDirectory+FileName,TakeOver);
        END;*/

        CompanyDetails := 'Dear Sir/Madam,<br>';
        SenderMessage := '<BR>You are hereby notified of ' + Format(TakeOver."Inspection Type") + ' ' + TakeOver."Inspection No" + ' ' + 'dated' + Format(TakeOver."Inspection Date") + '<br/>';
        SenderMessage := SenderMessage + ' ' + '<BR>Based on the taking over inspection has been rejected.' + '<br/>';
        SupplierDetails := '';
        LoginDetails := 'If you require any assistance, please contact the Resident Engineer Office.<br/>';
        ProcNote := '<BR> Regards';
        if CustEmail = '' then
            exit;

        emailhdr := CompInfo.Name + ' ' + Format(TakeOver."Inspection Type");
        //cu400.CreateMessage(CompInfo.Name, SenderAddress, CustEmail, emailhdr,
        //CompanyDetails + '<BR></BR>' + SenderMessage + SupplierDetails + LoginDetails, true);
        //cu400.AddCC(RequesterEmail);
        //cu400.AddBodyline(ProcNote);
        ////cu400.AddAttachment(FileDirectory+FileName,FileName);
        //cu400.Send;
        SendingDate := Today;
        SendingTime := Time;
        Sleep(1000);
        Window.Close;


        Message('Notified Successfully');

    end;

    procedure FnNotifyContractorInsuranceExpiry(DocumentNo: Code[30]; ContractorID: Code[50])
    var
        "Code": Code[10];
        ProcurementSetup: Record "Procurement Setup";
        IFPResponseLine: Record "IFP Response Line";
        Vendors: Record Vendor;
        InsCoverageLedgerEntry: Record "Ins. Coverage Ledger Entry";
        InsuranceReg: Record Insurance;
        Window: Dialog;
        EmailBody: array[2] of Text[30];
        BodyText: Text[250];
        mymail: Codeunit Mail;
        WindowisOpen: Boolean;
        FileDialog: Codeunit Mail;
        SendingDate: Date;
        SendingTime: Time;
        Counter: Integer;
        cu400: Codeunit Mail;
        SenderAddress: Text[100];
        UserSetup: Record "User Setup";
        HRSetup: Record "Human Resources Setup";
        CompInfo: Record "Company Information";
        RequesterName: Text[100];
        RequesterEmail: Text[100];
        emailhdr: Text[100];
        ProcNote: Text[1000];
        LoginDetails: Text[1000];
        CustEmail: Text[100];
        CompanyDetails: Text[250];
        SupplierDetails: Text[1000];
        SenderMessage: Text[1000];
        FileDirectory: Text[100];
        FileName: Text[100];
        RFIResponse2: Record "RFI Response";
        RFIResponse: Record "RFI Response";
        IFPResponseLine1: Record "IFP Response Line";
    begin
        CompInfo.Get;
        ProcurementSetup.Get;
        RequesterEmail := ProcurementSetup."Default Proc Email Contact";
        RequesterName := ProcurementSetup."Default Proc Email Contact";
        Window.Open('Sending...');
        WindowisOpen := true;
        //Create message
        if ProcurementSetup."Default Proc Email Contact" = '' then
            Error('Please Contact the IT Admin to specify the E-mail address under Procurement Setup page!!');
        SenderAddress := ProcurementSetup."Default Proc Email Contact";
        InsuranceGuaranteeHeader.Reset;
        InsuranceGuaranteeHeader.SetRange(InsuranceGuaranteeHeader."Document No.", DocumentNo);
        if InsuranceGuaranteeHeader.FindSet then begin
            Vendor.Reset;
            Vendor.SetRange("No.", ContractorID);
            if Vendor.FindSet then begin
                CustEmail := Vendor."E-Mail";
                //MESSAGE(CustEmail);

                CompanyDetails := 'Dear Sir/Madam,<br>';
                SenderMessage := '<BR>You are hereby notified of ' + Format(InsuranceGuaranteeHeader."Policy/Guarantee No") + ' ' + InsuranceGuaranteeHeader.Description + ' ' + 'Expiry Date' + Format(InsuranceGuaranteeHeader."Expiry Date") + '<br/>';
                SenderMessage := SenderMessage + ' ' + '<BR>will Expire Tomorrow.' + '<br/>';
                SenderMessage := SenderMessage + ' ' + '<BR>Kindly Note that after expiry you will not have access to the Contractors Hub Portal' + '<br/>';
                SupplierDetails := '';
                LoginDetails := 'If you require any assistance, please contact the Resident Engineer Office.<br/>';
                ProcNote := '<BR> Regards';
                if CustEmail = '' then
                    exit;

                emailhdr := CompInfo.Name + ' ' + Format(InsuranceGuaranteeHeader."Insurance Type");
                //cu400.CreateMessage(CompInfo.Name, SenderAddress, CustEmail, emailhdr,
                //CompanyDetails + '<BR></BR>' + SenderMessage + SupplierDetails + LoginDetails, true);
                //cu400.AddCC(RequesterEmail);
                //cu400.AddBodyline(ProcNote);
                ////cu400.AddAttachment(FileDirectory+FileName,FileName);
                //cu400.Send;
                SendingDate := Today;
                SendingTime := Time;
                Sleep(1000);
                Window.Close;


                Message('Notified Successfully');
            end;
        end;
    end;

    procedure FnUpdateExpiryStatus(DocumentNo: Code[30]) Updated: Boolean
    begin
        InsuranceGuaranteeHeader.Reset;
        InsuranceGuaranteeHeader.SetRange("Document No.", DocumentNo);
        InsuranceGuaranteeHeader.SetRange("Email Notification", false);
        if InsuranceGuaranteeHeader.FindFirst then begin
            InsuranceGuaranteeHeader."Email Notification" := true;
            InsuranceGuaranteeHeader.Modify;
            Updated := true;
        end else
            Updated := false;
    end;

    procedure FnImprestSurrenderNotification(DocumentNo: Code[30]; EmpNo: Code[50])
    var
        "Code": Code[10];
        ProcurementSetup: Record "Procurement Setup";
        IFPResponseLine: Record "IFP Response Line";
        Vendors: Record Vendor;
        InsCoverageLedgerEntry: Record "Ins. Coverage Ledger Entry";
        InsuranceReg: Record Insurance;
        Window: Dialog;
        EmailBody: array[2] of Text[30];
        BodyText: Text[250];
        mymail: Codeunit Mail;
        WindowisOpen: Boolean;
        FileDialog: Codeunit Mail;
        SendingDate: Date;
        SendingTime: Time;
        Counter: Integer;
        cu400: Codeunit Mail;
        SenderAddress: Text[100];
        UserSetup: Record "User Setup";
        HRSetup: Record "Human Resources Setup";
        CompInfo: Record "Company Information";
        RequesterName: Text[100];
        RequesterEmail: Text[100];
        emailhdr: Text[100];
        ProcNote: Text[1000];
        LoginDetails: Text[1000];
        CustEmail: Text[100];
        CompanyDetails: Text[250];
        SupplierDetails: Text[1000];
        SenderMessage: Text[1000];
        FileDirectory: Text[100];
        FileName: Text[100];
        RFIResponse2: Record "RFI Response";
        RFIResponse: Record "RFI Response";
        IFPResponseLine1: Record "IFP Response Line";
        Payments: Record payments;
        Employee: Record Employee;
    begin
        CompInfo.Get;
        HRSetup.Get;
        RequesterEmail := HRSetup."HR E-mail Address";
        RequesterName := HRSetup."HR E-mail Address";
        Window.Open('Sending...');
        WindowisOpen := true;
        //Create message
        if HRSetup."HR E-mail Address" = '' then
            Error('Please Contact the IT Admin to specify the E-mail address under Hr Setup page!!');
        SenderAddress := ProcurementSetup."Default Proc Email Contact";
        Payments.Reset;
        Payments.SetRange(Payments."No.", DocumentNo);
        if Payments.FindSet then begin
            Employee.Reset;
            Employee.SetRange("No.", EmpNo);
            if Employee.FindSet then begin
                CustEmail := Employee."Company E-Mail";

                CompanyDetails := 'Dear' + ' ' + Employee."First Name" + ' ' + Employee."Middle Name" + ' ' + Employee."Last Name" + ',<br>';
                SenderMessage := '<BR>You are hereby notified of Imprest ' + Format(Payments."No.") + ' ' + Payments."Payment Narration" + ' ' + 'Imprest surrender deadline ' + Format(Payments."Imprest Deadline") + '<br/>';
                SenderMessage := SenderMessage + ' ' + '<BR>is 7 days overdue for surrender.' + '<br/>';
                SenderMessage := SenderMessage + ' ' + '<BR>Kindly Note that after expiry you will not be able to apply for imprest without surrendering' + '<br/>';
                SupplierDetails := '';
                LoginDetails := 'If you require any assistance, please contact the Finance office.<br/>';
                ProcNote := '<BR> Regards';
                if CustEmail = '' then
                    exit;

                emailhdr := CompInfo.Name + ' ' + Format(InsuranceGuaranteeHeader."Insurance Type");
                //cu400.CreateMessage(CompInfo.Name, SenderAddress, CustEmail, emailhdr,
                //CompanyDetails + '<BR></BR>' + SenderMessage + SupplierDetails + LoginDetails, true);
                //cu400.AddCC(RequesterEmail);
                //cu400.AddBodyline(ProcNote);
                ////cu400.AddAttachment(FileDirectory+FileName,FileName);
                //cu400.Send;
                SendingDate := Today;
                SendingTime := Time;
                Sleep(1000);
                Window.Close;


                Message('Notified Successfully');
            end;
        end;
    end;

    procedure FnUpdateImprestNotification(DocumentNo: Code[30]) Updated: Boolean
    var
        Payments: Record payments;
    begin
        Payments.Reset;
        Payments.SetRange("No.", DocumentNo);
        Payments.SetRange("Notification Sent", false);
        if Payments.FindFirst then begin
            Payments."Notification Sent" := true;
            Payments.Modify;
            Updated := true;
        end else
            Updated := false;
    end;


    procedure FnNotifyStaffAppointment(ProjectStaffVoucher: Record "Project Staff Voucher")
    var
        "Code": Code[10];
        ProcurementSetup: Record "Procurement Setup";
        IFPResponseLine: Record "IFP Response Line";
        Vendors: Record Vendor;
        InsCoverageLedgerEntry: Record "Ins. Coverage Ledger Entry";
        InsuranceReg: Record Insurance;
        Window: Dialog;
        EmailBody: array[2] of Text[30];
        BodyText: Text[250];
        mymail: Codeunit Mail;
        WindowisOpen: Boolean;
        FileDialog: Codeunit Mail;
        SendingDate: Date;
        SendingTime: Time;
        Counter: Integer;
        cu400: Codeunit Mail;
        SenderAddress: Text[100];
        UserSetup: Record "User Setup";
        HRSetup: Record "Human Resources Setup";
        CompInfo: Record "Company Information";
        RequesterName: Text[100];
        RequesterEmail: Text[100];
        emailhdr: Text[100];
        ProcNote: Text[1000];
        LoginDetails: Text[1000];
        CustEmail: Text[100];
        CompanyDetails: Text[250];
        SupplierDetails: Text[1000];
        SenderMessage: Text[1000];
        FileDirectory: Text[100];
        FileName: Text[100];
        RFIResponse2: Record "RFI Response";
        RFIResponse: Record "RFI Response";
        IFPResponseLine1: Record "IFP Response Line";
        PurchaseHeader: Record "Purchase Header";
        InternalProjectResource: Record "Internal Project Resource";
        ProjectVendors: Record "Project Vendors";
        ProjectStaffTerminationLine: Record "Project Staff Termination Line";
        ResourceSupervisor: Record "Resource Supervisor";
        ProjectStaffAppointmentLine: Record "Project Staff Appointment Line";
        Body: Text;
        Email: Codeunit Email;
        Mail: Codeunit "Email Message";
        TempBlob: Codeunit "Temp Blob";
        DocStream: Instream;
        Outs: Outstream;
        RecRef: RecordRef;
        fref: FieldRef;
        fref2: FieldRef;
        Recepients: List of [Text];
        CCRecepients: List of [Text];
        BCCRecepients: List of [Text];
    begin
        ProjectStaffAppointmentLine.Reset;
        ProjectStaffAppointmentLine.SetRange(ProjectStaffAppointmentLine."Document No.", ProjectStaffVoucher."Document No.");
        if ProjectStaffAppointmentLine.FindSet() then begin
            repeat
                // ResourceSupervisor.Reset;
                // ResourceSupervisor.SetRange(ResourceSupervisor."Resouce No", ProjectStaffAppointmentLine."Resource No.");
                // if ResourceSupervisor.FindSet then begin
                //     repeat
                //ResourceSupervisor.TestField("Employee Email");

                CustEmail := ProjectStaffAppointmentLine.Email;
                CompInfo.Get;
                ProcurementSetup.Get;
                RequesterEmail := ProcurementSetup."Default Proc Email Contact";
                RequesterName := ProcurementSetup."Default Proc Email Contact";
                Window.Open('Sending........');
                WindowisOpen := true;
                //Create message
                if ProcurementSetup."Default Proc Email Contact" = '' then
                    Error('Please Contact the IT Admin to specify the E-mail address under Procurement Setup page!!');
                SenderAddress := ProcurementSetup."Default Proc Email Contact";


                CompanyDetails := 'Dear' + ' ' + ProjectStaffAppointmentLine.Name + ',<br>';
                SenderMessage := '<BR>You have been successfully appointed to serve on the project below, appointment No: ' + ProjectStaffAppointmentLine."Document No." + '<br/>.'
                + '<br/><br/>' + 'Project No: ' + ProjectStaffVoucher."Project ID" + '<br/><br/>Type: ' + format(ProjectStaffVoucher."Document Type") + '<br/><br/>Role: ' + ProjectStaffAppointmentLine."Role Code" + '<br/><br/>Designation: ' + ProjectStaffAppointmentLine.Designation + '<br/><br/>Appointment Effective Date: ' + format(ProjectStaffAppointmentLine."Effective Date") + '<br/><br/>Start Date: ' + format(ProjectStaffVoucher."Project Start Date") + '<br/><br/>End Date: ' + format(ProjectStaffVoucher."Project End Date") + '<br/><br/>Project Name: ' + ProjectStaffVoucher."Project Name" + '<br/><br/>';
                SenderMessage := SenderMessage + ' ' + 'Attached herein, please find an e-copy of your appointment letter.' + '<br/><br/>';

                SupplierDetails := '';
                LoginDetails := 'If you require any assistance, please contact the technical team.<br/>';
                ProcNote := '<BR> Regards';
                //FileDirectory := 'C:\DOCS\';
                FileName := 'Appointment_Letter' + ProjectStaffVoucher."Document No." + '.pdf';

                ProjectStaffVoucher.Reset;
                ProjectStaffVoucher.SetRange("Document No.", ProjectStaffVoucher."Document No.");
                if ProjectStaffVoucher.FindSet then begin
                    //Report.SaveAsPdf(72003, FileDirectory + FileName, ProjectStaffVoucher);

                end;
                if CustEmail = '' then
                    exit;
                Body := CompanyDetails + SenderMessage + LoginDetails + ProcNote;
                emailhdr := UpperCase(CompInfo.Name) + ' PROJECT TEAM IMPLEMENTATION NOTIFICATION';
                TempBlob.CreateOutstream(Outs);
                recRef.Open(Database::"Project Staff Appointment Line");
                fref := RecRef.field(1);

                fref.setrange(ProjectStaffAppointmentLine."Document No.");
                fref2 := RecRef.field(2);
                fref2.SetRange(ProjectStaffAppointmentLine."Resource No.");
                if ProjectStaffAppointmentLine."Resident Engineer" = false then
                    Report.SaveAs(Report::"Staff appointment lett", '', ReportFormat::PDF, Outs, RecRef)
                else
                    if ProjectStaffAppointmentLine."Resident Engineer" = true then
                        Report.SaveAs(Report::"RE Staff Appointment Letter", '', ReportFormat::PDF, Outs, RecRef);
                TempBlob.CreateInstream(DocStream);
                Recepients.Add(CustEmail);
                Vendors.Reset();
                Vendors.SetRange("No.", ProjectStaffVoucher."Contractor No.");
                if Vendors.FindFirst() then begin
                    CCRecepients.Add(Vendors."E-Mail");
                end;
                Mail.Create(Recepients, emailhdr, Body, true, CCRecepients, BCCRecepients);
                Mail.AddAttachment('Staff appointment letter.pdf', 'PDF', DocStream);
                if Email.Send(Mail) then
                    Message('Notified Successfully');

                recRef.close;
                SendingDate := Today;
                SendingTime := Time;
                Sleep(1000);
                Window.Close;

            until ProjectStaffAppointmentLine.Next = 0;
            //  end;
            // until ResourceSupervisor.Next = 0;
        end;

    end;


    procedure FnNotifyPDEUserDirectorate(SurveyRequestHeader: Record "Survey Request Header")
    var
        "Code": Code[10];
        ProcurementSetup: Record "Procurement Setup";
        IFPResponseLine: Record "IFP Response Line";
        Vendors: Record Vendor;
        InsCoverageLedgerEntry: Record "Ins. Coverage Ledger Entry";
        InsuranceReg: Record Insurance;
        Window: Dialog;
        EmailBody: array[2] of Text[30];
        BodyText: Text[250];
        mymail: Codeunit Mail;
        WindowisOpen: Boolean;
        FileDialog: Codeunit Mail;
        SendingDate: Date;
        SendingTime: Time;
        Counter: Integer;
        cu400: Codeunit Mail;
        SenderAddress: Text[100];
        UserSetup: Record "User Setup";
        HRSetup: Record "Human Resources Setup";
        CompInfo: Record "Company Information";
        RequesterName: Text[2048];
        RequesterEmail: Text[100];
        emailhdr: Text[100];
        ProcNote: Text[1000];
        LoginDetails: Text[1000];
        CustEmail: Text[100];
        CompanyDetails: Text[250];
        SupplierDetails: Text[1000];
        SenderMessage: Text[1000];
        FileDirectory: Text[100];
        FileName: Text[100];
        RFIResponse2: Record "RFI Response";
        RFIResponse: Record "RFI Response";
        IFPResponseLine1: Record "IFP Response Line";
        PurchaseHeader: Record "Purchase Header";
        InternalProjectResource: Record "Internal Project Resource";
        ProjectVendors: Record "Project Vendors";
        ProjectStaffTerminationLine: Record "Project Staff Termination Line";
        ResourceSupervisor: Record "Resource Supervisor";
        ProjectStaffAppointmentLine: Record "Project Staff Appointment Line";
        ResponsibilityCenter: Record "Responsibility Center";
        CCEmail: Text[250];
        ProjectName: Text[250];
        SurveyRequestLine: Record "Survey Request Line";
        StudyType: Text[2048];
    begin
        ResponsibilityCenter.Reset;
        ResponsibilityCenter.SetRange(ResponsibilityCenter.Code, SurveyRequestHeader."Directorate ID");
        if ResponsibilityCenter.FindSet then begin
            ResponsibilityCenter.TestField("E-Mail");
            CustEmail := ResponsibilityCenter."E-Mail";
            RequesterName := ResponsibilityCenter.Name
        end;

        ResponsibilityCenter.Reset;
        ResponsibilityCenter.SetRange(ResponsibilityCenter.PDE, true);
        if ResponsibilityCenter.FindFirst then begin
            ResponsibilityCenter.TestField("E-Mail");
            CCEmail := ResponsibilityCenter."E-Mail";
        end;

        SurveyRequestLine.Reset;
        SurveyRequestLine.SetRange(SurveyRequestLine."Document No.", SurveyRequestHeader."Document No.");
        if SurveyRequestLine.FindFirst then begin
            ProjectName := SurveyRequestLine."Project ID" + ' - ' + SurveyRequestLine."Project Name";
            StudyType := Format(SurveyRequestLine."Study/Survey/Design Type");
        end;

        CompInfo.Get;
        ProcurementSetup.Get;
        ProcurementSetup.TestField("Default Proc Email Contact");
        RequesterEmail := ProcurementSetup."Default Proc Email Contact";
        RequesterName := ProcurementSetup."Default Proc Email Contact";
        Window.Open('Sending........');
        WindowisOpen := true;
        //Create message
        if ProcurementSetup."Default Proc Email Contact" = '' then
            Error('Please Contact the IT Admin to specify the E-mail address under Procurement Setup page!!');
        SenderAddress := ProcurementSetup."Default Proc Email Contact";


        CompanyDetails := 'Dear' + ' ' + 'Sir/Madam' + ',<br>';
        SenderMessage := '<BR>This is to notify you that a' + ' ' + StudyType + ' ' + 'request for ' + ProjectName + '<br/>.';
        SenderMessage := SenderMessage + ' ' + 'has been created. Please login to the ERP and review it.' + '<br/><br/>';

        SupplierDetails := '';
        LoginDetails := 'If you require any assistance, please contact the Authority for more information.<br/>';
        ProcNote := '<BR> Kind Regards,';

        if CustEmail = '' then
            exit;

        emailhdr := UpperCase(CompInfo.Name) + ' REPORT SUBMISSION';
        //cu400.CreateMessage(CompInfo.Name, SenderAddress, CCEmail, emailhdr,
        //CompanyDetails + '<BR></BR>' + SenderMessage + SupplierDetails + LoginDetails, true);
        ////cu400.AddCC(RequesterEmail);

        //cu400.AddCC(CustEmail);
        //cu400.AddBodyline(ProcNote);
        //cu400.Send;
        SendingDate := Today;
        SendingTime := Time;
        Sleep(1000);
        Window.Close;
        Message('Notified Successfully');
    end;

    procedure FnNotifyDirectoratePPApproval(ProcurementPlan: Record "Procurement Plan")
    var
        "Code": Code[10];
        ProcurementSetup: Record "Procurement Setup";
        IFPResponseLine: Record "IFP Response Line";
        Vendors: Record Vendor;
        InsCoverageLedgerEntry: Record "Ins. Coverage Ledger Entry";
        InsuranceReg: Record Insurance;
        Window: Dialog;
        EmailBody: array[2] of Text[30];
        BodyText: Text[250];
        mymail: Codeunit Mail;
        WindowisOpen: Boolean;
        FileDialog: Codeunit Mail;
        SendingDate: Date;
        SendingTime: Time;
        Counter: Integer;
        cu400: Codeunit Mail;
        SenderAddress: Text[100];
        UserSetup: Record "User Setup";
        HRSetup: Record "Human Resources Setup";
        CompInfo: Record "Company Information";
        RequesterName: Text[2048];
        RequesterEmail: Text[100];
        emailhdr: Text[100];
        ProcNote: Text[1000];
        LoginDetails: Text[1000];
        CustEmail: Text[100];
        CompanyDetails: Text[250];
        SupplierDetails: Text[1000];
        SenderMessage: Text[1000];
        FileDirectory: Text[100];
        FileName: Text[100];
        RFIResponse2: Record "RFI Response";
        RFIResponse: Record "RFI Response";
        IFPResponseLine1: Record "IFP Response Line";
        PurchaseHeader: Record "Purchase Header";
        InternalProjectResource: Record "Internal Project Resource";
        ProjectVendors: Record "Project Vendors";
        ProjectStaffTerminationLine: Record "Project Staff Termination Line";
        ResourceSupervisor: Record "Resource Supervisor";
        ProjectStaffAppointmentLine: Record "Project Staff Appointment Line";
        ResponsibilityCenter: Record "Responsibility Center";
        CCEmail: Text[250];
        ProjectName: Text[250];
        SurveyRequestLine: Record "Survey Request Line";
        StudyType: Text[2048];
    begin
        ResponsibilityCenter.Reset;
        /////  ////  ResponsibilityCenter.SetRange(ResponsibilityCenter.Code, ProcurementPlan."Directorate ID");
        if ResponsibilityCenter.FindSet then begin
            ResponsibilityCenter.TestField("E-Mail");
            CustEmail := ResponsibilityCenter."E-Mail";
            RequesterName := ResponsibilityCenter.Name
        end;

        ResponsibilityCenter.Reset;
        ResponsibilityCenter.SetRange(ResponsibilityCenter.PDE, true);
        if ResponsibilityCenter.FindFirst then begin
            ResponsibilityCenter.TestField("E-Mail");
            CCEmail := ResponsibilityCenter."E-Mail";
        end;


        CompInfo.Get;
        ProcurementSetup.Get;
        ProcurementSetup.TestField("Default Proc Email Contact");
        RequesterEmail := ProcurementSetup."Default Proc Email Contact";
        RequesterName := ProcurementSetup."Default Proc Email Contact";
        Window.Open('Sending........');
        WindowisOpen := true;
        //Create message
        if ProcurementSetup."Default Proc Email Contact" = '' then
            Error('Please Contact the IT Admin to specify the E-mail address under Procurement Setup page!!');
        SenderAddress := ProcurementSetup."Default Proc Email Contact";


        CompanyDetails := 'Dear' + ' ' + 'Sir/Madam' + ',<br>';
        SenderMessage := '<BR>This is to notify you that a' + ' ' + StudyType + ' ' + 'request for ' + ProjectName + '<br/>.';
        SenderMessage := SenderMessage + ' ' + 'has been created. Please login to the ERP and review it.' + '<br/><br/>';

        SupplierDetails := '';
        LoginDetails := 'If you require any assistance, please contact the Authority for more information.<br/>';
        ProcNote := '<BR> Kind Regards,';

        if CustEmail = '' then
            exit;

        emailhdr := UpperCase(CompInfo.Name) + ' REPORT SUBMISSION';
        //cu400.CreateMessage(CompInfo.Name, SenderAddress, CCEmail, emailhdr,
        //CompanyDetails + '<BR></BR>' + SenderMessage + SupplierDetails + LoginDetails, true);
        ////cu400.AddCC(RequesterEmail);

        //cu400.AddCC(CustEmail);
        //cu400.AddBodyline(ProcNote);
        //cu400.Send;
        SendingDate := Today;
        SendingTime := Time;
        Sleep(1000);
        Window.Close;
        Message('Notified Successfully');
    end;

    procedure FnUpdatePlanLine(BidTabulationHeader: Record "Bid Tabulation Header")
    var
        StandardPurchaseCode: Record "Standard Purchase Code";
        StandardPurchaseLine: Record "Standard Purchase Line";
        PurchH: Record "Purchase Header";
        PurchL: Record "Purchase Line";
        JobPlanningLine: Record "Job Planning Line";
    begin
        StandardPurchaseCode.Reset;
        StandardPurchaseCode.SetRange(StandardPurchaseCode.Code, BidTabulationHeader."IFS Code");
        if StandardPurchaseCode.FindSet then begin
            PurchL.Reset;
            PurchL.SetRange(PurchL."Document No.", BidTabulationHeader."Awarded Bid No");
            PurchL.SetRange(PurchL."Document Type", PurchL."document type"::Quote);
            if PurchL.FindSet then
                repeat
                    JobPlanningLine.Reset;
                    JobPlanningLine.SetRange(JobPlanningLine."Job No.", StandardPurchaseCode."Project ID");
                    JobPlanningLine.SetRange(JobPlanningLine."No.", PurchL."No.");
                    if JobPlanningLine.FindSet then
                        repeat
                            JobPlanningLine."Unit Cost" := PurchL."Direct Unit Cost";
                            JobPlanningLine.Validate("Unit Cost");
                            JobPlanningLine.Modify(true);

                        until JobPlanningLine.Next = 0;
                until PurchL.Next = 0;
        end;
        Message('Project updated successfully.');
    end;

    procedure FnUpdatePortaUsers(BidTabulationHeader: Record "Bid Tabulation Header")
    var
        StandardPurchaseCode: Record "Standard Purchase Code";
        StandardPurchaseLine: Record "Standard Purchase Line";
        PurchH: Record "Purchase Header";
        PurchL: Record "Purchase Line";
        JobPlanningLine: Record "Job Planning Line";
        ObjJob: Record Job;
        DynasoftPortalUser: Record "Dynasoft Portal User";
        ObjVendor: Record Vendor;
    begin
        StandardPurchaseCode.Reset;
        StandardPurchaseCode.SetRange(StandardPurchaseCode.Code, BidTabulationHeader."IFS Code");
        if StandardPurchaseCode.FindSet then begin
            ObjJob.Reset;
            ObjJob.SetRange(ObjJob."No.", StandardPurchaseCode."Project ID");
            if ObjJob.FindSet then begin
                if ObjJob."Type of Project" = ObjJob."type of project"::"Survey/Study" then begin
                    DynasoftPortalUser.Reset;
                    DynasoftPortalUser.SetRange(DynasoftPortalUser."Record ID", BidTabulationHeader."Awarded Bidder No.");
                    if DynasoftPortalUser.FindSet then begin
                        DynasoftPortalUser."Login Type" := DynasoftPortalUser."login type"::Consultant;
                        DynasoftPortalUser.Modify(true);
                    end else begin
                        DynasoftPortalUser."Login Type" := DynasoftPortalUser."login type"::Normal;
                        DynasoftPortalUser.Modify(true);
                    end;
                end;
            end;
        end;
        Message('Updated successfully.');
    end;

    procedure FnGetImprestCommittedAmount(Pay: Record "Imprest Memo"; AccountNo: Code[40]): Decimal
    var
        ImprestLines: Record "Imprest Lines";
        CommEntry: Record "Commitment Entries1";
    begin
        CommEntry.Reset;
        CommEntry.SetRange(CommEntry."Account No.", AccountNo);
        CommEntry.SetRange(CommEntry."Budget Year", Pay.Job);
        CommEntry.CalcSums(Amount);
        exit(CommEntry.Amount);
    end;

    procedure FnGetBudgetedAmountImprest(ObjPay: Record payments; ObjImpLines: Record "Imprest Lines"): Decimal
    var
        BudgetedAmountImprest: Decimal;
    begin
        BudgetedAmountImprest := 0;
        ObjImpLines.Reset;
        ObjImpLines.SetRange(ObjImpLines.No, ObjPay."No.");
        if ObjImpLines.FindSet then
            repeat
                GLBudgetEntry.Reset;
                // GLBudgetEntry.SETRANGE(GLBudgetEntry."Global Dimension 1 Code",ObjImpLines."Global Dimension 1 Code");
                //GLBudgetEntry.SETRANGE(GLBudgetEntry."Global Dimension 2 Code",ObjImpLines."Global Dimension 2 Code");
                GLBudgetEntry.SetRange(GLBudgetEntry."G/L Account No.", ObjImpLines."Account No.");
                // GLBudgetEntry.SetRange("Budget Name", ObjPay.Job);
                GLBudgetEntry.CalcSums(Amount);
                BudgetedAmountImprest := GLBudgetEntry.Amount;

            until ObjImpLines.Next = 0;
        exit(BudgetedAmountImprest);
    end;


    procedure FnImprestCommittmentProjectMembers(var ImprestHeader: Record "Imprest Memo")
    var
        ImprestLines: Record "Imprest Lines";
        Committments: Record "Commitment Entries1";
        EntryNo: Integer;
        BudgetAmount: Decimal;
        Expenses: Decimal;
        BudgetAvailable: Decimal;
        CommittedAmount: Decimal;
        CommitmentEntries: Record "Commitment Entries1";
        GenLedSetup: Record "General Ledger Setup";
        GLAccount: Record "G/L Account";
        Customer: Record Customer;
        BudgetBal: Decimal;
        CommittedAmntSoFar: Decimal;
        WorkCode: Code[30];
        comm: Record "Commitment Entries1";
        EntryN: Integer;
        ProjectMembers: Record "Project Members";
    begin
        CSSetup.Get();
        ProjectMembers.Reset;
        ProjectMembers.SetRange(ProjectMembers."Imprest Memo No.", ImprestHeader."No.");
        if ProjectMembers.FindSet then
            repeat
                comm.Reset;
                if comm.FindLast then begin
                    if comm."Entry No" = 0 then
                        EntryNo := 1
                    else
                        EntryNo := comm."Entry No" + 1;
                end else
                    EntryNo := 1;

                Committments.Init;
                Committments."Entry No" := EntryNo;
                Committments."Commitment No" := ImprestHeader."No.";
                Committments.Type := Committments.Type::Committed;
                Committments."Commitment Type" := Committments."commitment type"::IMPREST;
                Committments."Commitment Date" := ImprestHeader.Date;
                Committments."Global Dimension 1 Code" := ImprestHeader."Shortcut Dimension 1 Code";
                Committments."Global Dimension 2 Code" := ImprestHeader."Shortcut Dimension 2 Code";
                Committments."User ID" := UserId;
                Committments."Document No." := ImprestHeader."No.";
                Committments."Account Type" := Committments."account type"::"G/L Account";
                Committments.Job := ImprestHeader.Job;
                Committments.Amount := ProjectMembers."Total Entitlement";
                Committments."Job Task No" := ImprestHeader."Job  Task";
                Committments."Account No." := ProjectMembers."Vote Item";
                Committments."Account Name" := ProjectMembers."Vote Item Desc.";
                Committments."Budget Year" := CSSetup."Current Budget";
                Committments."Budget Line" := ProjectMembers."Vote Item";
                if ImprestHeader.Subject <> '' then
                    Committments.Description := ImprestHeader.Subject
                else
                    Committments.Description := ImprestHeader."Destination Name";
                Committments.Insert;
            until ProjectMembers.Next = 0;
    end;


    procedure FnImprestCommittmentCasuals(var ImprestHeader: Record "Imprest Memo")
    var
        ImprestLines: Record "Imprest Lines";
        Committments: Record "Commitment Entries1";
        EntryNo: Integer;
        BudgetAmount: Decimal;
        Expenses: Decimal;
        BudgetAvailable: Decimal;
        CommittedAmount: Decimal;
        CommitmentEntries: Record "Commitment Entries1";
        GenLedSetup: Record "General Ledger Setup";
        GLAccount: Record "G/L Account";
        Customer: Record Customer;
        BudgetBal: Decimal;
        CommittedAmntSoFar: Decimal;
        WorkCode: Code[30];
        comm: Record "Commitment Entries1";
        EntryN: Integer;
        Casuals: Record Casuals;
    begin
        CSSetup.Get();
        Casuals.Reset;
        Casuals.SetRange(Casuals."Imprest Memo No.", ImprestHeader."No.");
        if Casuals.FindSet then
            repeat
                comm.Reset;
                if comm.FindLast then begin
                    if comm."Entry No" = 0 then
                        EntryNo := 1
                    else
                        EntryNo := comm."Entry No" + 1;
                end else
                    EntryNo := 1;

                Committments.Init;
                Committments."Entry No" := EntryNo;
                Committments."Commitment No" := ImprestHeader."No.";
                Committments.Type := Committments.Type::Committed;
                Committments."Commitment Type" := Committments."commitment type"::IMPREST;
                Committments."Commitment Date" := ImprestHeader.Date;
                Committments."Global Dimension 1 Code" := ImprestHeader."Shortcut Dimension 1 Code";
                Committments."Global Dimension 2 Code" := ImprestHeader."Shortcut Dimension 2 Code";
                Committments."User ID" := UserId;
                Committments."Document No." := ImprestHeader."No.";
                Committments."Account Type" := Committments."account type"::"G/L Account";
                Committments.Job := Casuals.Job;
                Committments.Amount := Casuals.Amount;
                Committments."Job Task No" := Casuals."Job  Task";
                Committments."Account No." := Casuals."G/L Account";
                if Committments."Account No." <> '' then begin
                    GLAccount.Reset;
                    GLAccount.SetRange(GLAccount."No.", Committments."Account No.");
                    if GLAccount.FindSet then
                        Committments."Account Name" := GLAccount.Name;
                end;
                Committments."Budget Year" := CSSetup."Current Budget";
                Committments."Budget Line" := Casuals."G/L Account";
                if Casuals.Activity <> '' then
                    Committments.Description := Casuals.Activity
                else
                    Committments.Description := ImprestHeader.Subject;
                Committments.Insert;
            until Casuals.Next = 0;
    end;


    procedure FnImprestCommittmentOtherCosts(var ImprestHeader: Record "Imprest Memo")
    var
        ImprestLines: Record "Imprest Lines";
        Committments: Record "Commitment Entries1";
        EntryNo: Integer;
        BudgetAmount: Decimal;
        Expenses: Decimal;
        BudgetAvailable: Decimal;
        CommittedAmount: Decimal;
        CommitmentEntries: Record "Commitment Entries1";
        GenLedSetup: Record "General Ledger Setup";
        GLAccount: Record "G/L Account";
        Customer: Record Customer;
        BudgetBal: Decimal;
        CommittedAmntSoFar: Decimal;
        WorkCode: Code[30];
        comm: Record "Commitment Entries1";
        EntryN: Integer;
        OtherCosts: Record "Other Costs";
    begin
        CSSetup.Get();
        OtherCosts.Reset;
        OtherCosts.SetRange(OtherCosts."Imprest Memo No.", ImprestHeader."No.");
        if OtherCosts.FindSet then
            repeat
                comm.Reset;
                if comm.FindLast then begin
                    if comm."Entry No" = 0 then
                        EntryNo := 1
                    else
                        EntryNo := comm."Entry No" + 1;
                end else
                    EntryNo := 1;

                Committments.Init;
                Committments."Entry No" := EntryNo;
                Committments."Commitment No" := ImprestHeader."No.";
                Committments.Type := Committments.Type::Committed;
                Committments."Commitment Type" := Committments."commitment type"::IMPREST;
                Committments."Commitment Date" := ImprestHeader.Date;
                Committments."Global Dimension 1 Code" := ImprestHeader."Shortcut Dimension 1 Code";
                Committments."Global Dimension 2 Code" := ImprestHeader."Shortcut Dimension 2 Code";
                Committments."User ID" := UserId;
                Committments."Document No." := ImprestHeader."No.";
                Committments."Account Type" := Committments."account type"::"G/L Account";
                Committments.Job := OtherCosts.Job;
                Committments.Amount := OtherCosts."Line Amount";
                Committments."Job Task No" := OtherCosts."Job  Task";
                Committments."Account No." := OtherCosts."Type of Expense";
                if Committments."Account No." <> '' then begin
                    GLAccount.Reset;
                    GLAccount.SetRange(GLAccount."No.", Committments."Account No.");
                    if GLAccount.FindSet then
                        Committments."Account Name" := GLAccount.Name;
                end;
                //        Committments."Account Name":=ImprestLines."Account Name";
                Committments."Budget Year" := CSSetup."Current Budget";
                Committments."Budget Line" := OtherCosts."Type of Expense";
                if OtherCosts.Description <> '' then
                    Committments.Description := OtherCosts.Description
                else
                    Committments.Description := ImprestHeader.Subject;
                Committments.Insert;
            until OtherCosts.Next = 0;
    end;

    procedure FnGetImprestMemoCommittedAmount(Pay: Record "Imprest Memo"; AccountNo: Code[40]): Decimal
    var
        ImprestLines: Record "Project Members";
        CommEntry: Record "Commitment Entries1";
    begin
        CSSetup.Get();
        CommEntry.Reset;
        CommEntry.SetRange(CommEntry."Account No.", AccountNo);
        CommEntry.SetRange(CommEntry."Budget Year", CSSetup."Current Budget");
        //CommEntry.SETRANGE(CommEntry.Type,CommEntry.Type::Committed
        CommEntry.CalcSums(Amount);
        exit(CommEntry.Amount);
    end;

    procedure FnGetBudgetedAmountImprestMemoProjectMembers(ObjPay: Record "Imprest Memo"; ObjImpLines: Record "Project Members"): Decimal
    var
        BudgetedAmountImprest: Decimal;
    begin
        CSSetup.Get();
        BudgetedAmountImprest := 0;
        ObjImpLines.Reset;
        ObjImpLines.SetRange(ObjImpLines."Imprest Memo No.", ObjPay."No.");
        if ObjImpLines.FindSet then
            repeat
                GLBudgetEntry.Reset;
                GLBudgetEntry.SetRange(GLBudgetEntry."Global Dimension 1 Code", ObjPay."Shortcut Dimension 1 Code");
                //GLBudgetEntry.SETRANGE(GLBudgetEntry."Global Dimension 2 Code",ObjImpLines."Global Dimension 2 Code");
                GLBudgetEntry.SetRange(GLBudgetEntry."G/L Account No.", ObjImpLines."Vote Item");
                GLBudgetEntry.SetRange("Budget Name", CSSetup."Current Budget");
                GLBudgetEntry.CalcSums(Amount);
                //MESSAGE('This is the amount %1',GLBudgetEntry.Amount);
                BudgetedAmountImprest := GLBudgetEntry.Amount;

            until ObjImpLines.Next = 0;
        exit(BudgetedAmountImprest);
    end;

    procedure FnGetBudgetedAmountImprestMemoCasuals(ObjPay: Record "Imprest Memo"; ObjImpLines: Record Casuals): Decimal
    var
        BudgetedAmountImprest: Decimal;
    begin
        BudgetedAmountImprest := 0;
        CSSetup.Get();
        ObjImpLines.Reset;
        ObjImpLines.SetRange(ObjImpLines."Imprest Memo No.", ObjPay."No.");
        if ObjImpLines.FindSet then
            repeat
                GLBudgetEntry.Reset;
                GLBudgetEntry.SetRange(GLBudgetEntry."Global Dimension 1 Code", ObjPay."Shortcut Dimension 1 Code");
                //GLBudgetEntry.SETRANGE(GLBudgetEntry."Global Dimension 2 Code",ObjImpLines."Global Dimension 2 Code");
                GLBudgetEntry.SetRange(GLBudgetEntry."G/L Account No.", ObjImpLines."G/L Account");
                GLBudgetEntry.SetRange("Budget Name", CSSetup."Current Budget");
                GLBudgetEntry.CalcSums(Amount);
                //MESSAGE('This is the amount %1',GLBudgetEntry.Amount);
                BudgetedAmountImprest := GLBudgetEntry.Amount;

            until ObjImpLines.Next = 0;
        exit(BudgetedAmountImprest);
    end;

    procedure FnGetBudgetedAmountImprestMemoOtherCosts(ObjPay: Record "Imprest Memo"; ObjImpLines: Record "Other Costs"): Decimal
    var
        BudgetedAmountImprest: Decimal;
    begin
        BudgetedAmountImprest := 0;
        CSSetup.Get();
        ObjImpLines.Reset;
        ObjImpLines.SetRange(ObjImpLines."Imprest Memo No.", ObjPay."No.");
        if ObjImpLines.FindSet then
            repeat
                GLBudgetEntry.Reset;
                GLBudgetEntry.SetRange(GLBudgetEntry."Global Dimension 1 Code", ObjPay."Shortcut Dimension 1 Code");
                //GLBudgetEntry.SETRANGE(GLBudgetEntry."Global Dimension 2 Code",ObjImpLines."Global Dimension 2 Code");
                GLBudgetEntry.SetRange(GLBudgetEntry."G/L Account No.", ObjImpLines."Type of Expense");
                GLBudgetEntry.SetRange("Budget Name", CSSetup."Current Budget");
                GLBudgetEntry.CalcSums(Amount);
                //MESSAGE('This is the amount %1',GLBudgetEntry.Amount);
                BudgetedAmountImprest := GLBudgetEntry.Amount;

            until ObjImpLines.Next = 0;
        exit(BudgetedAmountImprest);
    end;

    procedure FnNotifyApproverWorksPRN(PurchaseHeader: Record "Purchase Header")
    var
        ContractCirTeam: Record "Purchase Contract Cir Team";
        RecordLink: Record "Record Link";
        SMTPMailSetup1: Record "Email Account";
        ProjectMeetingAttendance: Record "Project Meeting Attendance";
        ProjectMeetingRegister: Record "Project Meeting Register";
        MeetingRegister: Record "Project Meeting Register";
        InsCoverageLedgerEntry: Record "Ins. Coverage Ledger Entry";
        InsuranceReg: Record Insurance;
        Window: Dialog;
        EmailBody: array[2] of Text[30];
        BodyText: Text[250];
        mymail: Codeunit Mail;
        WindowisOpen: Boolean;
        FileDialog: Codeunit Mail;
        SendingDate: Date;
        SendingTime: Time;
        Counter: Integer;
        cu400: Codeunit Mail;
        SenderAddress: Text[100];
        UserSetup: Record "User Setup";
        HRSetup: Record "Human Resources Setup";
        CompInfo: Record "Company Information";
        RequesterName: Text[100];
        RequesterEmail: Text[100];
        emailhdr: Text[100];
        ProcNote: Text[1000];
        LoginDetails: Text[1000];
        CustEmail: Text[100];
        CompanyDetails: Text[250];
        SupplierDetails: Text[1000];
        SenderMessage: Text[1000];
        FileDirectory: Text[100];
        FileName: Text[100];
        PurchaseHead: Record "Purchase Header";
        SerialNumber: Integer;
        SerialNamba: Integer;
        Vendor: Record Vendor;
        ObjEmployee: Record Employee;
    begin
        SMTPMailSetup1.Get;
        CompInfo.Get;
        HRSetup.Get;
        SerialNumber := 1;
        RequesterName := ContractCirTeam.Email;
        SenderAddress := CompInfo."E-Mail";
        Window.Open('Sending........');
        WindowisOpen := true;
        UserSetup.Reset;
        UserSetup.SetFilter(UserSetup."User ID", '%1|%2|%3|%4|%5', PurchaseHeader."First Approver ID", PurchaseHeader."Second Approver ID", PurchaseHeader."Third Approver ID", PurchaseHeader."Fourth Approver ID", PurchaseHeader."Fifth Approver ID");
        if UserSetup.FindSet then begin
            UserSetup.TestField("Employee No.");
            ObjEmployee.Reset;
            ObjEmployee.SetRange(ObjEmployee."No.", UserSetup."Employee No.");
            if ObjEmployee.FindSet then begin
                ObjEmployee.TestField("Company E-Mail");
                CustEmail := ObjEmployee."Company E-Mail";
            end;
        end;
        CompanyDetails := 'Dear ' + ObjEmployee."First Name" + ' ' + ObjEmployee."Middle Name" + ' ' + ObjEmployee."Last Name" + ' ,';
        SenderMessage := '<BR>You are hereby notified of a works' + ' ' + Format(PurchaseHeader."Document Type") + ' ' + PurchaseHeader."No." + ' ' + 'requiring your approval.' + '</BR> ';
        SenderMessage := SenderMessage + ' ' + 'Kindly login to the erp and review.' + '</br>';

        if CustEmail = '' then
            exit;

        emailhdr := 'WORKS PRN: ' + PurchaseHeader."No.";
        //cu400.CreateMessage(CompInfo.Name, SenderAddress, CustEmail, emailhdr,
        //CompanyDetails + '<BR></BR>' + SenderMessage + SupplierDetails, true);

        //cu400.AddBodyline(ProcNote);
        //cu400.Send;
        SendingDate := Today;
        SendingTime := Time;
        Sleep(1000);
        Window.Close;
        Message('Notified Successfully');

    end;


    procedure FnNotifyContractorProjectProfessionalOpinion(var PEVal: Record "Project Evaluation Header")
    var
        BidEvaluationCommittee: Record "Bid Evaluation Committee";
        AddendumNotice1: Record "Tender Addendum Notice";
        PurcHeader: Record "Purchase Header";
        SMTPMailSetup: Record "Email Account";
        AddendumAmendment: Record "Tender Addendum Amendment";
        ObjVend: Record Vendor;
        IFSList: Record "Standard Purchase Code";
        SupplierReq: Record Contact;
        LastFieldNo: Integer;
        FooterPrinted: Boolean;
        FileDirectory: Text[100];
        FileName: Text[100];
        ReportID: Integer;
        //"Object": Record "Object";
        Window: Dialog;
        RunOnceFile: Text[1000];
        TimeOut: Integer;
        Customer2: Record Customer;
        Cust: Record Customer;
        cr: Integer;
        lf: Integer;
        EmailBody: array[2] of Text[30];
        BodyText: Text[250];
        mymail: Codeunit Mail;
        DefaultPrinter: Text[200];
        WindowisOpen: Boolean;
        FileDialog: Codeunit Mail;
        SendingDate: Date;
        SendingTime: Time;
        Counter: Integer;
        cu400: Codeunit Mail;
        DocLog: Record "Document E-mail Log";
        BranchName: Code[80];
        DimValue: Record "Dimension Value";
        SenderAddress: Text[100];
        CustEmail: Text[100];
        UserSetup: Record "User Setup";
        HRSetup: Record "Company Information";
        Emp: Record Vendor;
        PayrollMonth: Date;
        PayrollMonthText: Text[30];
        PayPeriodtext: Text;
        PayPeriod: Record "Payroll PeriodX";
        CompInfo: Record "Company Information";
        DateFilter: Text;
        FromDate: Date;
        ToDate: Date;
        FromDateS: Text;
        ToDateS: Text;
        vend: Record Vendor;
        StartDate: Date;
        EndDAte: Date;
        EmailVerifier: Codeunit Payroll3;
        IsEmailValid: Boolean;
        PPayableSetup: Record "Procurement Setup";
        RequesterName: Text[100];
        RequesterEmail: Text[100];
        emailhdr: Text[100];
        CompanyDetails: Text[250];
        SupplierDetails: Text[1000];
        SenderMessage: Text[1000];
        ProcNote: Text[1000];
        LoginDetails: Text[1000];
        PortalUser: Record "Dynasoft Portal User";
        Password: Text[50];
        ActivationDetails: Text[1000];
        RFQReqVendors: Record "Standard Vendor Purchase Code";
        StandardPurchaseCode: Record "Standard Purchase Code";
        RFQReqVendors1: Record "Standard Vendor Purchase Code";
    begin
        ///Notifying Procurement Team on supplier Request
        SMTPMailSetup.Get;
        CompInfo.Get;
        HRSetup.Get;
        PPayableSetup.Get;

        PEVal.TestField("Contractor Rep Email");
        RequesterEmail := PEVal."Contractor Rep Email";
        RequesterName := PEVal."Contractor Name";
        //END;

        Window.Open('Sending...');

        WindowisOpen := true;


        Counter := Counter + 1;

        //Create message
        if HRSetup."E-Mail" = '' then
            Error('Please Contact the IT Admin to specify the E-mail address under Company Information Setup page!!');
        SenderAddress := SMTPMailSetup."Email Address";

        if PPayableSetup."Default Proc Email Contact" = '' then
            Error('Please Contact the IT Admin to specify the Procurement Manager E-mail address under Purchases&Payable Setup page!!');
        CustEmail := PPayableSetup."Default Proc Email Contact";

        CompanyDetails := 'Dear: ' + RequesterName;
        SenderMessage := '<BR>This is to notify you that the professional opinion  for ' + PEVal."Purchase Contract ID" + 'has been approved.  </BR>';
        SenderMessage := SenderMessage + ' ' + '<BR>Please log in to the system and resubmit the revised program of works. ' + '</BR>';
        SupplierDetails := '';
        LoginDetails := '';


        ProcNote := '<BR> If you require any assistance, please contact our Supply Chain Management Team by Phone ' + HRSetup."Phone No." + ' or vendor support team via Email: ' + PPayableSetup."Default Proc Email Contact";
        if CustEmail = '' then
            exit;

        emailhdr := 'PROJECT PROFESSIONAL OPINION APPROVED::' + ' ' + PEVal."Project Name";

        //cu400.CreateMessage(CompInfo.Name, SenderAddress, CustEmail, emailhdr,
        //CompanyDetails + '<BR></BR>' + SenderMessage + SupplierDetails + LoginDetails + ActivationDetails, true);

        //cu400.AddCC(RequesterEmail);
        ////cu400.AddAttachment(FileDirectory+FileName,FileName);
        //cu400.AddBodyline(ProcNote);


        //cu400.Send;
        SendingDate := Today;
        SendingTime := Time;

        Sleep(1000);
        Window.Close;

        //END;
    end;


    procedure FnNotifyRETestMaterialCert(MaterialTestRecord: Record "Material Test Record")
    var
        "Code": Code[10];
        ProcurementSetup: Record "Procurement Setup";
        IFPResponseLine: Record "IFP Response Line";
        Vendors: Record Vendor;
        InsCoverageLedgerEntry: Record "Ins. Coverage Ledger Entry";
        InsuranceReg: Record Insurance;
        Window: Dialog;
        EmailBody: array[2] of Text[30];
        BodyText: Text[250];
        mymail: Codeunit Mail;
        WindowisOpen: Boolean;
        FileDialog: Codeunit Mail;
        SendingDate: Date;
        SendingTime: Time;
        Counter: Integer;
        cu400: Codeunit Mail;
        SenderAddress: Text[100];
        UserSetup: Record "User Setup";
        HRSetup: Record "Human Resources Setup";
        CompInfo: Record "Company Information";
        RequesterName: Text[100];
        RequesterEmail: Text[100];
        emailhdr: Text[100];
        ProcNote: Text[1000];
        LoginDetails: Text[1000];
        CustEmail: Text[100];
        CompanyDetails: Text[250];
        SupplierDetails: Text[1000];
        SenderMessage: Text[1000];
        FileDirectory: Text[100];
        FileName: Text[100];
        RFIResponse2: Record "RFI Response";
        RFIResponse: Record "RFI Response";
        IFPResponseLine1: Record "IFP Response Line";
        PurchaseHeader: Record "Purchase Header";
        InternalProjectResource: Record "Internal Project Resource";
    begin
        InternalProjectResource.Reset;
        InternalProjectResource.SetRange(InternalProjectResource."Project ID", MaterialTestRecord."Project ID");
        InternalProjectResource.SetRange(InternalProjectResource."Role Code", '  I-RE');
        if InternalProjectResource.FindSet then begin
            InternalProjectResource.TestField(Email);
            CustEmail := InternalProjectResource.Email;
        end;

        CompInfo.Get;
        ProcurementSetup.Get;
        RequesterEmail := ProcurementSetup."Default Proc Email Contact";
        RequesterName := ProcurementSetup."Default Proc Email Contact";
        Window.Open('Sending email to Resident Engineer');
        WindowisOpen := true;
        //Create message
        if ProcurementSetup."Default Proc Email Contact" = '' then
            Error('Please Contact the IT Admin to specify the E-mail address under Procurement Setup page!!');
        SenderAddress := ProcurementSetup."Default Proc Email Contact";

        InternalProjectResource.Reset;
        InternalProjectResource.SetRange(InternalProjectResource."Project ID", MaterialTestRecord."Project ID");
        InternalProjectResource.SetRange(InternalProjectResource."Role Code", '  I-RE');
        if InternalProjectResource.FindSet then begin
            CompanyDetails := 'Dear' + ' ' + InternalProjectResource.Name + ',<br>';
            SenderMessage := '<BR>This is to notify you that the a material test certifcate for the project ' + MaterialTestRecord.FnGetProjectName() + '<br/> has been submitted successfully'
            + '<br/><br/>';
            //SenderMessage:=SenderMessage+' '+'Please find attached the acceptance letter.'+'<br/><br/>';
        end;
        SupplierDetails := '';
        LoginDetails := 'If you require any assistance, please contact the Authority for more information.<br/>';
        ProcNote := '<BR> Regards';
        /*FileDirectory :=  'C:\DOCS\';
        FileName := 'Acceptance_Letter'+FinalAccount."Document No"+'.pdf';

        FinalAccount.RESET;
        FinalAccount.SETRANGE("Document No",FinalAccount."Document No");
        IF FinalAccount.FINDSET THEN BEGIN

         //Report.SaveAsPdf(72053,FileDirectory+FileName,FinalAccount);

        END;*/
        if CustEmail = '' then
            exit;

        emailhdr := UpperCase(CompInfo.Name) + UpperCase(Format(MaterialTestRecord."Document Type"));
        //cu400.CreateMessage(CompInfo.Name, SenderAddress, CustEmail, emailhdr,
        //CompanyDetails + '<BR></BR>' + SenderMessage + SupplierDetails + LoginDetails, true);
        ////cu400.AddCC(RequesterEmail);
        ////cu400.AddBodyline(ProcNote);
        ////cu400.AddAttachment(FileDirectory+FileName,FileName);
        //cu400.Send;
        SendingDate := Today;
        SendingTime := Time;
        Sleep(1000);
        Window.Close;
        Message('Notified Successfully');

    end;


    procedure FnNotifyContractorDLPAcknowledgmentLetter(FinalAccount: Record "Final Account")
    var
        "Code": Code[10];
        ProcurementSetup: Record "Procurement Setup";
        IFPResponseLine: Record "IFP Response Line";
        Vendors: Record Vendor;
        InsCoverageLedgerEntry: Record "Ins. Coverage Ledger Entry";
        InsuranceReg: Record Insurance;
        Window: Dialog;
        EmailBody: array[2] of Text[30];
        BodyText: Text[250];
        mymail: Codeunit Mail;
        WindowisOpen: Boolean;
        FileDialog: Codeunit Mail;
        SendingDate: Date;
        SendingTime: Time;
        Counter: Integer;
        cu400: Codeunit Mail;
        SenderAddress: Text[100];
        UserSetup: Record "User Setup";
        HRSetup: Record "Human Resources Setup";
        CompInfo: Record "Company Information";
        RequesterName: Text[100];
        RequesterEmail: Text[100];
        emailhdr: Text[100];
        ProcNote: Text[1000];
        LoginDetails: Text[1000];
        CustEmail: Text[100];
        CompanyDetails: Text[250];
        SupplierDetails: Text[1000];
        SenderMessage: Text[1000];
        FileDirectory: Text[100];
        FileName: Text[100];
        RFIResponse2: Record "RFI Response";
        RFIResponse: Record "RFI Response";
        IFPResponseLine1: Record "IFP Response Line";
        PurchaseHeader: Record "Purchase Header";
        InternalProjectResource: Record "Internal Project Resource";
    begin
        InternalProjectResource.Reset;
        InternalProjectResource.SetRange(InternalProjectResource."Project ID", FinalAccount."Project ID");
        InternalProjectResource.SetRange(InternalProjectResource."Role Code", '  I-RE');
        if InternalProjectResource.FindSet then begin
            InternalProjectResource.TestField(Email);
            CustEmail := InternalProjectResource.Email;
        end;

        CompInfo.Get;
        ProcurementSetup.Get;
        RequesterEmail := ProcurementSetup."Default Proc Email Contact";
        RequesterName := ProcurementSetup."Default Proc Email Contact";
        Window.Open('Sending email to Resident Engineer');
        WindowisOpen := true;
        //Create message
        if ProcurementSetup."Default Proc Email Contact" = '' then
            Error('Please Contact the IT Admin to specify the E-mail address under Procurement Setup page!!');
        SenderAddress := ProcurementSetup."Default Proc Email Contact";

        InternalProjectResource.Reset;
        InternalProjectResource.SetRange(InternalProjectResource."Project ID", FinalAccount."Project ID");
        InternalProjectResource.SetRange(InternalProjectResource."Role Code", '  I-RE');
        if InternalProjectResource.FindSet then begin
            CompanyDetails := 'Dear' + ' ' + InternalProjectResource.Name + ',<br>';
            SenderMessage := '<BR>This is to notify you that the above named project ' + FinalAccount."Project Name" + '<br/> has been closed succefully'
            + '<br/><br/>';
            SenderMessage := SenderMessage + ' ' + 'Please find attached the acknowlwdgement letter.' + '<br/><br/>';
        end;
        SupplierDetails := '';
        LoginDetails := 'If you require any assistance, please contact the Authority for more information.<br/>';
        ProcNote := '<BR> Regards';
        FileDirectory := 'C:\DOCS\';
        FileName := 'Acknowledgement_Letter' + FinalAccount."Document No" + '.pdf';

        FinalAccount.Reset;
        FinalAccount.SetRange("Document No", FinalAccount."Document No");
        if FinalAccount.FindSet then begin

            //Report.SaveAsPdf(72053, FileDirectory + FileName, FinalAccount);

        end;
        if CustEmail = '' then
            exit;

        emailhdr := UpperCase(CompInfo.Name) + ' FINAL ACCOUNT';
        //cu400.CreateMessage(CompInfo.Name, SenderAddress, CustEmail, emailhdr,
        //CompanyDetails + '<BR></BR>' + SenderMessage + SupplierDetails + LoginDetails, true);
        ////cu400.AddCC(RequesterEmail);
        //cu400.AddBodyline(ProcNote);
        //cu400.AddAttachment(FileDirectory + FileName, FileName);
        //cu400.Send;
        SendingDate := Today;
        SendingTime := Time;
        Sleep(1000);
        Window.Close;
        Message('Notified Successfully');
    end;


    procedure FnNotifyRESiteAgentNomination(WEPContractorSubmission: Record "WEP Contractor Submission")
    var
        "Code": Code[10];
        ProcurementSetup: Record "Procurement Setup";
        IFPResponseLine: Record "IFP Response Line";
        Vendors: Record Vendor;
        InsCoverageLedgerEntry: Record "Ins. Coverage Ledger Entry";
        InsuranceReg: Record Insurance;
        Window: Dialog;
        EmailBody: array[2] of Text[30];
        BodyText: Text[250];
        mymail: Codeunit Mail;
        WindowisOpen: Boolean;
        FileDialog: Codeunit Mail;
        SendingDate: Date;
        SendingTime: Time;
        Counter: Integer;
        cu400: Codeunit Mail;
        SenderAddress: Text[100];
        UserSetup: Record "User Setup";
        HRSetup: Record "Human Resources Setup";
        CompInfo: Record "Company Information";
        RequesterName: Text[100];
        RequesterEmail: Text[100];
        emailhdr: Text[100];
        ProcNote: Text[1000];
        LoginDetails: Text[1000];
        CustEmail: Text[100];
        CompanyDetails: Text[250];
        SupplierDetails: Text[1000];
        SenderMessage: Text[1000];
        FileDirectory: Text[100];
        FileName: Text[100];
        RFIResponse2: Record "RFI Response";
        RFIResponse: Record "RFI Response";
        IFPResponseLine1: Record "IFP Response Line";
        PurchaseHeader: Record "Purchase Header";
    begin
        Vendors.Reset;
        Vendors.SetRange("No.", WEPContractorSubmission."Contractor No");
        if Vendors.FindSet then begin
            Vendors.TestField("E-Mail");
            CustEmail := Vendors."E-Mail";
        end;

        CompInfo.Get;
        ProcurementSetup.Get;
        RequesterEmail := ProcurementSetup."Default Proc Email Contact";
        RequesterName := ProcurementSetup."Default Proc Email Contact";
        Window.Open('Sending...');
        WindowisOpen := true;
        //Create message
        if ProcurementSetup."Default Proc Email Contact" = '' then
            Error('Please Contact the IT Admin to specify the E-mail address under Procurement Setup page!!');
        SenderAddress := ProcurementSetup."Default Proc Email Contact";

        CompanyDetails := 'Dear' + ' ' + WEPContractorSubmission."Contractor Name" + ',<br>';
        SenderMessage := '<BR>This is to notify you that a site agent nomination for ' + WEPContractorSubmission."Contractor Name" + '<br/> has been submitted.'
        + '<br/><br/>';
        SupplierDetails := '';
        LoginDetails := 'If you require any assistance, please contact the Authority for more information.<br/>';
        ProcNote := '<BR> Regards';

        if CustEmail = '' then
            exit;

        emailhdr := UpperCase(CompInfo.Name) + ' SITE AGENT APPOINTMENT' + WEPContractorSubmission."Contractor Name";
        //cu400.CreateMessage(CompInfo.Name, SenderAddress, CustEmail, emailhdr,
        //CompanyDetails + '<BR></BR>' + SenderMessage + SupplierDetails + LoginDetails, true);
        ////cu400.AddCC(RequesterEmail);
        //cu400.AddBodyline(ProcNote);
        ////cu400.AddAttachment(FileDirectory+FileName,FileName);
        //cu400.Send;
        SendingDate := Today;
        SendingTime := Time;
        Sleep(1000);
        Window.Close;
        Message('Notified Successfully');
    end;


    procedure FnNotifyREContractorPersonnelAppointment(WEPContractorSubmission: Record "WEP Contractor Submission")
    var
        "Code": Code[10];
        ProcurementSetup: Record "Procurement Setup";
        IFPResponseLine: Record "IFP Response Line";
        Vendors: Record Vendor;
        InsCoverageLedgerEntry: Record "Ins. Coverage Ledger Entry";
        InsuranceReg: Record Insurance;
        Window: Dialog;
        EmailBody: array[2] of Text[30];
        BodyText: Text[250];
        mymail: Codeunit Mail;
        WindowisOpen: Boolean;
        FileDialog: Codeunit Mail;
        SendingDate: Date;
        SendingTime: Time;
        Counter: Integer;
        cu400: Codeunit Mail;
        SenderAddress: Text[2048];
        UserSetup: Record "User Setup";
        HRSetup: Record "Human Resources Setup";
        CompInfo: Record "Company Information";
        RequesterName: Text[100];
        RequesterEmail: Text[100];
        emailhdr: Text[2048];
        ProcNote: Text[1000];
        LoginDetails: Text[1000];
        CustEmail: Text[250];
        CompanyDetails: Text[250];
        SupplierDetails: Text[1000];
        SenderMessage: Text[1000];
        FileDirectory: Text[100];
        FileName: Text[100];
        RFIResponse2: Record "RFI Response";
        RFIResponse: Record "RFI Response";
        IFPResponseLine1: Record "IFP Response Line";
        PurchaseHeader: Record "Purchase Header";
    begin
        Vendors.Reset;
        Vendors.SetRange("No.", WEPContractorSubmission."Contractor No");
        if Vendors.FindSet then begin
            Vendors.TestField("E-Mail");
            CustEmail := Vendors."E-Mail";
        end;

        CompInfo.Get;
        ProcurementSetup.Get;
        RequesterEmail := ProcurementSetup."Default Proc Email Contact";
        RequesterName := ProcurementSetup."Default Proc Email Contact";
        Window.Open('Sending...');
        WindowisOpen := true;
        //Create message
        if ProcurementSetup."Default Proc Email Contact" = '' then
            Error('Please Contact the IT Admin to specify the E-mail address under Procurement Setup page!!');
        SenderAddress := ProcurementSetup."Default Proc Email Contact";

        CompanyDetails := 'Dear' + ' ' + WEPContractorSubmission."Contractor Name" + ',<br>';
        SenderMessage := '<BR>This is to notify you that a contractor Key Personnel appointment for  ' + WEPContractorSubmission."Project Name" + '<br/> has been submitted.'
        + '<br/><br/>';
        SupplierDetails := '';
        LoginDetails := 'If you require any assistance, please contact the Authority for more information.<br/>';
        ProcNote := '<BR> Regards';

        if CustEmail = '' then
            exit;

        emailhdr := UpperCase(CompInfo.Name) + ' CONTRACTOR KEY PERSONNEL APPOINTMENT' + WEPContractorSubmission."Project Name";
        //cu400.CreateMessage(CompInfo.Name, SenderAddress, CustEmail, emailhdr,
        //CompanyDetails + '<BR></BR>' + SenderMessage + SupplierDetails + LoginDetails, true);
        ////cu400.AddCC(RequesterEmail);
        //cu400.AddBodyline(ProcNote);
        ////cu400.AddAttachment(FileDirectory+FileName,FileName);
        //cu400.Send;
        SendingDate := Today;
        SendingTime := Time;
        Sleep(1000);
        Window.Close;
        Message('Notified Successfully');
    end;


    procedure FnNotifyREPlanOfEquipmentDeliveryToSite(WEPContractorSubmission: Record "WEP Contractor Submission")
    var
        "Code": Code[10];
        ProcurementSetup: Record "Procurement Setup";
        IFPResponseLine: Record "IFP Response Line";
        Vendors: Record Vendor;
        InsCoverageLedgerEntry: Record "Ins. Coverage Ledger Entry";
        InsuranceReg: Record Insurance;
        Window: Dialog;
        EmailBody: array[2] of Text[30];
        BodyText: Text[250];
        mymail: Codeunit Mail;
        WindowisOpen: Boolean;
        FileDialog: Codeunit Mail;
        SendingDate: Date;
        SendingTime: Time;
        Counter: Integer;
        cu400: Codeunit Mail;
        SenderAddress: Text[100];
        UserSetup: Record "User Setup";
        HRSetup: Record "Human Resources Setup";
        CompInfo: Record "Company Information";
        RequesterName: Text[100];
        RequesterEmail: Text[100];
        emailhdr: Text[100];
        ProcNote: Text[1000];
        LoginDetails: Text[1000];
        CustEmail: Text[100];
        CompanyDetails: Text[250];
        SupplierDetails: Text[1000];
        SenderMessage: Text[1000];
        FileDirectory: Text[100];
        FileName: Text[100];
        RFIResponse2: Record "RFI Response";
        RFIResponse: Record "RFI Response";
        IFPResponseLine1: Record "IFP Response Line";
        PurchaseHeader: Record "Purchase Header";
    begin
        Vendors.Reset;
        Vendors.SetRange("No.", WEPContractorSubmission."Contractor No");
        if Vendors.FindSet then begin
            Vendors.TestField("E-Mail");
            CustEmail := Vendors."E-Mail";
        end;

        CompInfo.Get;
        ProcurementSetup.Get;
        RequesterEmail := ProcurementSetup."Default Proc Email Contact";
        RequesterName := ProcurementSetup."Default Proc Email Contact";
        Window.Open('Sending...');
        WindowisOpen := true;
        //Create message
        if ProcurementSetup."Default Proc Email Contact" = '' then
            Error('Please Contact the IT Admin to specify the E-mail address under Procurement Setup page!!');
        SenderAddress := ProcurementSetup."Default Proc Email Contact";

        CompanyDetails := 'Dear' + ' ' + WEPContractorSubmission."Contractor Name" + ',<br>';
        SenderMessage := '<BR>This is to notify you that a plan of equipment delivery to site for  ' + WEPContractorSubmission."Project Name" + '<br/> has been submitted.'
        + '<br/><br/>';
        SupplierDetails := '';
        LoginDetails := 'If you require any assistance, please contact the Authority for more information.<br/>';
        ProcNote := '<BR> Regards';

        if CustEmail = '' then
            exit;

        emailhdr := UpperCase(CompInfo.Name) + ' PLAN OF EQUIPMENT DELIVERY TO SITE:' + WEPContractorSubmission."Project Name";
        //cu400.CreateMessage(CompInfo.Name, SenderAddress, CustEmail, emailhdr,
        //CompanyDetails + '<BR></BR>' + SenderMessage + SupplierDetails + LoginDetails, true);
        ////cu400.AddCC(RequesterEmail);
        //cu400.AddBodyline(ProcNote);
        ////cu400.AddAttachment(FileDirectory+FileName,FileName);
        //cu400.Send;
        SendingDate := Today;
        SendingTime := Time;
        Sleep(1000);
        Window.Close;
        Message('Notified Successfully');
    end;


    procedure FnNotifyREInsuranceOfWorks(var Ins: Record "Insurance/Guarantee Header")
    var
        BidEvaluationCommittee: Record "Bid Evaluation Committee";
        AddendumNotice1: Record "Tender Addendum Notice";
        PurcHeader: Record "Purchase Header";
        SMTPMailSetup: Record "Email Account";
        AddendumAmendment: Record "Tender Addendum Amendment";
        ObjVend: Record Vendor;
        IFSList: Record "Standard Purchase Code";
        SupplierReq: Record Contact;
        LastFieldNo: Integer;
        FooterPrinted: Boolean;
        FileDirectory: Text[100];
        FileName: Text[100];
        ReportID: Integer;
        //"Object": Record "Object";
        Window: Dialog;
        RunOnceFile: Text[1000];
        TimeOut: Integer;
        Customer2: Record Customer;
        Cust: Record Customer;
        cr: Integer;
        lf: Integer;
        EmailBody: array[2] of Text[30];
        BodyText: Text[250];
        mymail: Codeunit Mail;
        DefaultPrinter: Text[200];
        WindowisOpen: Boolean;
        FileDialog: Codeunit Mail;
        SendingDate: Date;
        SendingTime: Time;
        Counter: Integer;
        cu400: Codeunit Mail;
        DocLog: Record "Document E-mail Log";
        BranchName: Code[80];
        DimValue: Record "Dimension Value";
        SenderAddress: Text[100];
        CustEmail: Text[100];
        UserSetup: Record "User Setup";
        HRSetup: Record "Company Information";
        Emp: Record Vendor;
        PayrollMonth: Date;
        PayrollMonthText: Text[30];
        PayPeriodtext: Text;
        PayPeriod: Record "Payroll PeriodX";
        CompInfo: Record "Company Information";
        DateFilter: Text;
        FromDate: Date;
        ToDate: Date;
        FromDateS: Text;
        ToDateS: Text;
        vend: Record Vendor;
        StartDate: Date;
        EndDAte: Date;
        EmailVerifier: Codeunit Payroll3;
        IsEmailValid: Boolean;
        PPayableSetup: Record "Procurement Setup";
        RequesterName: Text[100];
        RequesterEmail: Text[100];
        emailhdr: Text[100];
        CompanyDetails: Text[250];
        SupplierDetails: Text[1000];
        SenderMessage: Text[1000];
        ProcNote: Text[1000];
        LoginDetails: Text[1000];
        PortalUser: Record "Dynasoft Portal User";
        Password: Text[50];
        ActivationDetails: Text[1000];
        RFQReqVendors: Record "Standard Vendor Purchase Code";
        StandardPurchaseCode: Record "Standard Purchase Code";
        RFQReqVendors1: Record "Standard Vendor Purchase Code";
    begin
        Vendor.Reset;
        Vendor.SetRange(Vendor."No.", Ins."Contractor ID");
        if Vendor.FindSet then begin
            Vendor.TestField("E-Mail");
            RequesterEmail := Vendor."E-Mail";
            RequesterName := Vendor.Name;
        end;
        //Ins.TESTFIELD("Verified Insurer Email Address");

        SMTPMailSetup.Get;
        CompInfo.Get;
        HRSetup.Get;
        PPayableSetup.Get;


        // RequesterEmail:=Ins."Verified Insurer Email Address";
        // RequesterName:=Ins."Insurer/Guarantor Name";

        Window.Open('Sending...');

        WindowisOpen := true;


        Counter := Counter + 1;

        //Create message
        if HRSetup."E-Mail" = '' then
            Error('Please Contact the IT Admin to specify the E-mail address under Company Information Setup page!!');
        SenderAddress := SMTPMailSetup."Email Address";

        if PPayableSetup."Default Proc Email Contact" = '' then
            Error('Please Contact the IT Admin to specify the Procurement Manager E-mail address under Purchases&Payable Setup page!!');
        CustEmail := PPayableSetup."Default Proc Email Contact";

        CompanyDetails := 'Dear: ' + RequesterName;
        SenderMessage := '<BR>This is to notify you that ' + Ins."Contractor Name" + ' ' + 'has submitted ' + Format(Ins."Document Type") + '  </BR>';
        //SenderMessage:=SenderMessage+ ' '+'<BR>issued by your Institution.Reference No '+Ins."Policy/Guarantee No"+' Amount of '+FORMAT(Ins."Amount Insured/Guaranteed")+'.Please confirm via the dg.kerra@go.ke  </BR>';
        SupplierDetails := '';
        LoginDetails := '';


        ProcNote := '<BR> This is a system generated email and you are advised to reply via the above email.';
        FileDirectory := 'C:\DOCS\';
        FileName := 'Insurance_Guarantee.pdf';

        // Ins.RESET;
        // Ins.SETRANGE(Ins."Document No.",Ins."Document No.");
        // IF Ins.FINDSET THEN BEGIN
        //   //Report.SaveAsPdf(72072,FileDirectory+FileName,Ins);
        // END;
        if CustEmail = '' then
            exit;
        //MESSAGE:='This is to notify you that there has been a request for Registration ' +  SupplierRequest."No." + ' From Supplier'+ SupplierRequest.Name;
        emailhdr := 'INSURANCE OF WORKS' + Ins."Project Name";

        //cu400.CreateMessage(CompInfo.Name, SenderAddress, CustEmail, emailhdr,
        //CompanyDetails + '<BR></BR>' + SenderMessage + SupplierDetails + LoginDetails + ActivationDetails, true);

        //cu400.AddCC(RequesterEmail);
        //cu400.AddAttachment(FileDirectory + FileName, FileName);
        //cu400.AddBodyline(ProcNote);


        //cu400.Send;
        SendingDate := Today;
        SendingTime := Time;

        Sleep(1000);
        Window.Close;

        //END;
        //UNTIL BidEvaluationCommittee.NEXT=0;
        //END;
    end;

    procedure FnNotifyContractorAdvancePaymentFullRecovery(DocumentNo: Code[30]; ContractorID: Code[50]; Pay: Record payments; PVLines: Record "PV Lines")
    var
        "Code": Code[10];
        ProcurementSetup: Record "Procurement Setup";
        IFPResponseLine: Record "IFP Response Line";
        Vendors: Record Vendor;
        InsCoverageLedgerEntry: Record "Ins. Coverage Ledger Entry";
        InsuranceReg: Record Insurance;
        Window: Dialog;
        EmailBody: array[2] of Text[30];
        BodyText: Text[250];
        mymail: Codeunit Mail;
        WindowisOpen: Boolean;
        FileDialog: Codeunit Mail;
        SendingDate: Date;
        SendingTime: Time;
        Counter: Integer;
        cu400: Codeunit Mail;
        SenderAddress: Text[100];
        UserSetup: Record "User Setup";
        HRSetup: Record "Human Resources Setup";
        CompInfo: Record "Company Information";
        RequesterName: Text[100];
        RequesterEmail: Text[100];
        emailhdr: Text[100];
        ProcNote: Text[1000];
        LoginDetails: Text[1000];
        CustEmail: Text[100];
        CompanyDetails: Text[250];
        SupplierDetails: Text[1000];
        SenderMessage: Text[1000];
        FileDirectory: Text[100];
        FileName: Text[100];
        RFIResponse2: Record "RFI Response";
        RFIResponse: Record "RFI Response";
        IFPResponseLine1: Record "IFP Response Line";
        CCCustEmail: Text[250];
    begin
        CompInfo.Get;
        ProcurementSetup.Get;
        RequesterEmail := ProcurementSetup."Default Proc Email Contact";
        RequesterName := ProcurementSetup."Default Proc Email Contact";
        Window.Open('Sending...');
        WindowisOpen := true;
        //Create message
        if ProcurementSetup."Default Proc Email Contact" = '' then
            Error('Please Contact the IT Admin to specify the E-mail address under Procurement Setup page!!');
        SenderAddress := ProcurementSetup."Default Proc Email Contact";
        Vendor.Reset;
        Vendor.SetRange("No.", ContractorID);
        if Vendor.FindSet then begin
            Vendor.TestField("E-Mail");
            CustEmail := Vendor."E-Mail";
            //MESSAGE(CustEmail);
        end;
        CompanyDetails := 'Dear Sir/Madam,<br>';
        SenderMessage := '<BR>Your advance has been fully recovered. Please apply for the release of your advance guarantee.' + '<br/>';
        //SenderMessage:=SenderMessage+ ' '+'<BR>will Expire Tomorrow.'+'<br/>';
        //SenderMessage:=SenderMessage+ ' '+'<BR>Kindly Note that after expiry you will not have access to the Contractors Hub Portal'+'<br/>';
        SupplierDetails := '';
        LoginDetails := 'If you require any assistance, please contact the Resident Engineer Office.<br/>';
        ProcNote := '<BR> Regards';
        if CustEmail = '' then
            exit;
        ResponsibilityCenter.Reset;
        ResponsibilityCenter.SetRange(ResponsibilityCenter.Code, Pay."Directorate Code");
        if ResponsibilityCenter.FindSet then begin
            ResponsibilityCenter.TestField("E-Mail");
            CCCustEmail := ResponsibilityCenter."E-Mail";
            // RequesterName:=ResponsibilityCenter.Name
        end;

        emailhdr := PVLines."Account Name" + PVLines."Project No" + ' ' + Format('FULL ADVANCE RECOVERY:');
        //cu400.CreateMessage(CompInfo.Name, SenderAddress, CustEmail, emailhdr,
        //CompanyDetails + '<BR></BR>' + SenderMessage + SupplierDetails + LoginDetails, true);
        //cu400.AddCC(CCCustEmail);
        //cu400.AddBodyline(ProcNote);
        ////cu400.AddAttachment(FileDirectory+FileName,FileName);
        //cu400.Send;
        SendingDate := Today;
        SendingTime := Time;
        Sleep(1000);
        Window.Close;
        Message('Notified Successfully');
    end;


    procedure FnNotifyPDEUserDirectorateAdvancePaymentFullRecovery(ObjPay: Record payments)
    var
        "Code": Code[10];
        ProcurementSetup: Record "Procurement Setup";
        IFPResponseLine: Record "IFP Response Line";
        Vendors: Record Vendor;
        InsCoverageLedgerEntry: Record "Ins. Coverage Ledger Entry";
        InsuranceReg: Record Insurance;
        Window: Dialog;
        EmailBody: array[2] of Text[30];
        BodyText: Text[250];
        mymail: Codeunit Mail;
        WindowisOpen: Boolean;
        FileDialog: Codeunit Mail;
        SendingDate: Date;
        SendingTime: Time;
        Counter: Integer;
        cu400: Codeunit Mail;
        SenderAddress: Text[100];
        UserSetup: Record "User Setup";
        HRSetup: Record "Human Resources Setup";
        CompInfo: Record "Company Information";
        RequesterName: Text[2048];
        RequesterEmail: Text[100];
        emailhdr: Text[100];
        ProcNote: Text[1000];
        LoginDetails: Text[1000];
        CustEmail: Text[100];
        CompanyDetails: Text[250];
        SupplierDetails: Text[1000];
        SenderMessage: Text[1000];
        FileDirectory: Text[100];
        FileName: Text[100];
        RFIResponse2: Record "RFI Response";
        RFIResponse: Record "RFI Response";
        IFPResponseLine1: Record "IFP Response Line";
        PurchaseHeader: Record "Purchase Header";
        InternalProjectResource: Record "Internal Project Resource";
        ProjectVendors: Record "Project Vendors";
        ProjectStaffTerminationLine: Record "Project Staff Termination Line";
        ResourceSupervisor: Record "Resource Supervisor";
        ProjectStaffAppointmentLine: Record "Project Staff Appointment Line";
        ResponsibilityCenter: Record "Responsibility Center";
        CCEmail: Text[250];
        ProjectName: Text[250];
        SurveyRequestLine: Record "Survey Request Line";
        StudyType: Text[2048];
    begin
        ResponsibilityCenter.Reset;
        ResponsibilityCenter.SetRange(ResponsibilityCenter.Code, ObjPay."Directorate Code");
        if ResponsibilityCenter.FindSet then begin
            ResponsibilityCenter.TestField("E-Mail");
            CustEmail := ResponsibilityCenter."E-Mail";
            RequesterName := ResponsibilityCenter.Name
        end;

        ResponsibilityCenter.Reset;
        ResponsibilityCenter.SetRange(ResponsibilityCenter.PDE, true);
        if ResponsibilityCenter.FindFirst then begin
            ResponsibilityCenter.TestField("E-Mail");
            CCEmail := ResponsibilityCenter."E-Mail";
        end;

        //   SurveyRequestLine.RESET;
        //   SurveyRequestLine.SETRANGE(SurveyRequestLine."Document No.",SurveyRequestHeader."Document No.");
        //   IF SurveyRequestLine.FINDFIRST THEN BEGIN
        //    ProjectName:=SurveyRequestLine."Project ID"+' - '+SurveyRequestLine."Project Name";
        //     StudyType:=FORMAT(SurveyRequestLine."Study/Survey/Design Type");
        //     END;

        CompInfo.Get;
        ProcurementSetup.Get;
        ProcurementSetup.TestField("Default Proc Email Contact");
        RequesterEmail := ProcurementSetup."Default Proc Email Contact";
        RequesterName := ProcurementSetup."Default Proc Email Contact";
        Window.Open('Sending........');
        WindowisOpen := true;
        //Create message
        if ProcurementSetup."Default Proc Email Contact" = '' then
            Error('Please Contact the IT Admin to specify the E-mail address under Procurement Setup page!!');
        SenderAddress := ProcurementSetup."Default Proc Email Contact";


        CompanyDetails := 'Dear' + ' ' + 'Sir/Madam' + ',<br>';
        SenderMessage := '<BR>This is to notify you that a' + ' ' + StudyType + ' ' + 'request for ' + ProjectName + '<br/>.';
        SenderMessage := SenderMessage + ' ' + 'has been created. Please login to the ERP and review it.' + '<br/><br/>';

        SupplierDetails := '';
        LoginDetails := 'If you require any assistance, please contact the Authority for more information.<br/>';
        ProcNote := '<BR> Kind Regards,';

        if CustEmail = '' then
            exit;

        emailhdr := UpperCase(CompInfo.Name) + ' REPORT SUBMISSION';
        //cu400.CreateMessage(CompInfo.Name, SenderAddress, CCEmail, emailhdr,
        //CompanyDetails + '<BR></BR>' + SenderMessage + SupplierDetails + LoginDetails, true);
        ////cu400.AddCC(RequesterEmail);

        //cu400.AddCC(CustEmail);
        //cu400.AddBodyline(ProcNote);
        //cu400.Send;
        SendingDate := Today;
        SendingTime := Time;
        Sleep(1000);
        Window.Close;
        Message('Notified Successfully');
    end;


    procedure FnNotifyContractorDLPAcknowledgementLetterNew(TakeOver: Record "Inspection Headersss")
    var
        "Code": Code[10];
        ProcurementSetup: Record "Procurement Setup";
        IFPResponseLine: Record "IFP Response Line";
        Vendors: Record Vendor;
        InsCoverageLedgerEntry: Record "Ins. Coverage Ledger Entry";
        InsuranceReg: Record Insurance;
        Window: Dialog;
        EmailBody: array[2] of Text[30];
        BodyText: Text[250];
        mymail: Codeunit Mail;
        WindowisOpen: Boolean;
        FileDialog: Codeunit Mail;
        SendingDate: Date;
        SendingTime: Time;
        Counter: Integer;
        cu400: Codeunit Mail;
        SenderAddress: Text[100];
        UserSetup: Record "User Setup";
        HRSetup: Record "Human Resources Setup";
        CompInfo: Record "Company Information";
        RequesterName: Text[100];
        RequesterEmail: Text[100];
        emailhdr: Text[100];
        ProcNote: Text[1000];
        LoginDetails: Text[1000];
        CustEmail: Text[100];
        CompanyDetails: Text[250];
        SupplierDetails: Text[1000];
        SenderMessage: Text[1000];
        FileDirectory: Text[100];
        FileName: Text[100];
        RFIResponse2: Record "RFI Response";
        RFIResponse: Record "RFI Response";
        IFPResponseLine1: Record "IFP Response Line";
    begin
        CompInfo.Get;
        ProcurementSetup.Get;
        RequesterEmail := ProcurementSetup."Default Proc Email Contact";
        RequesterName := ProcurementSetup."Default Proc Email Contact";
        Window.Open('Sending...');
        WindowisOpen := true;
        //Create message
        if ProcurementSetup."Default Proc Email Contact" = '' then
            Error('Please Contact the IT Admin to specify the E-mail address under Procurement Setup page!!');
        SenderAddress := ProcurementSetup."Default Proc Email Contact";
        Vendor.Reset;
        Vendor.SetRange(Vendor."No.", TakeOver."Contractor No");
        if Vendor.FindSet then begin
            Vendor.TestField("E-Mail");
            CustEmail := Vendor."E-Mail";
        end;

        FileDirectory := 'C:\DOCS\';
        FileName := 'Acknowledgement_Letter.pdf';
        TakeOver.Reset;
        TakeOver.SetRange(TakeOver."Inspection No", TakeOver."Inspection No");
        TakeOver.SetRange(TakeOver."Inspection Type", TakeOver."Inspection Type");
        if TakeOver.FindSet then begin
            //Report.SaveAsPdf(72093, FileDirectory + FileName, TakeOver);
        end;

        CompanyDetails := 'Dear Sir/Madam,<br>';
        SenderMessage := '<BR>You are hereby notified of ' + Format(TakeOver."Inspection Type") + ' ' + TakeOver."Inspection No" + ' ' + 'dated' + Format(TakeOver."Inspection Date") + '<br/>';
        SenderMessage := SenderMessage + ' ' + '<BR>for the project ' + TakeOver."Project Name" + 'is herein attached.' + '<br/>';
        SupplierDetails := '';
        LoginDetails := 'If you require any assistance, please contact the Resident Engineer Office.<br/>';
        ProcNote := '<BR> Regards';
        if CustEmail = '' then
            exit;

        emailhdr := CompInfo.Name + ' ' + Format(TakeOver."Inspection Type");
        //cu400.CreateMessage(CompInfo.Name, SenderAddress, CustEmail, emailhdr,
        //CompanyDetails + '<BR></BR>' + SenderMessage + SupplierDetails + LoginDetails, true);
        //cu400.AddCC(RequesterEmail);
        //cu400.AddBodyline(ProcNote);
        //cu400.AddAttachment(FileDirectory + FileName, FileName);
        //cu400.Send;
        SendingDate := Today;
        SendingTime := Time;
        Sleep(1000);
        Window.Close;


        Message('Notified Successfully');
    end;


    procedure FnCreatePostQualification(EvaluationHeader: Record "Bid Evaluation Register")
    var
        Bidevaluationscore: Record "Bid Evaluation Score Entry";
        BidSCoreGuide: Record "Bid Score Requirement";
        LineNo: Integer;
        IFSDetails: Record "Standard Vendor Purchase Code";
        ProcuremnetSetup: Record "Procurement Setup";
        IFS: Record "Standard Purchase Code";
        Bids: Record "Purchase Header";
        FinanceLine: Record "Finance Evaluation Line";
        FinalEvalReport: Record "Bid Tabulation Header";
        FinalEvalLine: Record "Bid Tabulation Line";
        BidEvaluationRegister: Record "Bid Evaluation Register";
        VendorPurchaseCode: Record "Standard Vendor Purchase Code";
        Text0011: label 'Are you sure you want to initiate Post Qualification Process?';
        EvaluationH: Record "Bid Evaluation Register";
        FinanceLine2: Record "Finance Evaluation Line";
        EvaluationLine: Record "Finance Evaluation Line";
        EvaluationL: Record "Finance Evaluation Line";
        EvalHeader: Record "Bid Evaluation Register";
        EvalLine: Record "Finance Evaluation Line";
        EvalHeader2: Record "Bid Evaluation Register";
        EvalLine2: Record "Finance Evaluation Line";
        Purchas: Record "Purchase Header";
        PrvEvalNo: Code[30];
        IFS23: Record "Standard Purchase Code";
        Text001: text;
    begin
        Text001 := 'Are you Sure You want to Post?';
        IF NOT ConfirmManagement.GetResponseOrDefault(Text001, TRUE) THEN
            EXIT;
        EvaluationHeader.TESTFIELD("IFS Code");
        EvaluationHeader.TESTFIELD("Tender Evaluation Comm Remarks");
        EvaluationHeader.TESTFIELD("Evaluation Date");
        EvaluationHeader.TESTFIELD("Evaluation Lead");
        //EvaluationHeader.TESTFIELD("Weighted Financial Eval Score");
        //EvaluationHeader.TESTFIELD("Award Decision");


        EvaluationHeader.Posted := TRUE;
        EvaluationHeader."Posted By" := USERID;
        EvaluationHeader."Posted Date" := TODAY;

        FinanceLine.RESET;
        FinanceLine.SETRANGE("Document ID", EvaluationHeader.Code);
        IF FinanceLine.FINDSET THEN BEGIN
            REPEAT
                Bids.RESET;
                Bids.SETRANGE("No.", FinanceLine."No.");
                Bids.SETRANGE("IFS Code", EvaluationHeader."IFS Code");
                IF Bids.FINDSET THEN BEGIN
                    Bids."Final Evaluated Bid Price" := FinanceLine."Final Evaluated Bid Price";
                    Bids."Financial Evaluation Date" := EvaluationHeader."Evaluation Date";
                    Bids."Financial Evaluation Ranking" := FinanceLine."Financial Evaluation Ranking";
                    Bids."Aggregate Ranking" := FinanceLine."Aggregate Ranking";
                    Bids."Aggregate Weighted Score %" := FinanceLine."Aggregate Weighted Score %";
                    Bids."Weighted Financial Score %" := FinanceLine."Weighted Financial Score %";
                    Bids."Weighted Tech Score %" := FinanceLine."Weighted Tech Score %";
                    Bids."Read-out Bid Price (A)" := FinanceLine."Read-out Bid Price (A)";
                    Bids."Arithmetic Corrections (B)" := FinanceLine."Arithmetic Corrections (B)";
                    Bids."Corrected Bid Price (C=A+B)" := FinanceLine."Corrected Bid Price";
                    //Bids."Unconditional Discount % (D)":=
                    //Bids."Unconditional Disc Amount (E)":=
                    Bids."Corrected & Disc Bid Price" := FinanceLine."Corrected Bid Price";
                    ////Bids."Any Additional Adjustments (G)":=
                    //Bids."Any Priced Deviations (H))":=
                    //IF EvaluationHeader."Technical Evaluation  Decision"=EvaluationHeader."Technical Evaluation  Decision"::Pass THEN
                    Bids."Final Tender Outcome" := FinanceLine."Final Tender Outcome";
                    Bids."Document Status" := Bids."Document Status"::Evaluation;
                    //Bids."Weighted Tech Score %":=EvaluationHeader."Weighted Technical Eval Score";
                    Bids.MODIFY;

                    IFSDetails.RESET;
                    IFSDetails.SETRANGE(Code, EvaluationHeader."IFS Code");
                    IFSDetails.SETRANGE("Vendor No.", Bids."Buy-from Vendor No.");
                    IF IFSDetails.FINDSET THEN BEGIN
                        IFSDetails."Bid Opening Finance Register" := EvaluationHeader."Finance Opening Register No.";
                        IFSDetails."Bid Opening Date (Financial)" := EvaluationHeader."Finance Opening Date";
                        IFSDetails."Financial Eval Register No" := EvaluationHeader."Bid Scoring Document No.";
                        IFSDetails."Financial Evaluation Date" := EvaluationHeader."Evaluation Date";
                        IFSDetails."Read-out Bid Price (A)" := FinanceLine."Read-out Bid Price (A)";
                        IFSDetails."Arithmetic Corrections (B)" := FinanceLine."Arithmetic Corrections (B)";
                        IFSDetails."Corrected Bid Price (C=A+B)" := FinanceLine."Corrected Bid Price";
                        IFSDetails."Unconditional Discount % (D)" := FinanceLine."Unconditional Discount % (D)";
                        IFSDetails."Unconditional Disc Amount (E)" := FinanceLine."Unconditional Disc Amount (E)";
                        IFSDetails."Corrected & Disc Bid Price" := FinanceLine."Corrected & Disc Bid Price";
                        IFSDetails."Any Additional Adjustments (G)" := FinanceLine."Any Additional Adjustments (G)";
                        IFSDetails."Any Priced Deviations (H))" := FinanceLine."Any Priced Deviations (H))";
                        IFSDetails."Final Evaluated Bid Price" := FinanceLine."Final Evaluated Bid Price";
                        IFSDetails."Weighted Financial Score %" := FinanceLine."Weighted Financial Score %";
                        IFSDetails."Weighted Technical  Score %" := FinanceLine."Weighted Tech Score %";
                        IFSDetails."Evaluation Committee Rem" := FinanceLine."Evaluation Committee Remarks";
                        IFSDetails."Evaluation Committee Recomm" := FinanceLine."Evaluation Committee Recomm";
                        IFSDetails."Financial Evaluation Comm Rem" := FinanceLine."Evaluation Committee Remarks";
                        IFSDetails."Aggregate Weighted Score %" := FinanceLine."Aggregate Weighted Score %";
                        IFSDetails."Financial Evaluation Ranking" := FORMAT(FinanceLine."Finacial Auto-Ranking");
                        IFSDetails.MODIFY(TRUE);
                    END ELSE BEGIN

                        IFSDetails.INIT;
                        IFSDetails."Vendor No." := FinanceLine."Bidder No";
                        IFSDetails.Code := EvaluationHeader."IFS Code";
                        IFS.RESET;
                        IFS.SETRANGE(Code, EvaluationHeader."IFS Code");
                        IF IFS.FINDSET THEN BEGIN
                            IFSDetails.Description := IFS."Tender Name";
                            IFSDetails."IFS Code" := IFS.Code;
                        END;

                        IFSDetails."Bid No." := FinanceLine."No.";
                        IFSDetails."Vendor Name" := FinanceLine."Bidder Name";
                        //eIFSDetails."Primary Email":=Bids.
                        //IFSDetails."Invitation Email Sent":=
                        IFSDetails."Bid Opening Finance Register" := EvaluationHeader."Finance Opening Register No.";
                        IFSDetails."Bid Opening Date (Financial)" := EvaluationHeader."Finance Opening Date";
                        IFSDetails."Financial Eval Register No" := EvaluationHeader."Bid Scoring Document No.";
                        IFSDetails."Financial Evaluation Date" := EvaluationHeader."Evaluation Date";
                        IFSDetails."Read-out Bid Price (A)" := FinanceLine."Read-out Bid Price (A)";
                        IFSDetails."Arithmetic Corrections (B)" := FinanceLine."Arithmetic Corrections (B)";
                        IFSDetails."Corrected Bid Price (C=A+B)" := FinanceLine."Corrected Bid Price";
                        IFSDetails."Unconditional Discount % (D)" := FinanceLine."Unconditional Discount % (D)";
                        IFSDetails."Unconditional Disc Amount (E)" := FinanceLine."Unconditional Disc Amount (E)";
                        IFSDetails."Corrected & Disc Bid Price" := FinanceLine."Corrected & Disc Bid Price";
                        IFSDetails."Any Additional Adjustments (G)" := FinanceLine."Any Additional Adjustments (G)";
                        IFSDetails."Any Priced Deviations (H))" := FinanceLine."Any Priced Deviations (H))";
                        IFSDetails."Final Evaluated Bid Price" := FinanceLine."Final Evaluated Bid Price";
                        IFSDetails."Weighted Financial Score %" := FinanceLine."Weighted Financial Score %";
                        IFSDetails."Weighted Technical  Score %" := FinanceLine."Weighted Tech Score %";
                        IFSDetails."Evaluation Committee Rem" := FinanceLine."Evaluation Committee Remarks";
                        IFSDetails."Evaluation Committee Recomm" := FinanceLine."Evaluation Committee Recomm";
                        IFSDetails."Financial Evaluation Comm Rem" := FinanceLine."Evaluation Committee Remarks";
                        IFSDetails."Aggregate Weighted Score %" := FinanceLine."Aggregate Weighted Score %";
                        IFSDetails."Financial Evaluation Ranking" := FORMAT(FinanceLine."Finacial Auto-Ranking");
                        IFSDetails.INSERT(TRUE);
                    END;
                END;
            UNTIL FinanceLine.NEXT = 0;
        END;



        /*
            ProcuremnetSetup.GET;
            IF ProcuremnetSetup."Notify Committe Members"=TRUE THEN
            FnSendBidEvaluationNotification(EvaluationHeader);
        */
        IFS.RESET;
        IFS.SETRANGE(Code, EvaluationHeader."IFS Code");
        IF IFS.FINDSET THEN BEGIN
            IFS."Document Status" := IFS."Document Status"::Evaluation;
            IFS."IFS Evaluation End Date" := TODAY;
            IFS.MODIFY(TRUE);
        END;

        //Generate Final Evaluation Report
        FinalEvalReport.RESET;
        FinalEvalReport.SETRANGE("Document Type", FinalEvalReport."Document Type"::"Evaluation Report");
        FinalEvalReport.SETRANGE("IFS Code", EvaluationHeader."IFS Code");
        IF NOT FinalEvalReport.FINDSET THEN BEGIN
            FinalEvalReport.INIT;
            FinalEvalReport."Document Type" := FinalEvalReport."Document Type"::"Evaluation Report";
            FinalEvalReport."IFS Code" := EvaluationHeader."IFS Code";
            FinalEvalReport."Document Date" := EvaluationHeader."Evaluation Date";
            FinalEvalReport."Financial Evaluation ID" := EvaluationHeader.Code;
            FinalEvalReport.Description := 'Final Tender evaluation Report' + EvaluationHeader."IFS Code";
            IFS.RESET;
            IFS.SETRANGE(Code, EvaluationHeader."IFS Code");
            IF IFS.FINDSET THEN BEGIN
                FinalEvalReport."Tender Name" := IFS."Tender Name";
                FinalEvalReport."Program Title" := IFS."Program Title";
                FinalEvalReport."Location of Project" := IFS."Location of Project";
                FinalEvalReport."Extent of Contract" := IFS."Extent of Contract";
                FinalEvalReport."Last Evaluation Version No." := IFS."Last Evaluation Version No.";


                //////////////////////////////////////////////////////

                VendorPurchaseCode.reset;
                VendorPurchaseCode.SETRANGE("IFS Code", EvaluationHeader."IFS Code");
                IF VendorPurchaseCode.FINDSET THEN BEGIN
                    REPEAT
                        FinalEvalLine.INIT;
                        FinalEvalLine."Tabulation ID" := FinalEvalReport.Code;
                        FinalEvalLine."Tabulation Type" := FinalEvalLine."Tabulation Type"::"Evaluation Report";
                        FinalEvalLine."Document Type" := FinalEvalLine."Document Type"::Quote;
                        FinalEvalLine."No." := VendorPurchaseCode."Bid No.";
                        FinalEvalLine."Bidder Name" := VendorPurchaseCode."Vendor Name";
                        FinalEvalLine."Bidder No" := VendorPurchaseCode."Vendor No.";
                        FinalEvalLine."Invitation For Supply No" := VendorPurchaseCode."IFS Code";
                        FinalEvalLine."Bid Currency Code" := VendorPurchaseCode."Bid Currency Code";
                        // FinalEvalLine.ReFinanceLine."Read-out Bid Price (A)"
                        FinalEvalLine."Preliminary Evaluation Date" := VendorPurchaseCode."Preliminary Evaluation Date";
                        FinalEvalLine."Responsive Bid" := VendorPurchaseCode."Responsive Bid";
                        FinalEvalLine."Technical Evaluation Date" := VendorPurchaseCode."Technical Evaluation Date";
                        FinalEvalLine."Weighted Tech Score %" := VendorPurchaseCode."Weighted Technical  Score %";
                        FinalEvalLine."Passed Tech Evaluation" := VendorPurchaseCode."Passed Tech Evaluation";
                        FinalEvalLine."Tech Evaluation Ranking" := FORMAT(VendorPurchaseCode."Tech Evaluation Ranking");
                        // FinalEvalLine.fin
                        //FinalEvalLine."Bid Opening Date":=FinanceLine.ope
                        //FinalEvalLine.finaIFSDetails."Financial Eval Register No"
                        FinalEvalLine."Assigned Bid No" := VendorPurchaseCode."Assigned Bid No";
                        FinalEvalLine."Financial Evaluation Date" := VendorPurchaseCode."Financial Evaluation Date";
                        FinalEvalLine."Read-out Bid Price (A)" := VendorPurchaseCode."Read-out Bid Price (A)";
                        FinalEvalLine."Arithmetic Corrections (B)" := VendorPurchaseCode."Arithmetic Corrections (B)";
                        FinalEvalLine."Corrected Bid Price (C=A+B)" := VendorPurchaseCode."Corrected Bid Price (C=A+B)";
                        FinalEvalLine."Unconditional Discount % (D)" := VendorPurchaseCode."Unconditional Discount % (D)";
                        FinalEvalLine."Unconditional Disc Amount (E)" := VendorPurchaseCode."Unconditional Disc Amount (E)";
                        FinalEvalLine."Corrected & Disc Bid Price" := VendorPurchaseCode."Corrected & Disc Bid Price";
                        FinalEvalLine."Any Additional Adjustments (G)" := VendorPurchaseCode."Any Additional Adjustments (G)";
                        FinalEvalLine."Any Priced Deviations (H))" := VendorPurchaseCode."Any Priced Deviations (H))";
                        FinalEvalLine."Final Evaluated Bid Price" := VendorPurchaseCode."Final Evaluated Bid Price";
                        FinalEvalLine."Weighted Financial Score %" := VendorPurchaseCode."Weighted Financial Score %";
                        FinalEvalLine."Weighted Tech Score %" := VendorPurchaseCode."Weighted Technical  Score %";
                        IF VendorPurchaseCode."Evaluation Committee Recomm" <> VendorPurchaseCode."Evaluation Committee Recomm"::Award THEN BEGIN
                            FinalEvalLine."Evaluation Committee Recomm" := FinalEvalLine."Evaluation Committee Recomm"::Unsuccesful;
                        END ELSE BEGIN
                            FinalEvalLine."Evaluation Committee Recomm" := VendorPurchaseCode."Evaluation Committee Recomm";
                        END;
                        FinalEvalLine."Financial Evaluation Comm Rem" := VendorPurchaseCode."Financial Evaluation Comm Rem";
                        FinalEvalLine."Aggregate Weighted Score %" := VendorPurchaseCode."Aggregate Weighted Score %";
                        FinalEvalLine."Pre-bid Register No." := VendorPurchaseCode."Prebid Register No.";
                        FinalEvalLine."Prebid Conference Date" := VendorPurchaseCode."Prebid Meeting Date";
                        FinalEvalLine."Bid Opening Date" := VendorPurchaseCode."Bid Opening Date (Technical)";
                        FinalEvalLine."Bid Opening Committee Remarks" := VendorPurchaseCode."Bid Opening Committee Remarks";
                        FinalEvalLine."Bid Opening Date (Financial)" := VendorPurchaseCode."Bid Opening Date (Financial)";
                        FinalEvalLine."Bid Opening Finance Register" := VendorPurchaseCode."Bid Opening Finance Register";
                        FinalEvalLine."Bid Opening Register No." := VendorPurchaseCode."Bid Opening Register No.";
                        FinalEvalLine."Bid Opening Result" := VendorPurchaseCode."Bid Opening Result";
                        FinalEvalLine."Preliminary Evaluation Date" := VendorPurchaseCode."Preliminary Evaluation Date";
                        FinalEvalLine."Preliminary Evaluation Outcome" := VendorPurchaseCode."Preliminary Evaluation Outcome";
                        FinalEvalLine."Preliminary Evaluation Reg" := VendorPurchaseCode."Preliminary Evaluation Reg";
                        FinalEvalLine."Preminary Evaluation Committee" := VendorPurchaseCode."Preminary Evaluation Committee";
                        FinalEvalLine."Financial Evaluation Ranking" := VendorPurchaseCode."Financial Evaluation Ranking";
                        FinalEvalLine."Technical Evaluation Date" := VendorPurchaseCode."Technical Evaluation Date";
                        //      END;

                        FinalEvalLine.INSERT(TRUE);
                    UNTIL VendorPurchaseCode.NEXT = 0;
                end;
                /// 
                /// \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\


            END;
            FinalEvalReport."Raised By" := EvaluationHeader."Evaluation Lead";
            FinalEvalReport.Name := EvaluationHeader."Evaluation Lead Name";
            FinalEvalReport."Tender Committee Role" := FinalEvalReport."Tender Committee Role"::Chairperson;
            FinalEvalReport."Bid Opening Date" := EvaluationHeader."Bid Opening Date";
            FinalEvalReport."Evaluation Completion Date" := EvaluationHeader."Evaluation Date";
            FinalEvalReport."Appointed Bid Opening Comm" := IFS."Bid Opening Committe";
            FinalEvalReport."Appointed Bid Evaluation Com" := EvaluationHeader."Appointed Bid Evaluation Commi";
            FinalEvalReport."Primary Region" := EvaluationHeader."Primary Region";
            FinalEvalReport."Bid Opening Register(Tech)" := EvaluationHeader."Bid Opening Register No.";
            FinalEvalReport."Process Type" := FinalEvalReport."Process Type"::IFS;
            FinalEvalReport."Bid Evaluation Criteria" := EvaluationHeader."Bid Scoring Document No.";
            FinalEvalReport."Bid Opening Register(Finance)" := EvaluationHeader."Finance Opening Register No.";
            IF FinalEvalReport.INSERT(TRUE) THEN BEGIN
                FinalEvalReport.VALIDATE(FinalEvalReport."Appointed Bid Opening Comm");
                FinalEvalReport.VALIDATE(FinalEvalReport."Appointed Bid Evaluation Com");
                //----------------------------------------------------------------------------------------------------------
                VendorPurchaseCode.RESET;
                // VendorPurchaseCode.SETFILTER("Bid No.", '<>%1', '');
                //  VendorPurchaseCode.SETRANGE(Responded, TRUE);
                VendorPurchaseCode.SETRANGE("IFS Code", EvaluationHeader."IFS Code");
                IF VendorPurchaseCode.FINDSET THEN BEGIN
                    REPEAT
                        FinalEvalLine.INIT;
                        FinalEvalLine."Tabulation ID" := FinalEvalReport.Code;
                        FinalEvalLine."Tabulation Type" := FinalEvalLine."Tabulation Type"::"Evaluation Report";
                        FinalEvalLine."Document Type" := FinalEvalLine."Document Type"::Quote;
                        FinalEvalLine."No." := VendorPurchaseCode."Bid No.";
                        FinalEvalLine."Bidder Name" := VendorPurchaseCode."Vendor Name";
                        FinalEvalLine."Bidder No" := VendorPurchaseCode."Vendor No.";
                        FinalEvalLine."Invitation For Supply No" := VendorPurchaseCode."IFS Code";
                        FinalEvalLine."Bid Currency Code" := VendorPurchaseCode."Bid Currency Code";
                        // FinalEvalLine.ReFinanceLine."Read-out Bid Price (A)"
                        FinalEvalLine."Preliminary Evaluation Date" := VendorPurchaseCode."Preliminary Evaluation Date";
                        FinalEvalLine."Responsive Bid" := VendorPurchaseCode."Responsive Bid";
                        FinalEvalLine."Technical Evaluation Date" := VendorPurchaseCode."Technical Evaluation Date";
                        FinalEvalLine."Weighted Tech Score %" := VendorPurchaseCode."Weighted Technical  Score %";
                        FinalEvalLine."Passed Tech Evaluation" := VendorPurchaseCode."Passed Tech Evaluation";
                        FinalEvalLine."Tech Evaluation Ranking" := FORMAT(VendorPurchaseCode."Tech Evaluation Ranking");
                        // FinalEvalLine.fin
                        //FinalEvalLine."Bid Opening Date":=FinanceLine.ope
                        //FinalEvalLine.finaIFSDetails."Financial Eval Register No"
                        FinalEvalLine."Assigned Bid No" := VendorPurchaseCode."Assigned Bid No";
                        FinalEvalLine."Financial Evaluation Date" := VendorPurchaseCode."Financial Evaluation Date";
                        FinalEvalLine."Read-out Bid Price (A)" := VendorPurchaseCode."Read-out Bid Price (A)";
                        FinalEvalLine."Arithmetic Corrections (B)" := VendorPurchaseCode."Arithmetic Corrections (B)";
                        FinalEvalLine."Corrected Bid Price (C=A+B)" := VendorPurchaseCode."Corrected Bid Price (C=A+B)";
                        FinalEvalLine."Unconditional Discount % (D)" := VendorPurchaseCode."Unconditional Discount % (D)";
                        FinalEvalLine."Unconditional Disc Amount (E)" := VendorPurchaseCode."Unconditional Disc Amount (E)";
                        FinalEvalLine."Corrected & Disc Bid Price" := VendorPurchaseCode."Corrected & Disc Bid Price";
                        FinalEvalLine."Any Additional Adjustments (G)" := VendorPurchaseCode."Any Additional Adjustments (G)";
                        FinalEvalLine."Any Priced Deviations (H))" := VendorPurchaseCode."Any Priced Deviations (H))";
                        FinalEvalLine."Final Evaluated Bid Price" := VendorPurchaseCode."Final Evaluated Bid Price";
                        FinalEvalLine."Weighted Financial Score %" := VendorPurchaseCode."Weighted Financial Score %";
                        FinalEvalLine."Weighted Tech Score %" := VendorPurchaseCode."Weighted Technical  Score %";
                        IF VendorPurchaseCode."Evaluation Committee Recomm" <> VendorPurchaseCode."Evaluation Committee Recomm"::Award THEN BEGIN
                            FinalEvalLine."Evaluation Committee Recomm" := FinalEvalLine."Evaluation Committee Recomm"::Unsuccesful;
                        END ELSE BEGIN
                            FinalEvalLine."Evaluation Committee Recomm" := VendorPurchaseCode."Evaluation Committee Recomm";
                        END;
                        FinalEvalLine."Financial Evaluation Comm Rem" := VendorPurchaseCode."Financial Evaluation Comm Rem";
                        FinalEvalLine."Aggregate Weighted Score %" := VendorPurchaseCode."Aggregate Weighted Score %";
                        FinalEvalLine."Pre-bid Register No." := VendorPurchaseCode."Prebid Register No.";
                        FinalEvalLine."Prebid Conference Date" := VendorPurchaseCode."Prebid Meeting Date";
                        FinalEvalLine."Bid Opening Date" := VendorPurchaseCode."Bid Opening Date (Technical)";
                        FinalEvalLine."Bid Opening Committee Remarks" := VendorPurchaseCode."Bid Opening Committee Remarks";
                        FinalEvalLine."Bid Opening Date (Financial)" := VendorPurchaseCode."Bid Opening Date (Financial)";
                        FinalEvalLine."Bid Opening Finance Register" := VendorPurchaseCode."Bid Opening Finance Register";
                        FinalEvalLine."Bid Opening Register No." := VendorPurchaseCode."Bid Opening Register No.";
                        FinalEvalLine."Bid Opening Result" := VendorPurchaseCode."Bid Opening Result";
                        FinalEvalLine."Preliminary Evaluation Date" := VendorPurchaseCode."Preliminary Evaluation Date";
                        FinalEvalLine."Preliminary Evaluation Outcome" := VendorPurchaseCode."Preliminary Evaluation Outcome";
                        FinalEvalLine."Preliminary Evaluation Reg" := VendorPurchaseCode."Preliminary Evaluation Reg";
                        FinalEvalLine."Preminary Evaluation Committee" := VendorPurchaseCode."Preminary Evaluation Committee";
                        FinalEvalLine."Financial Evaluation Ranking" := VendorPurchaseCode."Financial Evaluation Ranking";
                        FinalEvalLine."Technical Evaluation Date" := VendorPurchaseCode."Technical Evaluation Date";
                        //      END;

                        FinalEvalLine.INSERT(TRUE);
                    UNTIL VendorPurchaseCode.NEXT = 0;

                END;



            END;
            MESSAGE('Finance Evaluation Completed, Proceed to Evaluation Report');
            PAGE.RUN(75275, FinalEvalReport)
        END;


    end;



    procedure FnPostQualification(EvaluationHeader: Record "Bid Evaluation Register")
    var
        Bidevaluationscore: Record "Bid Evaluation Score Entry";
        BidSCoreGuide: Record "Bid Score Requirement";
        LineNo: Integer;
        IFSDetails: Record "Standard Vendor Purchase Code";
        ProcuremnetSetup: Record "Procurement Setup";
        IFS: Record "Standard Purchase Code";
        Bids: Record "Purchase Header";
        FinanceLine: Record "Finance Evaluation Line";
        FinalEvalReport: Record "Bid Tabulation Header";
        FinalEvalLine: Record "Bid Tabulation Line";
        BidEvaluationRegister: Record "Bid Evaluation Register";
        VendorPurchaseCode: Record "Standard Vendor Purchase Code";
    begin
        //if not ConfirmManagement.ConfirmProcess(Text001, true) then
        //exit;
        EvaluationHeader.TestField("IFS Code");
        EvaluationHeader.TestField("Post Quali Comm Remarks");
        EvaluationHeader.TestField("Evaluation Date");
        EvaluationHeader.TestField("Evaluation Lead");
        // FinalEvalReport.RESET;
        // FinalEvalReport.SETRANGE("IFS Code",EvaluationHeader."IFS Code");
        // FinalEvalReport.SETRANGE("Document Type",FinalEvalReport."Document Type"::"Evaluation Report");
        // IF NOT FinalEvalReport.FINDSET THEN BEGIN
        FinalEvalReport.Init;
        FinalEvalReport."Document Type" := FinalEvalReport."document type"::"Evaluation Report";
        FinalEvalReport."IFS Code" := EvaluationHeader."IFS Code";
        FinalEvalReport."Document Date" := EvaluationHeader."Evaluation Date";
        FinalEvalReport."Financial Evaluation ID" := EvaluationHeader.Code;
        FinalEvalReport.Description := 'Final Tender Evaluation Report' + EvaluationHeader."IFS Code";
        IFS.Reset;
        IFS.SetRange(Code, EvaluationHeader."IFS Code");
        if IFS.FindSet then begin
            FinalEvalReport."Tender Name" := IFS."Tender Name";
            FinalEvalReport."Program Title" := IFS."Program Title";
            FinalEvalReport."Location of Project" := IFS."Location of Project";
            FinalEvalReport."Extent of Contract" := IFS."Extent of Contract";
            FinalEvalReport."Last Evaluation Version No." := IFS."Last Evaluation Version No.";
        end;
        FinalEvalReport."Raised By" := EvaluationHeader."Evaluation Lead";
        FinalEvalReport.Name := EvaluationHeader."Evaluation Lead Name";
        FinalEvalReport."Tender Committee Role" := FinalEvalReport."tender committee role"::Chairperson;
        FinalEvalReport."Bid Opening Date" := EvaluationHeader."Bid Opening Date";
        FinalEvalReport."Evaluation Completion Date" := EvaluationHeader."Evaluation Date";
        FinalEvalReport."Appointed Bid Opening Comm" := IFS."Bid Opening Committe";
        FinalEvalReport."Appointed Bid Evaluation Com" := EvaluationHeader."Appointed Bid Evaluation Commi";
        FinalEvalReport."Primary Region" := EvaluationHeader."Primary Region";
        FinalEvalReport."Bid Opening Register(Tech)" := EvaluationHeader."Bid Opening Register No.";
        FinalEvalReport."Process Type" := FinalEvalReport."process type"::IFS;
        FinalEvalReport."Bid Evaluation Criteria" := EvaluationHeader."Bid Scoring Document No.";
        FinalEvalReport."Bid Opening Register(Finance)" := EvaluationHeader."Finance Opening Register No.";
        if FinalEvalReport.Insert(true) then begin
            FinalEvalReport.Validate(FinalEvalReport."Appointed Bid Opening Comm");
            FinalEvalReport.Validate(FinalEvalReport."Appointed Bid Evaluation Com");
            //----------------------------------------------------------------------------------------------------------
            FinanceLine.Reset;
            FinanceLine.SetRange("Document ID", EvaluationHeader.Code);
            if FinanceLine.FindSet then begin
                repeat
                    FinalEvalLine.Init;
                    FinalEvalLine."Tabulation ID" := FinalEvalReport.Code;
                    FinalEvalLine."Tabulation Type" := FinalEvalLine."tabulation type"::"Evaluation Report";
                    FinalEvalLine."Document Type" := FinalEvalLine."document type"::Quote;
                    FinalEvalLine."No." := FinanceLine."No.";
                    FinalEvalLine."Bidder Name" := FinanceLine."Bidder Name";
                    FinalEvalLine."Bidder No" := FinanceLine."Bidder No";
                    FinalEvalLine."Invitation For Supply No" := FinanceLine."Invitation For Supply No";
                    FinalEvalLine."Bid Currency Code" := FinanceLine."Bid Currency Code";
                    // FinalEvalLine.ReFinanceLine."Read-out Bid Price (A)"
                    FinalEvalLine."Preliminary Evaluation Date" := FinanceLine."Preliminary Evaluation Date";
                    FinalEvalLine."Responsive Bid" := FinanceLine."Responsive Bid";
                    FinalEvalLine."Technical Evaluation Date" := FinanceLine."Technical Evaluation Date";
                    FinalEvalLine."Weighted Tech Score %" := FinanceLine."Weighted Tech Score %";
                    FinalEvalLine."Passed Tech Evaluation" := FinanceLine."Passed Tech Evaluation";
                    FinalEvalLine."Tech Evaluation Ranking" := FinanceLine."Tech Evaluation Ranking";
                    //FinalEvalLine.  IFSDetails."Bid Opening Finance Register"
                    //FinalEvalLine."Bid Opening Date":=FinanceLine.ope
                    //FinalEvalLine.finaIFSDetails."Financial Eval Register No"
                    FinalEvalLine."Financial Evaluation Date" := FinanceLine."Financial Evaluation Date";
                    FinalEvalLine."Read-out Bid Price (A)" := FinanceLine."Read-out Bid Price (A)";
                    FinalEvalLine."Arithmetic Corrections (B)" := FinanceLine."Arithmetic Corrections (B)";
                    FinalEvalLine."Corrected Bid Price (C=A+B)" := FinanceLine."Corrected Bid Price";
                    FinalEvalLine."Unconditional Discount % (D)" := FinanceLine."Unconditional Discount % (D)";
                    FinalEvalLine."Unconditional Disc Amount (E)" := FinanceLine."Unconditional Disc Amount (E)";
                    FinalEvalLine."Corrected & Disc Bid Price" := FinanceLine."Corrected & Disc Bid Price";
                    FinalEvalLine."Any Additional Adjustments (G)" := FinanceLine."Any Additional Adjustments (G)";
                    FinalEvalLine."Any Priced Deviations (H))" := FinanceLine."Any Priced Deviations (H))";
                    FinalEvalLine."Final Evaluated Bid Price" := FinanceLine."Final Evaluated Bid Price";
                    FinalEvalLine."Weighted Financial Score %" := FinanceLine."Weighted Financial Score %";
                    FinalEvalLine."Weighted Tech Score %" := FinanceLine."Weighted Tech Score %";
                    FinalEvalLine."Evaluation Committee Recomm" := FinanceLine."Evaluation Committee Recomm";
                    FinalEvalLine."Financial Evaluation Comm Rem" := FinanceLine."Evaluation Committee Remarks";
                    FinalEvalLine."Aggregate Weighted Score %" := FinanceLine."Aggregate Weighted Score %";
                    IFSDetails.Reset;
                    IFSDetails.SetRange(Code, EvaluationHeader."IFS Code");
                    IFSDetails.SetRange("Vendor No.", Bids."Buy-from Vendor No.");
                    if IFSDetails.FindSet then begin
                        FinalEvalLine."Pre-bid Register No." := IFSDetails."Prebid Register No.";
                        FinalEvalLine."Prebid Conference Date" := IFSDetails."Prebid Meeting Date";
                        FinalEvalLine."Bid Opening Date" := IFSDetails."Bid Opening Date (Technical)";
                        FinalEvalLine."Bid Opening Committee Remarks" := IFSDetails."Bid Opening Committee Remarks";
                        FinalEvalLine."Bid Opening Date (Financial)" := IFSDetails."Bid Opening Date (Financial)";
                        FinalEvalLine."Bid Opening Finance Register" := IFSDetails."Bid Opening Finance Register";
                        FinalEvalLine."Bid Opening Register No." := IFSDetails."Bid Opening Register No.";
                        FinalEvalLine."Bid Opening Result" := IFSDetails."Bid Opening Result";
                        FinalEvalLine."Preliminary Evaluation Date" := IFSDetails."Preliminary Evaluation Date";
                        FinalEvalLine."Preliminary Evaluation Outcome" := IFSDetails."Preliminary Evaluation Outcome";
                        FinalEvalLine."Preliminary Evaluation Reg" := IFSDetails."Preliminary Evaluation Reg";
                        FinalEvalLine."Preminary Evaluation Committee" := IFSDetails."Preminary Evaluation Committee";
                        //FinalEvalLine."Tech Evaluation Ranking":=IFSDetails.;
                        FinalEvalLine."Technical Evaluation Date" := IFSDetails."Technical Evaluation Date";
                    end;


                    FinalEvalLine.Insert(true);
                until FinanceLine.Next = 0;

            end;

            // END;
            Message('Post Qualification Completed, Proceed to Evaluation Report');
            Page.Run(75275, FinalEvalReport);
            EvaluationHeader.Posted := true;
            EvaluationHeader."Posted By" := UserId;
            EvaluationHeader."Posted Date" := Today;
            EvaluationHeader.Modify(true);

        end else begin
            //MESSAGE('Success');
            Page.Run(75275, FinalEvalReport)
        end;
    end;


    // procedure FnNotifyREReportSubmissionHeader(RPHeader: Record "Report Submission Header")
    // var
    //     "Code": Code[10];
    //     ProcurementSetup: Record "Procurement Setup";
    //     IFPResponseLine: Record "IFP Response Line";
    //     Vendors: Record Vendor;
    //     InsCoverageLedgerEntry: Record "Ins. Coverage Ledger Entry";
    //     InsuranceReg: Record Insurance;
    //     Window: Dialog;
    //     EmailBody: array[2] of Text[30];
    //     BodyText: Text[250];
    //     mymail: Codeunit Mail;
    //     WindowisOpen: Boolean;
    //     FileDialog: Codeunit Mail;
    //     SendingDate: Date;
    //     SendingTime: Time;
    //     Counter: Integer;
    //     cu400: Codeunit Mail;
    //     SenderAddress: Text[100];
    //     UserSetup: Record "User Setup";
    //     HRSetup: Record "Human Resources Setup";
    //     CompInfo: Record "Company Information";
    //     RequesterName: Text[100];
    //     RequesterEmail: Text[100];
    //     emailhdr: Text[100];
    //     ProcNote: Text[1000];
    //     LoginDetails: Text[1000];
    //     CustEmail: Text[100];
    //     CompanyDetails: Text[250];
    //     SupplierDetails: Text[1000];
    //     SenderMessage: Text[1000];
    //     FileDirectory: Text[100];
    //     FileName: Text[100];
    //     RFIResponse2: Record "RFI Response";
    //     RFIResponse: Record "RFI Response";
    //     IFPResponseLine1: Record "IFP Response Line";
    //     PurchaseHeader: Record "Purchase Header";
    //     InternalProjectResource: Record "Internal Project Resource";
    //     StudySurveyRoadProject: Record "Study/Survey Road Project";
    // begin
    //     StudySurveyRoadProject.Reset;
    //     StudySurveyRoadProject.SetRange(StudySurveyRoadProject."No.", RPHeader."Project ID");
    //     if StudySurveyRoadProject.FindSet then begin
    //         repeat
    //             InternalProjectResource.Reset;
    //             InternalProjectResource.SetRange(InternalProjectResource."Project ID", StudySurveyRoadProject."Project Code");
    //             InternalProjectResource.SetRange(InternalProjectResource."Role Code", '  I-RE');
    //             if InternalProjectResource.FindSet then begin
    //                 InternalProjectResource.TestField(Email);
    //                 CustEmail := InternalProjectResource.Email;
    //             end;
    //         until StudySurveyRoadProject.Next = 0;
    // //     end;




    //     CompInfo.Get;
    //     ProcurementSetup.Get;
    //     RequesterEmail := ProcurementSetup."Default Proc Email Contact";
    //     RequesterName := ProcurementSetup."Default Proc Email Contact";
    //     Window.Open('Sending email to Resident Engineer');
    //     WindowisOpen := true;
    //     //Create message
    //     if ProcurementSetup."Default Proc Email Contact" = '' then
    //         Error('Please Contact the IT Admin to specify the E-mail address under Procurement Setup page!!');
    //     SenderAddress := ProcurementSetup."Default Proc Email Contact";

    //     StudySurveyRoadProject.Reset;
    //     StudySurveyRoadProject.SetRange(StudySurveyRoadProject."No.", RPHeader."Project ID");
    //     if StudySurveyRoadProject.FindSet then begin
    //         InternalProjectResource.Reset;
    //         InternalProjectResource.SetRange(InternalProjectResource."Project ID", StudySurveyRoadProject."Project Code");
    //         InternalProjectResource.SetRange(InternalProjectResource."Role Code", '  I-RE');
    //         if InternalProjectResource.FindSet then begin
    //             CompanyDetails := 'Dear' + ' ' + InternalProjectResource.Name + ',<br>';
    //             SenderMessage := '<BR>This is to notify you that the a report submission for the project ' + RPHeader."Project Name" + '<br/> has been submitted successfully' + '<br/><br/>';
    //             SenderMessage := SenderMessage + ' ' + '<BR>by ' + RPHeader."Consultant Name" + '<br/><br/>';
    //         end;
    //     end;

    //     SupplierDetails := '';
    //     LoginDetails := 'If you require any assistance, please contact the Authority for more information.<br/>';
    //     ProcNote := '<BR> Regards';

    //     if CustEmail = '' then
    //         exit;

    //     emailhdr := UpperCase(CompInfo.Name) + UpperCase(Format('REPORT SUBMISSION'));
    //     //cu400.CreateMessage(CompInfo.Name, SenderAddress, CustEmail, emailhdr,
    //     //CompanyDetails + '<BR></BR>' + SenderMessage + SupplierDetails + LoginDetails, true);
    //     ////cu400.AddCC(RequesterEmail);
    //     ////cu400.AddBodyline(ProcNote);
    //     ////cu400.AddAttachment(FileDirectory+FileName,FileName);
    //     //cu400.Send;
    //     SendingDate := Today;
    //     SendingTime := Time;
    //     Sleep(1000);
    //     Window.Close;
    //     Message('Notified Successfully');
    // end;

    local procedure "*****************Re-evaluation Process*********"()
    begin
    end;

    procedure FnModifyIFSFromRejectedProfessionalOpinion(BTHeader: Record "Bid Tabulation Header")
    var
        ObjSPCode: Record "Standard Purchase Code";
        BidEvaluationRegister: Record "Bid Evaluation Register";
        BidEvaluationHeader: Record "Bid Evaluation Header";
    begin
        ObjSPCode.Reset;
        ObjSPCode.SetRange(ObjSPCode.Code, BTHeader."IFS Code");
        if ObjSPCode.FindSet then begin
            ObjSPCode."Last Evaluation Version No." := ObjSPCode."Last Evaluation Version No." + 1;
            ObjSPCode."Document Status" := ObjSPCode."document status"::Evaluation;
            ObjSPCode."Re-Evaluate" := true;
            ObjSPCode.Modify(true);
        end;

        //Increment the last evaluation version no in the table 38 field Invitation for Supply No. and BTHeader.IFS Code....Table 38

        //Document Status in 38 toBids."Document Status":=Bids."Document Status"::Opened;..Table 38

        //Modify Documnet Status on the Final Report to Rejected...Table:: Bid Tabulation Headr..70181

        //Change Document Status To Rejeteced...Bid Evaluation Header...70239
    end;


    procedure FnSendBidRe_EvaluationNotificationFromRejectedProfessionalOpinionSecChair(BidTHeader: Record "Bid Tabulation Header")
    var
        SupplierReq: Record Contact;
        LastFieldNo: Integer;
        FooterPrinted: Boolean;
        FileDirectory: Text[100];
        FileName: Text[100];
        ReportID: Integer;
        //"Object": Record "Object";
        Window: Dialog;
        RunOnceFile: Text[1000];
        TimeOut: Integer;
        Customer2: Record Customer;
        Cust: Record Customer;
        cr: Integer;
        lf: Integer;
        EmailBody: array[2] of Text[30];
        BodyText: Text[250];
        mymail: Codeunit Mail;
        DefaultPrinter: Text[200];
        WindowisOpen: Boolean;
        FileDialog: Codeunit Mail;
        SendingDate: Date;
        SendingTime: Time;
        Counter: Integer;
        cu400: Codeunit Mail;
        DocLog: Record "Document E-mail Log";
        BranchName: Code[80];
        DimValue: Record "Dimension Value";
        SenderAddress: Text[100];
        CustEmail: Text[100];
        UserSetup: Record "User Setup";
        HRSetup: Record "Company Information";
        Emp: Record Vendor;
        PayrollMonth: Date;
        PayrollMonthText: Text[30];
        PayPeriodtext: Text;
        PayPeriod: Record "Payroll PeriodX";
        CompInfo: Record "Company Information";
        DateFilter: Text;
        FromDate: Date;
        ToDate: Date;
        FromDateS: Text;
        ToDateS: Text;
        vend: Record Vendor;
        StartDate: Date;
        EndDAte: Date;
        EmailVerifier: Codeunit Payroll3;
        IsEmailValid: Boolean;
        PPayableSetup: Record "Procurement Setup";
        RequesterName: Text[100];
        RequesterEmail: Text[100];
        emailhdr: Text[100];
        CompanyDetails: Text[250];
        SupplierDetails: Text[1000];
        SenderMessage: Text[1000];
        ProcNote: Text[1000];
        LoginDetails: Text[1000];
        PortalUser: Record "Dynasoft Portal User";
        Password: Text[50];
        ActivationDetails: Text[1000];
        IFSCommitteMembers: Record "Bid Evaluation Committee";
        IFSTenderCommitte: Record "IFS Tender Committee";
        EvaluationRegister: Record "Bid Evaluation Register";
    begin
        ///Notifying Procurement Team on supplier Request
        CompInfo.Get;
        HRSetup.Get;
        PPayableSetup.Get;


        IFSCommitteMembers.Reset;
        IFSCommitteMembers.SetRange("Document No.", BidTHeader."Final Evaluation Report ID");
        IFSCommitteMembers.SetFilter("Role Type", '%1|%2', IFSCommitteMembers."role type"::Secretary, IFSCommitteMembers."role type"::Chairperson);
        if IFSCommitteMembers.FindSet then begin
            repeat
                IFSCommitteMembers.TestField(Email);
                RequesterEmail := IFSCommitteMembers.Email;
                RequesterName := IFSCommitteMembers."Member Name";
                Window.Open('Notifying...');
                WindowisOpen := true;

                IFSTenderCommitte.Reset;
                IFSTenderCommitte.SetRange("Document No.", BidTHeader."Appointed Bid Evaluation Com");
                if IFSTenderCommitte.FindSet then
                    Counter := Counter + 1;

                //Create message
                if HRSetup."E-Mail" = '' then
                    Error('Please Contact the IT Admin to specify the E-mail address under Company Information Setup page!!');
                SenderAddress := HRSetup."E-Mail";

                if PPayableSetup."Default Proc Email Contact" = '' then
                    Error('Please Contact the IT Admin to specify the Procurement Manager E-mail address under Purchases&Payable Setup page!!');
                CustEmail := PPayableSetup."Default Proc Email Contact";

                CompanyDetails := 'Dear,  ' + RequesterName;
                SenderMessage := '<BR>You are hereby notified of rejection of Evaluation report for Tender No. :' + Format(BidTHeader."IFS Code") + '</BR>';
                SenderMessage := SenderMessage + ' ' + '<BR>by the Employer with these rejection comments:' + Format(BidTHeader."Head Of Procurement Remarks") + '</BR>';
                SenderMessage := SenderMessage + ' ' + '<BR>You are therefore required to re-evaluate this tender. :' + Format(BidTHeader."Tender Name") + '</BR>';

                SupplierDetails := '<BR>Appointment Reference No:' + BidTHeader."Appointed Bid Evaluation Com" + '</BR>' + '<BR> Committee Type:' + IFSTenderCommitte."Committee Type" + '</BR>' +
                '<BR>Membership Role:' + Format(IFSCommitteMembers."Role Type") + '</BR>' +
                '<BR>Appointment Effective Date:' + Format(IFSTenderCommitte."Appointment Effective Date") + '</BR>' +
                '<BR>Invitation For Supply No:' + IFSCommitteMembers."IFS Code" + '</BR>' +
                '<BR>Tender Name:' + IFSTenderCommitte."Tender Name" + '</BR>' +
                '<BR>Appointing Authority:' + IFSTenderCommitte."Appointing Authority" + '</BR>';
                //LoginDetails:='Attached herein, please find an e-copy of Tender Evaluation Summary';


                ProcNote := '<BR> If you require any assistance, please contact our Procurement team by Phone ' + HRSetup."Phone No." + ' or vendor support team via Email: ' + PPayableSetup."Default Proc Email Contact";

                /*EvaluationRegister.RESET;
                EvaluationRegister.SETRANGE(Code,BidTHeader."Final Evaluation Report ID");
                IF EvaluationRegister.FINDSET THEN
                FileDirectory :=  'C:\DOCS\';
                FileName := 'BidRe_Evaluation_'+BidTHeader."IFS Code"+'.pdf';
                 //Report.SaveAsPdf(70041,FileDirectory+FileName,EvaluationRegister);*/
                //IF EvaluationRegister."Evaluation Type"=evaluationHeaader."Evaluation Type"::"Financial Evaluation" THEN
                // //Report.SaveAsPdf(70042,FileDirectory+FileName,EvaluationRegister);

                if CustEmail = '' then
                    exit;

                //MESSAGE:='This is to notify you that there has been a request for Registration ' +  SupplierRequest."No." + ' From Supplier'+ SupplierRequest.Name;
                emailhdr := 'Tender/Procurement Re_Evaluation Summary (Reference No: ' + BidTHeader."IFS Code" + ')';

                //cu400.CreateMessage(CompInfo.Name, SenderAddress, CustEmail, emailhdr,
                //CompanyDetails + '<BR></BR>' + SenderMessage + SupplierDetails + LoginDetails + ActivationDetails, true);

                //cu400.AddCC(RequesterEmail);

                //cu400.AddBodyline(ProcNote);

                ////cu400.AddAttachment(FileDirectory+FileName,FileName);
                //cu400.Send;
                SendingDate := Today;
                SendingTime := Time;

                IFSCommitteMembers."Notified on Email" := true;
                IFSCommitteMembers."Date/Time Notified" := CurrentDatetime;
                IFSCommitteMembers.Modify(true);


                Sleep(1000);
                Window.Close;

            until IFSCommitteMembers.Next = 0;
        end;

    end;


    procedure FnSendBidRe_EvaluationNotificationFromRejectedProfessionalOpinionAll(BidTHeader: Record "Bid Tabulation Header")
    var
        SupplierReq: Record Contact;
        LastFieldNo: Integer;
        FooterPrinted: Boolean;
        FileDirectory: Text[100];
        FileName: Text[100];
        ReportID: Integer;
        //"Object": Record "Object";
        Window: Dialog;
        RunOnceFile: Text[1000];
        TimeOut: Integer;
        Customer2: Record Customer;
        Cust: Record Customer;
        cr: Integer;
        lf: Integer;
        EmailBody: array[2] of Text[30];
        BodyText: Text[250];
        mymail: Codeunit Mail;
        DefaultPrinter: Text[200];
        WindowisOpen: Boolean;
        FileDialog: Codeunit Mail;
        SendingDate: Date;
        SendingTime: Time;
        Counter: Integer;
        cu400: Codeunit Mail;
        DocLog: Record "Document E-mail Log";
        BranchName: Code[80];
        DimValue: Record "Dimension Value";
        SenderAddress: Text[100];
        CustEmail: Text[100];
        UserSetup: Record "User Setup";
        HRSetup: Record "Company Information";
        Emp: Record Vendor;
        PayrollMonth: Date;
        PayrollMonthText: Text[30];
        PayPeriodtext: Text;
        PayPeriod: Record "Payroll PeriodX";
        CompInfo: Record "Company Information";
        DateFilter: Text;
        FromDate: Date;
        ToDate: Date;
        FromDateS: Text;
        ToDateS: Text;
        vend: Record Vendor;
        StartDate: Date;
        EndDAte: Date;
        EmailVerifier: Codeunit Payroll3;
        IsEmailValid: Boolean;
        PPayableSetup: Record "Procurement Setup";
        RequesterName: Text[100];
        RequesterEmail: Text[100];
        emailhdr: Text[100];
        CompanyDetails: Text[250];
        SupplierDetails: Text[1000];
        SenderMessage: Text[1000];
        ProcNote: Text[1000];
        LoginDetails: Text[1000];
        PortalUser: Record "Dynasoft Portal User";
        Password: Text[50];
        ActivationDetails: Text[1000];
        IFSCommitteMembers: Record "Bid Evaluation Committee";
        IFSTenderCommitte: Record "IFS Tender Committee";
        EvaluationRegister: Record "Bid Evaluation Register";
        BidTabulationHeader: Record "Bid Tabulation Header";
        ProfessDGCOmments: Text[2048];
    begin
        ///Notifying Procurement Team on supplier Request
        CompInfo.Get;
        HRSetup.Get;
        PPayableSetup.Get;


        IFSCommitteMembers.Reset;
        IFSCommitteMembers.SetRange("Document No.", BidTHeader.Code);
        //IFSCommitteMembers.SETFILTER("Role Type",'%1|%2',IFSCommitteMembers."Role Type"::Secretary,IFSCommitteMembers."Role Type"::Chairperson);
        if IFSCommitteMembers.FindSet then begin
            repeat
                IFSCommitteMembers.TestField(Email);
                RequesterEmail := IFSCommitteMembers.Email;
                RequesterName := IFSCommitteMembers."Member Name";
                Window.Open('Notifying...');
                WindowisOpen := true;

                IFSTenderCommitte.Reset;
                IFSTenderCommitte.SetRange("Document No.", BidTHeader."Appointed Bid Evaluation Com");
                if IFSTenderCommitte.FindSet then
                    BidTabulationHeader.Reset;
                BidTabulationHeader.SetRange(BidTabulationHeader."Final Evaluation Report ID", BidTHeader.Code);
                BidTabulationHeader.SetRange(BidTabulationHeader."Document Type", BidTabulationHeader."document type"::"Professional Opinion");
                if BidTabulationHeader.FindSet then begin
                    ProfessDGCOmments := BidTabulationHeader."Reason for Rejection" + ' ' + ' ,' + BidTabulationHeader."Head Of Procurement Remarks";
                end;

                Counter := Counter + 1;

                //Create message
                if HRSetup."E-Mail" = '' then
                    Error('Please Contact the IT Admin to specify the E-mail address under Company Information Setup page!!');
                SenderAddress := HRSetup."E-Mail";

                if PPayableSetup."Default Proc Email Contact" = '' then
                    Error('Please Contact the IT Admin to specify the Procurement Manager E-mail address under Purchases&Payable Setup page!!');
                CustEmail := PPayableSetup."Default Proc Email Contact";

                CompanyDetails := 'Dear,  ' + RequesterName;
                SenderMessage := '<BR>You are hereby notified that the Director General has rejected the evaluation report for tender : ' + Format(BidTHeader."Tender Name") + '</BR>';
                SenderMessage := SenderMessage + ' ' + '<BR>kindly take note of the following comments: ' + Format(ProfessDGCOmments) + '</BR>';
                SenderMessage := SenderMessage + ' ' + '<BR>You are therefore required to re-evaluate this tender. ' + '</BR>';
                SupplierDetails := '<BR>The Re-evaluation will be done on:' + Format(BidTHeader."New Evaluation Date") + ' ' + Format(BidTHeader."New Evaluation Time") + '<BR> at:' + BidTHeader."New Venue" + '</BR>';
                //'<BR>Venue:'+FORMAT(BidTHeader."New Venue")+'</BR>'+
                //'<BR>Evaluation Date:'+FORMAT(BidTHeader."New Evaluation Date")+'</BR>'+
                //'<BR>Evaluation Time:'+FORMAT(BidTHeader."New Evaluation Time")+'</BR>';
                //'<BR>Tender Name:'+IFSTenderCommitte."Tender Name"+'</BR>';
                //'<BR>Appointing Authority:'+IFSTenderCommitte."Appointing Authority"+'</BR>';
                //LoginDetails:='Attached herein, please find an e-copy of Tender Evaluation Summary';


                ProcNote := '<BR> If you require any assistance, please contact our Procurement team by Phone ' + HRSetup."Phone No." + ' or vendor support team via Email: ' + PPayableSetup."Default Proc Email Contact";

                /*EvaluationRegister.RESET;
                EvaluationRegister.SETRANGE(Code,BidTHeader."Final Evaluation Report ID");
                IF EvaluationRegister.FINDSET THEN
                FileDirectory :=  'C:\DOCS\';
                FileName := 'BidRe_Evaluation_'+BidTHeader."IFS Code"+'.pdf';
                 //Report.SaveAsPdf(70041,FileDirectory+FileName,EvaluationRegister);*/
                //IF EvaluationRegister."Evaluation Type"=evaluationHeaader."Evaluation Type"::"Financial Evaluation" THEN
                // //Report.SaveAsPdf(70042,FileDirectory+FileName,EvaluationRegister);

                if CustEmail = '' then
                    exit;

                //MESSAGE:='This is to notify you that there has been a request for Registration ' +  SupplierRequest."No." + ' From Supplier'+ SupplierRequest.Name;
                emailhdr := 'Tender/Procurement Re_Evaluation Summary (Reference No: ' + BidTHeader."IFS Code" + ')';

                //cu400.CreateMessage(CompInfo.Name, SenderAddress, RequesterEmail, emailhdr,
                //CompanyDetails + '<BR></BR>' + SenderMessage + SupplierDetails + LoginDetails + ActivationDetails, true);

                ////cu400.AddCC(RequesterEmail);

                //cu400.AddBodyline(ProcNote);

                ////cu400.AddAttachment(FileDirectory+FileName,FileName);
                //cu400.Send;
                SendingDate := Today;
                SendingTime := Time;

                IFSCommitteMembers."Notified on Email" := true;
                IFSCommitteMembers."Date/Time Notified" := CurrentDatetime;
                IFSCommitteMembers.Modify(true);


                Sleep(1000);
                Window.Close;

            until IFSCommitteMembers.Next = 0;
        end;

    end;

    procedure FnCopyFromThePreviousEvaluatedBid(BEvalReg: Record "Bid Evaluation Register"): Code[50]
    var
        BidEvaluationRegister: Record "Bid Evaluation Register";
        BidEvaluationScoreEntry: Record "Bid Evaluation Score Entry";
        BidEvaluationScoreGuide: Record "Bid Evaluation Score Guide";
        ObjBidEvaluationScoreEntry: Record "Bid Evaluation Score Entry";
        ObjBidEvaluationScoreGuide: Record "Bid Evaluation Score Guide";
    begin
        BidEvaluationRegister.Reset;
        BidEvaluationRegister.SetRange(BidEvaluationRegister."Evaluation Type", BEvalReg."Evaluation Type");
        BidEvaluationRegister.SetRange(BidEvaluationRegister."Evaluator Category", BEvalReg."Evaluator Category");
        BidEvaluationRegister.SetFilter(BidEvaluationRegister.Code, '<>%1', BEvalReg.Code);
        BidEvaluationRegister.SetFilter(BidEvaluationRegister."Bid No.", BEvalReg."Bid No.");//Added Mtr
        BidEvaluationRegister.SetRange(BidEvaluationRegister.Posted, true);
        if BidEvaluationRegister.FindLast then
            exit(BidEvaluationRegister.Code);
    end;

    procedure FnGetThaLastEvaluationRegisterNo(BEvalReg: Record "Bid Evaluation Register")
    var
        BidEvaluationRegister: Record "Bid Evaluation Register";
        BidEvaluationScoreEntry: Record "Bid Evaluation Score Entry";
        BidEvaluationScoreGuide: Record "Bid Evaluation Score Guide";
        ObjBidEvaluationScoreEntry: Record "Bid Evaluation Score Entry";
        ObjBidEvaluationScoreGuide: Record "Bid Evaluation Score Guide";
        BEvalReg2: Record "Bid Evaluation Register";
    begin
        BEvalReg2.Reset;
        BEvalReg2.SetRange(Code, BEvalReg."Previous Evaluation No.");
        BEvalReg2.SetRange("Evaluation Type", BEvalReg2."evaluation type"::"Post Qualification");
        if BEvalReg2.FindSet then begin
            BEvalReg."Post Quali Comm Remarks" := BEvalReg2."Post Quali Comm Remarks";
            BEvalReg."Post Qualification Reccommenda" := BEvalReg2."Post Qualification Reccommenda";
            BEvalReg.Modify(true);
        end;

        BidEvaluationScoreEntry.Reset;
        BidEvaluationScoreEntry.SetRange(BidEvaluationScoreEntry.Code, BEvalReg."Previous Evaluation No.");
        if BidEvaluationScoreEntry.FindSet then
            repeat
                ObjBidEvaluationScoreEntry.Init;
                ObjBidEvaluationScoreEntry.TransferFields(BidEvaluationScoreEntry);
                ObjBidEvaluationScoreEntry."Line No" := 0;
                ObjBidEvaluationScoreEntry.Code := BEvalReg.Code;
                ObjBidEvaluationScoreEntry.Insert(true);
            until BidEvaluationScoreEntry.Next = 0;

        BidEvaluationScoreGuide.Reset;
        BidEvaluationScoreGuide.SetRange(BidEvaluationScoreGuide."Document No", BEvalReg."Previous Evaluation No.");
        if BidEvaluationScoreGuide.FindSet then
            repeat
                ObjBidEvaluationScoreGuide.Init;
                ObjBidEvaluationScoreGuide.TransferFields(BidEvaluationScoreGuide);
                ObjBidEvaluationScoreGuide."Document No" := BEvalReg.Code;
                ObjBidEvaluationScoreGuide."Entry No" := 0;
                ObjBidEvaluationScoreGuide.Insert(true);
            until BidEvaluationScoreGuide.Next = 0;
    end;


    procedure FnSendBidRe_EvaluationNotificationFromRejectedProfessionalOpinionChairperson(BidTHeader: Record "Bid Tabulation Header")
    var
        SupplierReq: Record Contact;
        LastFieldNo: Integer;
        FooterPrinted: Boolean;
        FileDirectory: Text[100];
        FileName: Text[100];
        ReportID: Integer;
        //"Object": Record "Object";
        Window: Dialog;
        RunOnceFile: Text[1000];
        TimeOut: Integer;
        Customer2: Record Customer;
        Cust: Record Customer;
        cr: Integer;
        lf: Integer;
        EmailBody: array[2] of Text[30];
        BodyText: Text[250];
        mymail: Codeunit Mail;
        DefaultPrinter: Text[200];
        WindowisOpen: Boolean;
        FileDialog: Codeunit Mail;
        SendingDate: Date;
        SendingTime: Time;
        Counter: Integer;
        cu400: Codeunit Mail;
        DocLog: Record "Document E-mail Log";
        BranchName: Code[80];
        DimValue: Record "Dimension Value";
        SenderAddress: Text[100];
        CustEmail: Text[100];
        UserSetup: Record "User Setup";
        HRSetup: Record "Company Information";
        Emp: Record Vendor;
        PayrollMonth: Date;
        PayrollMonthText: Text[30];
        PayPeriodtext: Text;
        PayPeriod: Record "Payroll PeriodX";
        CompInfo: Record "Company Information";
        DateFilter: Text;
        FromDate: Date;
        ToDate: Date;
        FromDateS: Text;
        ToDateS: Text;
        vend: Record Vendor;
        StartDate: Date;
        EndDAte: Date;
        EmailVerifier: Codeunit Payroll3;
        IsEmailValid: Boolean;
        PPayableSetup: Record "Procurement Setup";
        RequesterName: Text[100];
        RequesterEmail: Text[100];
        emailhdr: Text[100];
        CompanyDetails: Text[250];
        SupplierDetails: Text[1000];
        SenderMessage: Text[1000];
        ProcNote: Text[1000];
        LoginDetails: Text[1000];
        PortalUser: Record "Dynasoft Portal User";
        Password: Text[50];
        ActivationDetails: Text[1000];
        IFSCommitteMembers: Record "Bid Evaluation Committee";
        IFSTenderCommitte: Record "IFS Tender Committee";
        EvaluationRegister: Record "Bid Evaluation Register";
        BidTabulationHeader: Record "Bid Tabulation Header";
        ProfessDGCOmments: Text[2048];
    begin
        ///Notifying Procurement Team on supplier Request
        CompInfo.Get;
        HRSetup.Get;
        PPayableSetup.Get;


        IFSCommitteMembers.Reset;
        IFSCommitteMembers.SetRange("Document No.", BidTHeader.Code);
        IFSCommitteMembers.SetFilter("Role Type", '%1', IFSCommitteMembers."role type"::Chairperson);
        if IFSCommitteMembers.FindSet then begin
            repeat
                IFSCommitteMembers.TestField(Email);
                RequesterEmail := IFSCommitteMembers.Email;
                RequesterName := IFSCommitteMembers."Member Name";
                Window.Open('Notifying...');
                WindowisOpen := true;

                IFSTenderCommitte.Reset;
                IFSTenderCommitte.SetRange("Document No.", BidTHeader."Appointed Bid Evaluation Com");
                if IFSTenderCommitte.FindSet then
                    BidTabulationHeader.Reset;
                BidTabulationHeader.SetRange(BidTabulationHeader."Final Evaluation Report ID", BidTHeader.Code);
                BidTabulationHeader.SetRange(BidTabulationHeader."Document Type", BidTabulationHeader."document type"::"Professional Opinion");
                if BidTabulationHeader.FindSet then begin
                    ProfessDGCOmments := BidTabulationHeader."Reason for Rejection" + ' ' + ' ,' + BidTabulationHeader."Head Of Procurement Remarks";
                end;

                Counter := Counter + 1;

                //Create message
                if HRSetup."E-Mail" = '' then
                    Error('Please Contact the IT Admin to specify the E-mail address under Company Information Setup page!!');
                SenderAddress := HRSetup."E-Mail";

                if PPayableSetup."Default Proc Email Contact" = '' then
                    Error('Please Contact the IT Admin to specify the Procurement Manager E-mail address under Purchases&Payable Setup page!!');
                CustEmail := PPayableSetup."Default Proc Email Contact";

                CompanyDetails := 'Dear,  ' + RequesterName;
                SenderMessage := '<BR>You are hereby notified that the Committee Secretary has submitted the evaluation report for tender : ' + Format(BidTHeader."Tender Name") + '</BR>';
                SenderMessage := SenderMessage + ' ' + '<BR>for your review ' + Format(ProfessDGCOmments) + '</BR>';
                SenderMessage := SenderMessage + ' ' + '<BR>Kindly login into the system and review and submit to the Head of Procurement. ' + '</BR>';
                //SupplierDetails:='<BR>The Re-evaluation will be done on:'+FORMAT(BidTHeader."New Evaluation Date")+' '+FORMAT(BidTHeader."New Evaluation Time")+'<BR> at:'+BidTHeader."New Venue"+'</BR>';
                //'<BR>Venue:'+FORMAT(BidTHeader."New Venue")+'</BR>'+
                //'<BR>Evaluation Date:'+FORMAT(BidTHeader."New Evaluation Date")+'</BR>'+
                //'<BR>Evaluation Time:'+FORMAT(BidTHeader."New Evaluation Time")+'</BR>';
                //'<BR>Tender Name:'+IFSTenderCommitte."Tender Name"+'</BR>';
                //'<BR>Appointing Authority:'+IFSTenderCommitte."Appointing Authority"+'</BR>';
                //LoginDetails:='Attached herein, please find an e-copy of Tender Evaluation Summary';


                ProcNote := '<BR> If you require any assistance, please contact our ICT team ' + '</BR>';

                /*EvaluationRegister.RESET;
                EvaluationRegister.SETRANGE(Code,BidTHeader."Final Evaluation Report ID");
                IF EvaluationRegister.FINDSET THEN
                FileDirectory :=  'C:\DOCS\';
                FileName := 'BidRe_Evaluation_'+BidTHeader."IFS Code"+'.pdf';
                 //Report.SaveAsPdf(70041,FileDirectory+FileName,EvaluationRegister);*/
                //IF EvaluationRegister."Evaluation Type"=evaluationHeaader."Evaluation Type"::"Financial Evaluation" THEN
                // //Report.SaveAsPdf(70042,FileDirectory+FileName,EvaluationRegister);

                if CustEmail = '' then
                    exit;

                //MESSAGE:='This is to notify you that there has been a request for Registration ' +  SupplierRequest."No." + ' From Supplier'+ SupplierRequest.Name;
                emailhdr := 'Tender Final Evaluation Report Submission (Reference No: ' + BidTHeader."IFS Code" + ')';

                //cu400.CreateMessage(CompInfo.Name, SenderAddress, RequesterEmail, emailhdr,
                //CompanyDetails + '<BR></BR>' + SenderMessage + SupplierDetails + LoginDetails + ActivationDetails, true);

                //cu400.AddCC(RequesterEmail);

                //cu400.AddBodyline(ProcNote);

                ////cu400.AddAttachment(FileDirectory+FileName,FileName);
                //cu400.Send;
                SendingDate := Today;
                SendingTime := Time;

                //IFSCommitteMembers."Notified on Email":=TRUE;
                IFSCommitteMembers."Date/Time Notified" := CurrentDatetime;
                IFSCommitteMembers.Modify(true);


                Sleep(1000);
                Window.Close;

            until IFSCommitteMembers.Next = 0;
        end;
        Message('Notification has Been Sent to the ChairPerson.');

    end;


    procedure FnSendBidRe_EvaluationNotificationFromRejectedProfessionalOpinionSecretary(BidTHeader: Record "Bid Tabulation Header")
    var
        SupplierReq: Record Contact;
        LastFieldNo: Integer;
        FooterPrinted: Boolean;
        FileDirectory: Text[100];
        FileName: Text[100];
        ReportID: Integer;
        //"Object": Record "Object";
        Window: Dialog;
        RunOnceFile: Text[1000];
        TimeOut: Integer;
        Customer2: Record Customer;
        Cust: Record Customer;
        cr: Integer;
        lf: Integer;
        EmailBody: array[2] of Text[30];
        BodyText: Text[250];
        mymail: Codeunit Mail;
        DefaultPrinter: Text[200];
        WindowisOpen: Boolean;
        FileDialog: Codeunit Mail;
        SendingDate: Date;
        SendingTime: Time;
        Counter: Integer;
        cu400: Codeunit Mail;
        DocLog: Record "Document E-mail Log";
        BranchName: Code[80];
        DimValue: Record "Dimension Value";
        SenderAddress: Text[100];
        CustEmail: Text[100];
        UserSetup: Record "User Setup";
        HRSetup: Record "Company Information";
        Emp: Record Vendor;
        PayrollMonth: Date;
        PayrollMonthText: Text[30];
        PayPeriodtext: Text;
        PayPeriod: Record "Payroll PeriodX";
        CompInfo: Record "Company Information";
        DateFilter: Text;
        FromDate: Date;
        ToDate: Date;
        FromDateS: Text;
        ToDateS: Text;
        vend: Record Vendor;
        StartDate: Date;
        EndDAte: Date;
        EmailVerifier: Codeunit Payroll3;
        IsEmailValid: Boolean;
        PPayableSetup: Record "Procurement Setup";
        RequesterName: Text[100];
        RequesterEmail: Text[100];
        emailhdr: Text[100];
        CompanyDetails: Text[250];
        SupplierDetails: Text[1000];
        SenderMessage: Text[1000];
        ProcNote: Text[1000];
        LoginDetails: Text[1000];
        PortalUser: Record "Dynasoft Portal User";
        Password: Text[50];
        ActivationDetails: Text[1000];
        IFSCommitteMembers: Record "Bid Evaluation Committee";
        IFSTenderCommitte: Record "IFS Tender Committee";
        EvaluationRegister: Record "Bid Evaluation Register";
        BidTabulationHeader: Record "Bid Tabulation Header";
        ProfessDGCOmments: Text[2048];
    begin
        ///Notifying Procurement Team on supplier Request
        CompInfo.Get;
        HRSetup.Get;
        PPayableSetup.Get;


        IFSCommitteMembers.Reset;
        IFSCommitteMembers.SetRange("Document No.", BidTHeader.Code);
        IFSCommitteMembers.SetFilter("Role Type", '%1', IFSCommitteMembers."role type"::Secretary);
        if IFSCommitteMembers.FindSet then begin
            repeat
                IFSCommitteMembers.TestField(Email);
                RequesterEmail := IFSCommitteMembers.Email;
                RequesterName := IFSCommitteMembers."Member Name";
                Window.Open('Notifying...');
                WindowisOpen := true;

                IFSTenderCommitte.Reset;
                IFSTenderCommitte.SetRange("Document No.", BidTHeader."Appointed Bid Evaluation Com");
                if IFSTenderCommitte.FindSet then
                    BidTabulationHeader.Reset;
                BidTabulationHeader.SetRange(BidTabulationHeader."Final Evaluation Report ID", BidTHeader.Code);
                BidTabulationHeader.SetRange(BidTabulationHeader."Document Type", BidTabulationHeader."document type"::"Professional Opinion");
                if BidTabulationHeader.FindSet then begin
                    ProfessDGCOmments := BidTabulationHeader."Chairmans Comments";
                    //"+' '+' ,'+BidTabulationHeader."Head Of Procurement Remarks";
                end;

                Counter := Counter + 1;

                //Create message
                if HRSetup."E-Mail" = '' then
                    Error('Please Contact the IT Admin to specify the E-mail address under Company Information Setup page!!');
                SenderAddress := HRSetup."E-Mail";

                if PPayableSetup."Default Proc Email Contact" = '' then
                    Error('Please Contact the IT Admin to specify the Procurement Manager E-mail address under Purchases&Payable Setup page!!');
                CustEmail := PPayableSetup."Default Proc Email Contact";

                CompanyDetails := 'Dear,  ' + RequesterName;
                SenderMessage := '<BR>You are hereby notified that theCommittee Chairperson has sent the evaluation report for tender : ' + Format(BidTHeader."Tender Name") + '</BR>';
                SenderMessage := SenderMessage + ' ' + '<BR>back for review with the following comments: ' + Format(ProfessDGCOmments) + '</BR>';
                //SenderMessage:=SenderMessage+' '+'<BR>You are therefore required to re-evaluate this tender. '+'</BR>';
                //SupplierDetails:='<BR>The Re-evaluation will be done on:'+FORMAT(BidTHeader."New Evaluation Date")+' '+FORMAT(BidTHeader."New Evaluation Time")+'<BR> at:'+BidTHeader."New Venue"+'</BR>';
                //'<BR>Venue:'+FORMAT(BidTHeader."New Venue")+'</BR>'+
                //'<BR>Evaluation Date:'+FORMAT(BidTHeader."New Evaluation Date")+'</BR>'+
                //'<BR>Evaluation Time:'+FORMAT(BidTHeader."New Evaluation Time")+'</BR>';
                //'<BR>Tender Name:'+IFSTenderCommitte."Tender Name"+'</BR>';
                //'<BR>Appointing Authority:'+IFSTenderCommitte."Appointing Authority"+'</BR>';
                //LoginDetails:='Attached herein, please find an e-copy of Tender Evaluation Summary';


                ProcNote := '<BR> If you require any assistance, please contact our Procurement team by Phone ' + HRSetup."Phone No." + ' or vendor support team via Email: ' + PPayableSetup."Default Proc Email Contact";

                /*EvaluationRegister.RESET;
                EvaluationRegister.SETRANGE(Code,BidTHeader."Final Evaluation Report ID");
                IF EvaluationRegister.FINDSET THEN
                FileDirectory :=  'C:\DOCS\';
                FileName := 'BidRe_Evaluation_'+BidTHeader."IFS Code"+'.pdf';
                 //Report.SaveAsPdf(70041,FileDirectory+FileName,EvaluationRegister);*/
                //IF EvaluationRegister."Evaluation Type"=evaluationHeaader."Evaluation Type"::"Financial Evaluation" THEN
                // //Report.SaveAsPdf(70042,FileDirectory+FileName,EvaluationRegister);

                if CustEmail = '' then
                    exit;

                //MESSAGE:='This is to notify you that there has been a request for Registration ' +  SupplierRequest."No." + ' From Supplier'+ SupplierRequest.Name;
                emailhdr := 'Tender Final Evaluation Report Review(Reference No: ' + BidTHeader."IFS Code" + ')';

                //cu400.CreateMessage(CompInfo.Name, SenderAddress, RequesterEmail, emailhdr,
                //CompanyDetails + '<BR></BR>' + SenderMessage + SupplierDetails + LoginDetails + ActivationDetails, true);

                ////cu400.AddCC(RequesterEmail);

                //cu400.AddBodyline(ProcNote);

                ////cu400.AddAttachment(FileDirectory+FileName,FileName);
                //cu400.Send;
                SendingDate := Today;
                SendingTime := Time;

                IFSCommitteMembers."Notified on Email" := true;
                IFSCommitteMembers."Date/Time Notified" := CurrentDatetime;
                IFSCommitteMembers.Modify(true);


                Sleep(1000);
                Window.Close;

            until IFSCommitteMembers.Next = 0;
        end;
        Message('The Final Evaluation Report has been Sent for Review');

    end;


    procedure FnNotifyDirectorProfessionalOpinion(PEval: Record "Project Evaluation Header")
    var
        "Code": Code[10];
        ProcurementSetup: Record "Procurement Setup";
        IFPResponseLine: Record "IFP Response Line";
        Vendors: Record Vendor;
        InsCoverageLedgerEntry: Record "Ins. Coverage Ledger Entry";
        InsuranceReg: Record Insurance;
        Window: Dialog;
        EmailBody: array[2] of Text[30];
        BodyText: Text[250];
        mymail: Codeunit Mail;
        WindowisOpen: Boolean;
        FileDialog: Codeunit Mail;
        SendingDate: Date;
        SendingTime: Time;
        Counter: Integer;
        cu400: Codeunit Mail;
        SenderAddress: Text[100];
        UserSetup: Record "User Setup";
        HRSetup: Record "Human Resources Setup";
        CompInfo: Record "Company Information";
        RequesterName: Text[100];
        RequesterEmail: Text[100];
        emailhdr: Text[100];
        ProcNote: Text[1000];
        LoginDetails: Text[1000];
        CustEmail: Text[100];
        CompanyDetails: Text[250];
        SupplierDetails: Text[1000];
        SenderMessage: Text[1000];
        FileDirectory: Text[100];
        FileName: Text[100];
        RFIResponse2: Record "RFI Response";
        RFIResponse: Record "RFI Response";
        IFPResponseLine1: Record "IFP Response Line";
    begin
        CompInfo.Get;
        ProcurementSetup.Get;
        RequesterEmail := ProcurementSetup."Default Proc Email Contact";
        RequesterName := ProcurementSetup."Default Proc Email Contact";
        Window.Open('Sending...');
        WindowisOpen := true;
        //Create message
        if ProcurementSetup."Default Proc Email Contact" = '' then
            Error('Please Contact the IT Admin to specify the E-mail address under Procurement Setup page!!');
        SenderAddress := ProcurementSetup."Default Proc Email Contact";
        ResponsibilityCenter.Reset;
        ResponsibilityCenter.SetRange(ResponsibilityCenter.Code, PEval."Directorate ID");
        ResponsibilityCenter.SetRange(ResponsibilityCenter."Operating Unit Type", ResponsibilityCenter."operating unit type"::Directorate);
        if ResponsibilityCenter.FindSet then begin
            ResponsibilityCenter.TestField("E-Mail");
            CustEmail := ResponsibilityCenter."E-Mail";
        end;
        CompanyDetails := 'Dear Sir/Madam,<br>';
        SenderMessage := '<BR>You are hereby notified of ' + Format(PEval."Document Type") + ' ' + PEval."Document No." + ' ' + PEval.Description + ' ' + '. Please log into the system and initiate the Project Variatio order.<br/>';
        SupplierDetails := '';
        LoginDetails := 'If you require any assistance, please contact the ICT Department.<br/>';
        ProcNote := '<BR> Regards';
        if CustEmail = '' then
            exit;

        emailhdr := CompInfo.Name + ' ' + Format(PEval."Document Type");
        //cu400.CreateMessage(CompInfo.Name, SenderAddress, CustEmail, emailhdr,
        //CompanyDetails + '<BR></BR>' + SenderMessage + SupplierDetails + LoginDetails, true);
        //cu400.AddCC(RequesterEmail);
        //cu400.AddBodyline(ProcNote);
        ////cu400.AddAttachment(FileDirectory+FileName,FileName);
        //cu400.Send;
        SendingDate := Today;
        SendingTime := Time;
        Sleep(1000);
        Window.Close;


        Message('Notified Successfully');
    end;


    procedure FnSendRFQInvitationReport(IFS: Record "Standard Purchase Code"; ObjVend: Record Vendor)
    var
        IFSList: Record "Standard Purchase Code";
        SupplierReq: Record Contact;
        LastFieldNo: Integer;
        FooterPrinted: Boolean;
        FileDirectoryQ: Text[100];
        FileNameQ: Text[100];
        ReportID: Integer;
        //"Object": Record "Object";
        Window: Dialog;
        RunOnceFile: Text[1000];
        TimeOut: Integer;
        Customer2: Record Customer;
        CustQ: Record Customer;
        cr: Integer;
        lf: Integer;
        EmailBody: array[2] of Text[30];
        BodyText: Text[250];
        mymail: Codeunit Mail;
        DefaultPrinter: Text[200];
        WindowisOpen: Boolean;
        FileDialog: Codeunit Mail;
        SendingDate: Date;
        SendingTime: Time;
        Counter: Integer;
        cu400: Codeunit Mail;
        DocLog: Record "Document E-mail Log";
        BranchName: Code[80];
        DimValue: Record "Dimension Value";
        SenderAddress: Text[100];
        CustEmailQ: Text[100];
        UserSetup: Record "User Setup";
        HRSetup: Record "Company Information";
        Emp: Record Vendor;
        PayrollMonth: Date;
        PayrollMonthText: Text[30];
        PayPeriodtext: Text;
        PayPeriod: Record "Payroll PeriodX";
        CompInfo: Record "Company Information";
        DateFilter: Text;
        FromDate: Date;
        ToDate: Date;
        FromDateS: Text;
        ToDateS: Text;
        vend: Record Vendor;
        StartDate: Date;
        EndDAte: Date;
        EmailVerifier: Codeunit Payroll3;
        IsEmailValid: Boolean;
        PPayableSetup: Record "Procurement Setup";
        RequesterName: Text[100];
        RequesterEmail: Text[100];
        emailhdr: Text[100];
        CompanyDetails: Text[250];
        SupplierDetails: Text[1000];
        SenderMessage: Text[1000];
        ProcNote: Text[1000];
        LoginDetails: Text[1000];
        PortalUser: Record "Dynasoft Portal User";
        Password: Text[50];
        ActivationDetails: Text[1000];
        RFQReqVendors: Record "Standard Vendor Purchase Code";
        StandardPurchaseCode: Record "Standard Purchase Code";
        RFQReqVendors1: Record "Standard Vendor Purchase Code";
        PrequalificationEntry: Record "Vendor Prequalification Entry";
        ProcurementCat: Record "Procurement Category";
        IFP: Record "Request For Information";
        IFPResponseL: Record "IFP Response Line";
        ConfirmManagement: Codeunit "Confirm Management";
        ProctSetup: Record "Procurement Setup";
        FeedbackValue: Boolean;
        nobids: Integer;
        InsuranceReg: Record "Purchase Line";
        FileDirectory: Text[100];
        FileName: Text[100];
        conftxt: Boolean;
        optionselected: Integer;
        NoSeriesManagement: Codeunit NoSeriesManagement;
        CustEmail: Text[100];
        SMTPMailSetup: Record "Email Account";
        SMTPMail: Codeunit "Email Message";
        HumanResourcesSetup: Record "Human Resources Setup";
        SenderName: Text[250];
        SenderEmailAddress: Text[250];
        Receipients: text[50];//List of [Text];
        Subject: Text[250];
        Body: Text[250];
        Employee: Record Employee;
        ImprestNotificationsSetup: Record "Imprest Notifications Setup";
        InsuranceNotifications: Codeunit "Insurance Notifications";
        Smail: Codeunit EMail;
        Safari: record "Project Members";
        TempBlob: Codeunit "Temp Blob";
        RecRef: RecordRef;
        Recipients: List of [Text];
        OutStr: OutStream;
        InStr: InStream;
        DocumentAttachment: Record "Document Attachment";
        DocumentAttachments: Page "Document Attachment Details";
        TempBlobD: Codeunit "Temp Blob";
        FileManagement: Codeunit "File Management";
        DocumentStream: OutStream;
        DocumentInStream: InStream;
        FullFileName: Text;
        fref: FieldRef;
        fref2: FieldRef;
        ServerFileInStream: InStream;
        MailLog: Record "Document E-mail Log";
    begin
        ///Notifying Procurement Team on supplier Request
        if IFS."RFQ Sent" then
            if not ConfirmManagement.GetResponseOrDefault(StrSubstNo('The RFQ %1 has already been sent. Are you sure you want to resend it to the vendors?', IFS.Code), false) then
                exit;
        CompInfo.Get;
        HRSetup.Get;
        PPayableSetup.Get;
        // StandardPurchaseCode.RESET;
        // StandardPurchaseCode.SETRANGE(StandardPurchaseCode.Code,IFS.Code);
        // IF StandardPurchaseCode.FINDSET THEN BEGIN
        RFQReqVendors.Reset;
        RFQReqVendors.SetRange(RFQReqVendors.Code, IFS.Code);
        //RFQReqVendors.SETRANGE("Vendor No.",ObjVend."No.");
        if RFQReqVendors.FindSet then begin
            repeat
                RFQReqVendors.TestField("Primary Email");
                RequesterEmail := RFQReqVendors."Primary Email";
                RequesterName := RFQReqVendors."Vendor Name";
                ////

                //Window.OPEN('Sending...');

                SenderName := CompanyProperty.DisplayName;
                Window.OPEN('Sending...');

                WindowisOpen := TRUE;


                //Counter:=Counter+1;

                //Create message
                if HRSetup."E-Mail" = '' then
                    Error('Please Contact the IT Admin to specify the E-mail address under Company Information Setup page!!');
                SenderAddress := HRSetup."E-Mail";

                if PPayableSetup."Default Proc Email Contact" = '' then
                    Error('Please Contact the IT Admin to specify the Procurement Manager E-mail address under Purchases&Payable Setup page!!');
                CustEmail := PPayableSetup."Default Proc Email Contact";

                CompanyDetails := 'Dear: ' + RequesterName;
                //
                SenderMessage := 'Dear: ' + RequesterName + '<BR>You are hereby invited to submit your Bid Response for the Request for Quotation: ' + IFS.Code + ' That is summarized as follows:</BR>' + '<BR>RFQ Invitation Notice Number: ' + IFS.Code + '</BR>' + '<BR> Description: ' + IFS.Description + '</BR>' +
                '<BR>Submission Due Date: ' + Format(IFS."Submission End Date") + '</BR>' +
                '<BR>Submission Due Time: ' + Format(IFS."Submission End Time") + '</BR>' +
                '<BR>Procuring Entity Name: ' + IFS."Procuring Entity Name/Contact" + '</BR>'
                + //'Kindly find the attached request for quotation for your action+' + '</BR>' +
                ' Your response should be DROPPED IN THE QUOTATION BOX  before the deadline as indicated on the instructions.' + '</BR>' +
                'Please acknowledge receipt of this quotation.' + '</BR>' +
              '<BR> If you require any assistance, please contact our Supply Chain Management Team by Phone ' + HRSetup."Phone No." + ' or vendor support team via Email: ' + PPayableSetup."Default Proc Email Contact";


                //
                SupplierDetails := '<BR>RFQ Invitation Notice Number: ' + IFS.Code + '</BR>' + '<BR> Description: ' + IFS.Description + '</BR>' +
                '<BR>Submission Due Date: ' + Format(IFS."Submission End Date") + '</BR>' +
                '<BR>Submission Due Time: ' + Format(IFS."Submission End Time") + '</BR>' +
                '<BR>Procuring Entity Name: ' + IFS."Procuring Entity Name/Contact" + '</BR>';
                LoginDetails := 'Kindly find the attached request for quotation for your action+' + '</BR>' +
                ' Your response should be DROPPED IN THE QUOTATION BOX  before the deadline as indicated on the instructions.' + '</BR>' +
                'Please acknowledge receipt of this quotation.' + '</BR>';
                ProcNote := '<BR> If you require any assistance, please contact our Supply Chain Management Team by Phone ' + HRSetup."Phone No." + ' or vendor support team via Email: ' + PPayableSetup."Default Proc Email Contact";

                if CustEmail = '' then
                    exit;
                subject := 'Invitation Notice for Request for Quotation(RFQ) Reference No: (' + IFS.Code + ')';

                SMTPMail.Create(RequesterEmail, Subject, SenderMessage, TRUE);
                IFSList.Reset;
                IFSList.SetRange(Code, IFS.Code);
                if IFSList.FindFirst() then begin
                    RFQReqVendors1.Reset;
                    RFQReqVendors1.SetRange(Code, IFSList.Code);
                    RFQReqVendors1.SetRange("Vendor No.", RFQReqVendors."Vendor No.");
                    if RFQReqVendors1.Findfirst() then begin
                        //check on this code
                        // Report.SaveAsPdf(70062, FileDirectory, RFQReqVendors1);
                        RecRef.GetTable(RFQReqVendors1);
                        TempBlob.CreateOutStream(OutStr);
                        // recRef.Open(Database::"Standard Vendor Purchase Code");
                        // fref := RecRef.field(2);
                        // fref.setrange(RFQReqVendors1.Code);
                        // fref2 := RecRef.field(1);
                        //fref2.setrange(RFQReqVendors1."Vendor No.");
                        Report.SaveAs(Report::RFQ, '', ReportFormat::Pdf, OutStr, RecRef);
                        TempBlob.CreateInStream(InStr);
                        SMTPMail.AddAttachment('RFQ.pdf', 'PDF', InStr);
                        // recRef.Close();
                    end;
                end;
                DocumentAttachment.Reset();
                DocumentAttachment.SetRange("No.", IFS.Code);
                if DocumentAttachment.FindSet() then begin
                    repeat
                        FullFileName := '';
                        FullFileName := DocumentAttachment."File Name" + '.' + DocumentAttachment."File Extension";
                        //DocumentAttachment.CalcFields("Attached By")
                        TempBlobD.CreateInstream(DocumentInStream);
                        if DocumentAttachment."Document Reference ID".HasValue() then begin
                            clear(TempBlobD);
                            TempBlobD.CreateOutStream(DocumentStream);
                            DocumentAttachment."Document Reference ID".ExportStream(DocumentStream);
                            TempBlobD.CreateInStream(ServerFileInStream);
                            SMTPMail.AddAttachment(FullFileName, DocumentAttachment."File Extension", ServerFileInStream);
                        end;
                    until DocumentAttachment.Next() = 0;
                end;

                // cu400.CreateMessage('dennisonkyalo@dynasoft.co.ke', '', '', Subject, CompanyDetails + '<BR></BR>' + SenderMessage + SupplierDetails + LoginDetails + ActivationDetails, true, true);
                if Smail.Send(SMTPMail, Enum::"Email Scenario"::Default) then begin
                    MailLog.Init();
                    MailLog."Document No" := ifs.Code;
                    MailLog.RFQ := true;
                    MailLog."Vendor No" := RFQReqVendors."Vendor No.";
                    MailLog."Document Type" := MailLog."Document Type"::RFQ;
                    MailLog."E-mailed To" := RFQReqVendors."Primary Email";
                    MailLog.TimeSent := Time;
                    MailLog.DateSent := Today;
                    MailLog."User ID" := UserId;
                    MailLog.insert(true);
                end;
                // SLEEP(1000);

                Window.CLOSE;
            until RFQReqVendors.Next = 0;
        end;
        IFS."RFQ Sent" := true;
        IFS.modify();
        Message('RFQ Sent Successfully');
    end;

    procedure FnSendTenderCommitteNotificationProject(IFSTenderCommitte: Record "IFS Tender Committee")
    var
        SupplierReq: Record Contact;
        LastFieldNo: Integer;
        FooterPrinted: Boolean;
        FileDirectory: Text[100];
        FileName: Text[100];
        ReportID: Integer;
        ////"Object": Record "Object";
        Window: Dialog;
        RunOnceFile: Text[1000];
        TimeOut: Integer;
        Customer2: Record Customer;
        Cust: Record Customer;
        cr: Integer;
        lf: Integer;
        EmailBody: array[2] of Text[30];
        BodyText: Text[250];
        mymail: Codeunit Mail;
        DefaultPrinter: Text[200];
        WindowisOpen: Boolean;
        FileDialog: Codeunit Mail;
        EmailMsg: codeunit "email Message";
        SendingDate: Date;
        SendingTime: Time;
        Counter: Integer;
        cu400: Codeunit Mail;
        DocLog: Record "Document E-mail Log";
        BranchName: Code[80];
        DimValue: Record "Dimension Value";
        SenderAddress: Text[100];
        CustEmail: Text[100];
        UserSetup: Record "User Setup";
        HRSetup: Record "Company Information";
        Emp: Record Vendor;
        PayrollMonth: Date;
        PayrollMonthText: Text[30];
        PayPeriodtext: Text;
        PayPeriod: Record "Payroll PeriodX";
        CompInfo: Record "Company Information";
        DateFilter: Text;
        FromDate: Date;
        ToDate: Date;
        FromDateS: Text;
        ToDateS: Text;
        vend: Record Vendor;
        StartDate: Date;
        EndDAte: Date;
        EmailVerifier: Codeunit Payroll3;
        IsEmailValid: Boolean;
        PPayableSetup: Record "Procurement Setup";
        RequesterName: Text[100];
        RequesterEmail: Text[100];
        emailhdr: Text[100];
        CompanyDetails: Text[250];
        SupplierDetails: Text[1000];
        SenderMessage: Text[1000];
        ProcNote: Text[1000];
        LoginDetails: Text[1000];
        PortalUser: Record "Dynasoft Portal User";
        Password: Text[50];
        ActivationDetails: Text[1000];
        IFSCommitteMembers: Record "IFS Tender Committee Member";
        IFS: Record "Standard Purchase Code";
        CommitteType: Record "Procurement Committee Types";
        CommitteMembers: Record "IFS Tender Committee";
        // Filename: Text;
        Header: Text;
        TempBlob: Codeunit "Temp Blob";
        DocStream: Instream;
        Outs: Outstream;
        RecRef: RecordRef;
        fref: FieldRef;
        Email: Codeunit Email;
        Mail: Codeunit "Email Message";
        Body: Text;
    begin
        ///Notifying Committee on members on appointment
        CompInfo.Get;
        HRSetup.Get;
        PPayableSetup.Get;
        IFSCommitteMembers.Reset;
        IFSCommitteMembers.SetRange("Document No.", IFSTenderCommitte."Document No.");
        if IFSCommitteMembers.FindSet then begin
            repeat
                IFSCommitteMembers.TestField("Member Email");
                RequesterEmail := IFSCommitteMembers."Member Email";
                RequesterName := IFSCommitteMembers."Member Name";
                // Window.Open('Notifying the Sender...');
                // WindowisOpen := true;
                // Counter := Counter + 1;

                //Create message
                // if HRSetup."E-Mail" = '' then
                //     Error('Please Contact the IT Admin to specify the E-mail address under Company Information Setup page!!');
                // SenderAddress := HRSetup."E-Mail";

                if PPayableSetup."Default Proc Email Contact" = '' then
                    Error('Please Contact the IT Admin to specify the Procurement Manager E-mail address under Purchases&Payable Setup page!!');
                CustEmail := HRSetup."E-Mail";

                CompanyDetails := 'Dear,  ' + RequesterName;
                SenderMessage := '<BR>In compliance to section 151(1), (2 a-k) of PPADA Act of 2015 of the Public Procurement  and Asse t Disposal Act, 2015 you are hereby appointed as a member of Contract Implementation Team for project:' + IFSTenderCommitte."Project ID" + ', ' + IFSTenderCommitte."Project Name" + '</BR>';
                SupplierDetails := '<BR>You are expected to submit monthly reports to the Deputy Director(Supply Chain Management) by the 5th date of every month.';
                // + IFSTenderCommitte."Document No." + '</BR>' + '<BR> Committee Type: ' + IFSTenderCommitte.Description + '</BR>' +
                // '<BR>Tender Name: ' + IFSTenderCommitte."Tender Name" + '</BR>' +
                // '<BR>Membership Role: ' + Format(IFSCommitteMembers.Role) + '</BR>' +
                // '<BR>Appointment Effective Date: ' + Format(IFSTenderCommitte."Appointment Effective Date") + '</BR>' +
                // '<BR>Invitation For Supply No: ' + IFSTenderCommitte."IFS Code" + '</BR>' +
                // '<BR>Appointing Authority: ' + IFSTenderCommitte."Appointing Authority" + '</BR>';
                LoginDetails := 'Attached herein, please find an e-copy of your appointment letter';


                ProcNote := '<BR> If you require any assistance, please contact our Supply Chain Management team by Phone ' + HRSetup."Phone No." + ' or vendor support team via Email: ' + PPayableSetup."Default Proc Email Contact";
                emailhdr := 'APPOINTMENT TO CONTRACT IMPLEMENTATION TEAM FOR PROJECT ' + IFSTenderCommitte."Project ID" + ', ' + IFSTenderCommitte."Project Name" + ')';
                Body := CompanyDetails + SenderMessage + SupplierDetails + LoginDetails + ProcNote;
                Report.SaveAs(Report::"CIT RMLF", '', ReportFormat::PDF, Outs, RecRef);
                TempBlob.CreateOutstream(Outs);
                recRef.Open(Database::"IFS Tender Committee");
                fref := RecRef.field(1);
                fref.setrange(IFSTenderCommitte."Document No.");
                TempBlob.CreateInstream(DocStream);
                Mail.Create(RequesterEmail, emailhdr, Body, TRUE);
                Mail.AddAttachment('AppointmentLetter_' + IFSTenderCommitte."Document No." + '.pdf', 'PDF', DocStream);
                if Email.Send(Mail) then begin
                    SendingDate := Today;
                    SendingTime := Time;

                    IFSCommitteMembers."Notified on Email" := true;
                    IFSCommitteMembers."Date/Time Notified" := CurrentDatetime;
                    IFSCommitteMembers.Modify(true);
                end;
                IF CustEmail = '' THEN
                    EXIT;

                Sleep(1000);
                Window.Close;

            until IFSCommitteMembers.Next = 0;
        end;


        //update IFS
        IFS.Reset;
        IFS.SetRange(Code, IFSTenderCommitte."IFS Code");
        if IFS.FindSet then begin
            CommitteType.Reset;
            CommitteType.SetRange("Committee Type", IFSTenderCommitte."Committee Type");
            if CommitteType.FindSet then begin
                if CommitteType."Mandate Type" = CommitteType."mandate type"::"Tender Evaluation" then
                    IFS."Bid Evaluation Committe" := IFSTenderCommitte."Document No."
                else
                    if CommitteType."Mandate Type" = CommitteType."mandate type"::"Tender Opening" then
                        IFS."Bid Opening Committe" := IFSTenderCommitte."Document No.";
                IFS.Modify(true);
            end;

        end;
    end;

    Procedure CancelPurchaseOrder(PurchaseHeader: Record "Purchase Header")
    var
        ConfirmManagement: Codeunit "Confirm Management";
        CommitmentEntries: Record "Commitment Entries";
        CustomFunction: Codeunit "Custom Function";
        "Account Type": Enum "Gen. Journal Account Type";
        CommitmentType: Enum "Commitment Type";
        PurchaseLine: Record "Purchase Line";
        ArchiveManagement: Codeunit ArchiveManagement;
    begin
        if PurchaseHeader."Requester ID" <> UserId then
        error('Order can only be cancelled by the initiator %1',PurchaseHeader."Requester ID");
        PurchaseHeader.TestField("Document Type", PurchaseHeader."Document Type"::Order);
        PurchaseHeader.TestField(Status, PurchaseHeader.Status::Released);
        PurchaseHeader.TestField("Reason to Cancel");
        if GuiAllowed then
            if ConfirmManagement.GetResponseOrDefault(StrSubstNo('Are you sure you want to cancel Purchase order %1', PurchaseHeader."No."), false) then begin
               
                CommitmentEntries.Reset();
                CommitmentEntries.SetRange("Commitment No", PurchaseHeader."No.");
                CommitmentEntries.SetRange("Commitment Type", CommitmentEntries."Commitment Type"::Committed);
                if CommitmentEntries.FindSet() then begin
                    PurchaseLine.Reset();
                    PurchaseLine.SetRange("Document No.", PurchaseHeader."No.");
                    PurchaseLine.SetRange("Document Type", PurchaseHeader."Document Type");
                    PurchaseLine.SetRange(Type, PurchaseLine.Type::"G/L Account");
                    if PurchaseLine.findset() then begin
                        repeat
                            CustomFunction.FnCommitAmount(-PurchaseLine."Amount Including VAT", "Account Type"::"G/L Account", PurchaseLine."No.", CustomFunction.GetBudgetYear(PurchaseHeader."Posting Date"), PurchaseHeader."No.", CommitmentEntries."Source Type"::LPO, PurchaseLine."Shortcut Dimension 1 Code", PurchaseLine."Shortcut Dimension 2 Code", PurchaseLine."Department Code", PurchaseHeader."Document Date", CommitmentType::Reversal, CopyStr('Cancelling PO' + PurchaseLine.Description, 1, 2048));
                        until PurchaseLine.next() = 0;
                    end;
                end;
                 PurchaseHeader."Cancelled?" := true;
                PurchaseHeader."Document Status" := PurchaseHeader."Document Status"::Cancelled;
                if PurchaseHeader.Modify() then
                ArchiveManagement.ArchivePurchDocument(PurchaseHeader);
            end;
    end;
}

